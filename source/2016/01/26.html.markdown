---
title: 『APIデザインケーススタディ』を読んだ
tags:
  - Ruby
---

ようやく『[APIデザインケーススタディ][]』を読み終えた。デザインの本なのだけど、僕はRubyの様々な組み込み・標準添付ライブラリーの解説書、またはエッセイとして、主に読んだ。楽しい時間で、読み終わって寂しい。

<div class="booklog_html"><table><tr><td class="booklog_html_image"><a href="https://gihyo.jp/dp/ebook/2015/978-4-7741-7879-0" target="_blank"><img src="http://image.gihyo.co.jp/assets/images/gdp/2015/978-4-7741-7879-0.jpg" width="92" height="130" style="border:0;border-radius:0;" /></a></td><td class="booklog_html_info" style="padding-left:20px;"><div class="booklog_html_title" style="margin-bottom:10px;font-size:14px;font-weight:bold;"><a href="https://gihyo.jp/dp/ebook/2015/978-4-7741-7879-0" target="_blank">APIデザインケーススタディ ――Rubyの実例から学ぶ。問題に即したデザインと普遍の考え方</a></div><div style="margin-bottom:10px;"><div class="booklog_html_author" style="margin-bottom:15px;font-size:12px;;line-height:1.2em">著者 : <a href="http://booklog.jp/author/%E7%94%B0%E4%B8%AD%E5%93%B2%E8%91%97" target="_blank">田中哲著</a></div><div class="booklog_html_manufacturer" style="margin-bottom:5px;font-size:12px;;line-height:1.2em">株式会社技術評論社</div><div class="booklog_html_release" style="font-size:12px;;line-height:1.2em">発売日 : 2015-12-16</div></div><div class="booklog_html_link_amazon"><a href="http://booklog.jp/item/13/9784774178790" style="font-size:12px;" target="_blank">ブクログでレビューを見る»</a></div></td></tr></table></div>

本当は25日に読み終わったのだけど、昨日はSendagaya.rbのことを書いたので、話題を分けるために今日にした。こういう時、[tDiary][]が恋しくなる。日記の為のソフトウェアだから、一日に複数の話題を書くことが、自然にできる。

この本は「I/O」「ソケット」「プロセス」「時刻」「数、文字列」の五章で構成されている。個人的にこれを

* OSとの間を埋める（「I/O」、「ソケット」、「プロセス」）
* 人間社会との間を埋める（「時刻」）
* その他（「数、文字列」）

と捉えた。

OSとの間を埋める
----------------

RubyのI/Oやプロセスなどに関するクラスは、システムコールやglibcの関数を、インターフェイスは模倣して、内部では呼び出すのを原則としてデザインされている。その中でも、そのままglibcからRubyに移植せず、敢えて異なるインターフェイスや動作にしたほうがいい所があったのでそうした、や、ユースケースを考えるとメソッドを追加したほうがいいからそうした、などの事例が紹介されている。それぞれに調査結果、考察、決断が述べられていて、単なるカタログにはなっていなくてケーススタディする内容があり、面白い。

僕はRubyのユーザーではあるけれど、Cは書けない。拡張ライブラリーは使う一方だし、OSのシステムコールなども直接触ることはまずない。[IO#read_nonblock][]なども、使うことはあってリファレンスマニュアルは読むけど、そこに書いていることで満足して、それでも不明なところは（Rubyプログラムを）動かして確認してから使っていた。この本では、そういった部分のOS側の話なども解説した上で、Rubyではどうしたかと話してくれるので、デザインだけでなく、APIその物の勉強にもなる。「自分が触っている部分の一つ下のレイヤーも理解しておくべきだ」とはよく言われることで、でも中々実践は難しい、その部分を行えるので助かる。

また、余談になるが、ノンブロッキングI/Oという言葉は非常によく聞くし、一応、[EventMachine][]や[Node.js][]などで使えてはいるつもりだ。でも、下のレイヤーでは、ファイルディスクリプターにブロッキングモードとノンブロッキングモードがあって、ノンブロッキングモードの時にアクセスして読み取り可能でなければこういうエラーになって、という仕組みになっていたことは全く知らなかった。この知識が、直後に読み始めた『[nginx実践入門][]』の最初のほうで活きたので思わず顔がにやけた。


人間社会との間を埋める
----------------------

第4章は時刻の話。ここはもう、人間側の都合に合わせる話が圧巻。

閏秒があるから将来の日時を正確に表すことは不可能、というのは序の口で、日本にいると、UTCにタイムゾーンオフセットを足せばいいんでしょ？　くらいに考えてしまうかも知れないけど夏時間があったらそうはいかない。夏時間、いつから夏時間で、いつまで夏時間か、どのように決まるのか、知っていますか？　僕は知らなかった。「毎年これこれの月のこれこれの曜日」みたいに決まっているのはいい方で、太陰暦に従うとか、その年にならないと政府が決めないとか、ほんと色々ある。夏時間の切り替わりのタイミングでは、存在しない日時や二重に存在する日時が存在するので、日時の扱いは慎重さが必要になってくる。


その他
------

ここは数値関連の色々な話。ここまで読んでいれば、APIデザインのパターンに少しは慣れているので、なるほどなるほどとさくさく進む章だった。

「終わりに」で

> ところで、意識的に使いやすさをデザインするにあたって、具体例と並んで存在して欲しいのは、使いやすさの理論です。理論があれば、個々の具体例がどのような理屈で使いやすさを実現しているか、理解しやすくなりますし、目の前の問題を解決するライブラリをどうデザインするのが良いのか、という見通しを与えてくれるでしょう。さらには、使いにくさという問題を発見することにも役に立つかもしれません。

> 残念なことに、今のところ、そのような理論で満足できるものはなさそうです。

ということが述べられていた。何気ない文のようだが、最後まで読んだ所で「意識的に使いやすさをデザイン」と言われると、とても重みがある。

[APIデザインケーススタディ]: https://gihyo.jp/dp/ebook/2015/978-4-7741-7879-0
[tDiary]: http://www.tdiary.org/
[IO#read_nonblock]: http://docs.ruby-lang.org/ja/2.3.0/method/IO/i/read_nonblock.html
[EventMachine]: http://rubyeventmachine.com/
[Node.js]: https://nodejs.org/en/
[nginx実践入門]: https://gihyo.jp/dp/ebook/2016/978-4-7741-7936-0
