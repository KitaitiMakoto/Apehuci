<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"
  xmlns:dc="http://purl.org/dc/elements/1.1/">
  <author>
    <name>北市真</name>
  </author>
  <generator uri="https://middlemanapp.com/"
    version="4.0.2">Middleman Blog</generator>
  <id>https://kitaitimakoto.github.io/apehuci/</id>
  <link href="https://kitaitimakoto.github.io/apehuci/"/>
  <link href="https://kitaitimakoto.github.io/apehuci/recent-days.atom"
    rel="self"
    type="application/atom+xml"/>
  <title>アペフチ</title>
  <updated>2017-03-13T00:00:00Z</updated>
  <entry>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://note.mu/&quot;&gt;note&lt;/a&gt;や&lt;a href=&quot;https://cakes.mu/&quot;&gt;cakes&lt;/a&gt;をやってる&lt;a href=&quot;https://www.pieceofcake.co.jp/&quot;&gt;ピースオブケイク&lt;/a&gt;さんと勤め先の&lt;a href=&quot;https://corkagency.com/&quot;&gt;コルク&lt;/a&gt;とで、毎週月曜ジャンプの発売日（僕の住んでいた札幌では火曜発売だったけどね）に&lt;a href=&quot;https://note.mu/hashtag/%E3%83%86%E3%83%83%E3%82%AF%E4%BC%9A%E8%AD%B0?f=new&amp;amp;search=on&quot;&gt;#テック会議&lt;/a&gt;と称してみんなでテック記事を上げるようにしましょうってなって、面白そうだし&lt;a href=&quot;https://note.mu/&quot;&gt;note&lt;/a&gt;でなくて自分の日記でもいいってことだったので参加してみます。&lt;a href=&quot;https://note.mu/hashtag/%E3%83%86%E3%83%83%E3%82%AF%E4%BC%9A%E8%AD%B0?f=new&amp;amp;search=on&quot;&gt;これまでの記事&lt;/a&gt;を見てみると抽象的な話が多いようで、普段書いてる「これやってみた」という記事とは違うけど頑張ります。&lt;/p&gt;

&lt;p&gt;別に参加者を絞るつもりはないようなので、皆さんも興味があれば更新日を月曜にずらしてみてください。&lt;a href=&quot;https://note.mu/&quot;&gt;note&lt;/a&gt;を使う場合は&lt;a href=&quot;https://note.mu/hashtag/%E3%83%86%E3%83%83%E3%82%AF%E4%BC%9A%E8%AD%B0?f=new&amp;amp;search=on&quot;&gt;#テック会議&lt;/a&gt;でタグ付けしておくと探しやすくてありがたいです。特に報酬とかはありません。&lt;/p&gt;

&lt;p&gt;さて長い前置きだったけど今日は、この前&lt;a href=&quot;https://hypothes.is/&quot;&gt;Hypothes.is&lt;/a&gt;が出してきた、とても興奮するニュースの話をします。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://hypothes.is/blog/ebook-partnership/&quot;&gt;A partnership to bring open annotation to eBooks&lt;/a&gt;&lt;br /&gt;
（電子書籍にオープンなアノテーションをもたらすパートナーシップ）&lt;/p&gt;

&lt;p&gt;一行で言うと、「ウェブページやPDFへのアノテーション用のウェブアプリケーション開発及びそのホスティングサービス運用を行ってきたHypothes.isが、EPUBにアノテーションを付けられるようにするべく、複数の組織とパートナーシップを結ぶ」というニュースです。これで伝わる人は殆どいないと思うので解説します。&lt;/p&gt;

&lt;h2 id=&quot;heading-2017-03-13-table-of-contents&quot;&gt;目次&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-2017-03-13-whats-annotation&quot;&gt;アノテーションとは&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-2017-03-13-whats-hypothesis&quot;&gt;アノテーションサービスのHypothes.is&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-2017-03-13-epub-ebook-format&quot;&gt;電子書籍フォーマットのEPUB&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-2017-03-13-hypothesis-partnership&quot;&gt;Hypothes.isのパートナーシップ&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;heading-2017-03-13-whats-annotation&quot;&gt;アノテーションとは&lt;/h2&gt;

&lt;p&gt;アノテーションというのは日本語だと「注釈」です。例えばウェブページで、ある文章に線を引っ張って自分のメモ書きを残すことはアノテーションです。&lt;/p&gt;

&lt;p&gt;「注釈」という言葉からは外れると感じますが、単に線を引っ張るだけでも、ここではアノテーションと呼びます。&lt;/p&gt;
&lt;figure&gt;
  &lt;a href=&quot;https://gyazo.com/1ff7a03324fdc08da7f2f86c245431db&quot;&gt;&lt;img src=&quot;https://gyazo.com/1ff7a03324fdc08da7f2f86c245431db.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
  &lt;figcaption&gt;先のニュースページでハイライトされている様子。ハイライトされた部分の背景が黄色になっている。&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;また、ページの一部でなく、ページ全体に対して何か言及することもアノテーションです。&lt;a href=&quot;http://b.hatena.ne.jp/&quot;&gt;はてなブックマーク&lt;/a&gt;なんかがいい例だと思います。&lt;/p&gt;
&lt;figure&gt;
  &lt;a href=&quot;https://gyazo.com/47eb628941ce4e66cbc7928bb254753c&quot;&gt;&lt;img src=&quot;https://gyazo.com/47eb628941ce4e66cbc7928bb254753c.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
  &lt;figcaption&gt;ページ全体に対するコメントを残すのもアノテーション。画像ははてなブックマークの例。&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;先と同じパターンで、コメントのないブックマークも、アノテーションです。&lt;/p&gt;

&lt;h2 id=&quot;heading-2017-03-13-whats-hypothesis&quot;&gt;アノテーションサービスのHypothes.is&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://hypothes.is/&quot;&gt;Hypothes.is&lt;/a&gt;は、こういうアノテーションを、ウェブページとPDFに付けられるようにするウェブアプリケーションです。ページをハイライトしたりコメントを入力したりするためのChrome拡張やJavaScriptウィジェットを作ったり、そのアノテーションを保存・参照するためのサーバー用のアプリケーションを開発しています。&lt;/p&gt;

&lt;p&gt;と同時に、そのアプリケーションを実際に運用して、無償で提供してもいます。この日記にもJavaScriptウィジェットを埋め込んでいて、記事を（一覧ページでなく）個別ページで読んでいる場合には右側にそのためのバーが見えているはずです。&lt;/p&gt;
&lt;figure&gt;
  &lt;a href=&quot;https://gyazo.com/777f1accfa73f2787a6b4c1bb0e0cd72&quot;&gt;&lt;img src=&quot;https://gyazo.com/777f1accfa73f2787a6b4c1bb0e0cd72.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
  &lt;figcaption&gt;アノテーションサービスHypothes.isのためのウィジェットを、無償で自分のウェブサイトにも埋め込める。&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;サイトの運用者はこのウィジェットを埋め込むことで、ページ全体または一部に閲覧者がハイライトやコメントを残せるようにできます。サイト側が対応していなくても、Chrome拡張を入れることで閲覧者はどのページにもアノテーションを付けられるようになります。付けられたアノテーションは（許可すれば）誰でも見ることができます。&lt;/p&gt;

&lt;p&gt;こうして付けたアノテーションはHypothes.isのサーバーに保管され、どの端末、どのブラウザーでも見られるようになります（ブラウザー拡張は今のところChromeだけですが。Firefoxのは開発中で、自分でビルドして入れることはできます）。&lt;/p&gt;

&lt;h2 id=&quot;heading-2017-03-13-epub-ebook-format&quot;&gt;電子書籍フォーマットのEPUB&lt;/h2&gt;

&lt;p&gt;電子書籍では、こうした「アノテーションを付けて、それをどの端末でも参照できる」という体験を既に経験していると思います。Kindleのことです。&lt;/p&gt;
&lt;figure&gt;
  &lt;a href=&quot;https://gyazo.com/f29495ff624f3e64f395cb21f9247848&quot;&gt;&lt;img src=&quot;https://gyazo.com/f29495ff624f3e64f395cb21f9247848.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
  &lt;figcaption&gt;Kindleでは電子書籍にハイライトやコメント、即ちアノテーションを付けることができる。&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;ところで、EPUBという電子書籍フォーマットがあります。IDPFという団体が策定した&lt;strong&gt;オープン&lt;/strong&gt;なフォーマットです（KindleのはKindle Formatとかmobiとか呼ばれて、Kindleを作っているAmazon社が仕様を決めて運用しています。つまりオープンではありません）。仕様は誰でも見ることができますし、従って誰でも閲覧や作成用のアプリケーションを作れます。iBooksなどで読むことができます。&lt;/p&gt;

&lt;p&gt;ちなみにPDFやWordファイル（*.docx）、Excelファイル（*.xlsx）、MP3なんかもオープンなファイルフォーマットです。Photoshop用ファイル（*.psd）やInDesign用ファイル（*.indd）はオープンではありません。&lt;/p&gt;

&lt;h2 id=&quot;heading-2017-03-13-hypothesis-partnership&quot;&gt;Hypothes.isのパートナーシップ&lt;/h2&gt;

&lt;p&gt;今回のニュースは、Hypothes.isがこのEPUBにも対応するべく、幾つかの組織とパートナーシップを結ぶ、という物です。Hypothes.isとのパートナーシップが発表された組織は以下の五つ。&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;&lt;a href=&quot;http://dlib.nyu.edu/dlts/&quot;&gt;NYU Libraries&lt;/a&gt;&lt;/dt&gt;
  &lt;dd&gt;ニューヨーク大学の、デジタルな物を処理し、アクセスを可能にし、また保管する所。&lt;/dd&gt;
  &lt;dt&gt;&lt;a href=&quot;https://nyupress.org/&quot;&gt;NYU Press&lt;/a&gt;&lt;/dt&gt;
  &lt;dd&gt;ニューヨーク大学の出版社？&lt;/dd&gt;
  &lt;dt&gt;&lt;a href=&quot;http://www.evidentpoint.com/&quot;&gt;Evident Point&lt;/a&gt;&lt;/dt&gt;
  &lt;dd&gt;電子出版ソリューションを提供する提供する会社。Readium（下記参照）のコアコントリビューターを数人抱えているらしい。&lt;/dd&gt;
  &lt;dt&gt;&lt;a href=&quot;http://readium.org/&quot;&gt;Readium Foundation&lt;/a&gt;&lt;/dt&gt;
  &lt;dd&gt;ReadiumJSという、EPUBを扱うJavaScriptのリファレンス実装を作っている所。ReadiumJSはDRMも扱えるとのこと。&lt;/dd&gt;
  &lt;dt&gt;&lt;a href=&quot;http://futurepress.org/&quot;&gt;EPUBjs project&lt;/a&gt;&lt;/dt&gt;
  &lt;dd&gt;epub.jsという、Readiumとはまた別のJavaScript実装を作っているプロジェクト。既にHypothes.isと連携したプルーフオブコンセプトを作った実績がある。&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;イデオロギー的に僕はオープンな物やフリーな物を支持しているので、オープンなファイルフォーマットにオープンなアプリケーションでアノテーションが付けられるというこのニュースにはとても興奮しました。&lt;/p&gt;

&lt;p&gt;いきなりイデオロギーの話が出てきて面喰らうかも知れませんが、フリーとかオープンとかは殆どイデオロギーの話だと思っています&lt;sup id=&quot;fnref:free-open-as-ideology&quot;&gt;&lt;a href=&quot;#fn:free-open-as-ideology&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;ま、イデオロギーは置いておいても、オープンであればロックインされない（Kindleだと、Kindleがなくなると同時に自分の本のコメントが失われてしまう）、とか無料だとかメリットがあります。例えばiBooksで付けたブックマークをGoogle Play Booksで開くといったこともできるかも知れません（Appleがブックマークデータをダウンロードさせてくれれば）。&lt;/p&gt;

&lt;p&gt;というような感じでいいのか知ら？　皆さんも、&lt;a href=&quot;https://note.mu/hashtag/%E3%83%86%E3%83%83%E3%82%AF%E4%BC%9A%E8%AD%B0?f=new&amp;amp;search=on&quot;&gt;#テック会議&lt;/a&gt;ぜひ参加してみてください。&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:free-open-as-ideology&quot;&gt;
      &lt;p&gt;川上量生『&lt;a href=&quot;https://www.iwanami.co.jp/book/b226338.html&quot;&gt;鈴木さんにも分かるネットの未来&lt;/a&gt;』でそんな感じのことが書かれていてはっとしました。&amp;nbsp;&lt;a href=&quot;#fnref:free-open-as-ideology&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
    <id>https://kitaitimakoto.github.io/apehuci/2017/03/13.html</id>
    <link href="https://kitaitimakoto.github.io/apehuci/2017/03/13.html"
      type="text/html"/>
    <title>Hypothes.isがEPUBへのアノテーションのためのパートナーシップを結ぶ</title>
    <updated>2017-03-13T00:00:00Z</updated>
    <dc:date>2017-03-13T00:00:00Z</dc:date>
  </entry>
  <entry>
    <content type="html">&lt;p&gt;この日記は&lt;a href=&quot;https://www.polymer-project.org/1.0/&quot;&gt;Polymer&lt;/a&gt;で作っている、つまり&lt;a href=&quot;http://webcomponents.org/&quot;&gt;Webコンポーネント&lt;/a&gt;を使っている。そのために表示が遅い。表示するまでに&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Webコンポーネントに必要なpolyfillを読み込む&lt;/li&gt;
  &lt;li&gt;Polymerライブラリーを読み込む&lt;/li&gt;
  &lt;li&gt;各種カスタムエレメント定義をロードする&lt;/li&gt;
  &lt;li&gt;JavaScriptで各種カスタムエレメント定義を実行する&lt;/li&gt;
  &lt;li&gt;HTML中の各種カスタムエレメントを有効化する&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;というステップがあって、これを毎ページ繰り返すからだ。前々から何とかしたいなあとは思っていて、この連休で、サイト内リンクをpjaxにすることで少し改善させた。&lt;/p&gt;

&lt;p&gt;各ステップはpjaxによって以下のように改善される。&lt;/p&gt;

&lt;h2 id=&quot;heading-2017-01-10-table-of-contents&quot;&gt;目次&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-2017-01-10-whats-pjax&quot;&gt;pjaxとは&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-2017-01-10-loading-polyfill&quot;&gt;polyfill読み込み&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-2017-01-10-loading-polymer&quot;&gt;Polymerライブラリーの読み込み&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-2017-01-10-loading-custom-elements&quot;&gt;カスタムエレメント読み込み&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-2017-01-10-defining-custom-elements&quot;&gt;カスタムエレメント定義の実行&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-2017-01-10-pjax-using-polymer&quot;&gt;Polymerでpjax&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-2017-01-10-app-location&quot;&gt;app-location&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-2017-01-10-iron-ajax&quot;&gt;iron-ajax&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-2017-01-10-afterwords&quot;&gt;終わりに&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;heading-2017-01-10-whats-pjax&quot;&gt;pjaxとは&lt;/h2&gt;

&lt;p&gt;有名なので不要だとは思うけど、一応pjaxを説明しておく。&lt;/p&gt;

&lt;p&gt;pjaxは、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ajaxによる画面遷移&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;location&lt;/code&gt;オブジェクト（アドレスバーのURL）の書き換え&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の組み合わせだ。サイト内の別ページへのリンクをタップした際に、通常のブラウザーの画面遷移をする代わりに、JavaScriptでリンク先のHTMLを取得して、現在のページと置き換える。今回は、&lt;code class=&quot;highlighter-rouge&quot;&gt;title&lt;/code&gt;要素と&lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt;要素を置き換えることで、画面遷移としている。ページ全体でなく、一部の書き換え・更新にもよく使われる。&lt;/p&gt;

&lt;p&gt;同時に&lt;code class=&quot;highlighter-rouge&quot;&gt;location&lt;/code&gt;を書き換えることで、ブラウザーの進む/戻る・リロード、アドレスバーからURLをコピーしての共有など、通常の画面遷移であればできていることを可能にしている。&lt;/p&gt;

&lt;p&gt;後者のためにJavaScriptの&lt;code class=&quot;highlighter-rouge&quot;&gt;pushState&lt;/code&gt;機能を使っていることからpjaxと名付けられている：&lt;br /&gt;
&lt;a href=&quot;https://github.com/defunkt/jquery-pjax&quot;&gt;defunkt/jquery-pjax: pushState + ajax = pjax&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;pjaxは「現在のDOMツリー内での置き換え」が機能なので、外から飛んできて最初に表示するページでは役に立たない。&lt;/p&gt;

&lt;h2 id=&quot;heading-2017-01-10-loading-polyfill&quot;&gt;polyfill読み込み&lt;/h2&gt;

&lt;p&gt;Webコンポーネントはまだ策定中・ブラウザー実装途中の仕様なので、クロスブラウザーでは動かない。具体的には、Chromeでしか全部は動かない。そこで、他のブラウザーでも動くよう、polyfillやshimを読み込む必要がある。&lt;/p&gt;

&lt;p&gt;これにはWebコンポーネント仕様の一部であるカスタムエレメントなど以外にも、URLコンストラクターやPromiseなどのpolyfillも含まれる。サーバー側でブラウザーの判定などはしていないので（GitHub Pagesなのでそもそもできない）、Chromeのように不要であっても読み込んでいる。&lt;/p&gt;

&lt;p&gt;こういうのは普通、&lt;code class=&quot;highlighter-rouge&quot;&gt;libs.js&lt;/code&gt;のような一つのファイルにまとめることでリクエスト回数を減らすものだけど、面倒くさくて後回しにしている（後回しにするうちにGitHub PagesでHTTP/2が使えるようになるといいなあ、という期待もちょっとある）。&lt;/p&gt;

&lt;p&gt;pjaxによって、&lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt;の外にある&lt;code class=&quot;highlighter-rouge&quot;&gt;script&lt;/code&gt;の読み込みと実行がスキップされるので、パフォーマンスがよくなっている。あと、そもそも同じ&lt;code class=&quot;highlighter-rouge&quot;&gt;script&lt;/code&gt;を二回読み込んだりすると、イベントリスナーの登録が複数回行われたりして意図しない動作になりがちなので、基本的に&lt;code class=&quot;highlighter-rouge&quot;&gt;script&lt;/code&gt;はpjaxでの置き換え対象に入れたくない。&lt;/p&gt;

&lt;h2 id=&quot;heading-2017-01-10-loading-polymer&quot;&gt;Polymerライブラリーの読み込み&lt;/h2&gt;

&lt;p&gt;ページをPolymerで作っている以上、当然Polymerを読み込む必要がある。&lt;/p&gt;

&lt;p&gt;これもJavaScriptの読み込みなので、上と同じくpjaxによってスキップし、パフォーマンスを向上させている。&lt;/p&gt;

&lt;h2 id=&quot;heading-2017-01-10-loading-custom-elements&quot;&gt;カスタムエレメント読み込み&lt;/h2&gt;

&lt;p&gt;Polymerが提供していてマテリアルデザインを実現するのに便利な&lt;a href=&quot;https://elements.polymer-project.org/browse?package=paper-elements&quot;&gt;Paper Elements&lt;/a&gt;や自作の物など、各種カスタムエレメントは通常一つのHTMLファイルになっている。その中に、HTMLタグの他CSS宣言や要素定義のJavaScriptを書くようになっているし、僕もそうしている。一つのカスタムエレメントが複数のカスタムエレメントの組み合わせであることもよくあって、依存エレメントの分HTMLを読み込む必要があるのが普通だ。&lt;/p&gt;

&lt;p&gt;先のJavaScriptライブラリーとは違って、これはさすがにリクエストが多くなり過ぎるので&lt;a href=&quot;https://github.com/Polymer/vulcanize&quot;&gt;vulcanize&lt;/a&gt;によって一つのファイルにまとめている。その一つにまとめたHTMLファイルは&lt;code class=&quot;highlighter-rouge&quot;&gt;head&lt;/code&gt;要素中の&lt;code class=&quot;highlighter-rouge&quot;&gt;link&lt;/code&gt;要素&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;components/elements.vulcanized.html&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;import&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;によって読み込んでいる（実際にはこのタグを書き出すヘルパーが&lt;a href=&quot;https://github.com/KitaitiMakoto/middleman-web_components&quot;&gt;Middleman Web Components&lt;/a&gt;にあるので、それを使っている）。&lt;/p&gt;

&lt;p&gt;これも&lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt;要素の外にあるので、pjaxによってスキップしている。&lt;/p&gt;

&lt;h2 id=&quot;heading-2017-01-10-defining-custom-elements&quot;&gt;カスタムエレメント定義の実行&lt;/h2&gt;

&lt;p&gt;カスタムエレメントは、単にHTML中に&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;paper-card&amp;gt;&lt;/code&gt;などタグを書くだけでは有効にならない（知らないタグとして扱われる）。このタグがカスタムエレメントの物であることをブラウザーに知らせ、各種機能を定義するにはJavaScriptを使う必要がある（参考：&lt;a href=&quot;https://developers.google.com/web/fundamentals/getting-started/primers/customelements&quot;&gt;Custom Elements v1: Reusable Web Components&lt;/a&gt;）。&lt;/p&gt;

&lt;p&gt;この定義は、上の&lt;code class=&quot;highlighter-rouge&quot;&gt;elements.vulcanized.html&lt;/code&gt;に書かれているので、pjaxによってやはりこのステップもスキップできる。&lt;/p&gt;

&lt;p&gt;これまでのステップは、（HTTPヘッダーやService Workerなどで）キャッシュを上手に使うことでも飛ばせるのだけど、カスタムエレメント定義は、ファイルを読み込んだ&lt;strong&gt;後&lt;/strong&gt;の処理なので、ページ遷移ごとに毎回実行する必要があり、キャッシュできない。なのでここが、キャッシュ機構を入れてもなおpjaxが活きるところだと思う。&lt;/p&gt;

&lt;p&gt;本当はpolyfillやPolymer読み込みをキャッシュしても、同様にJavaScript実行はページ表示毎に発生するのだけど、カスタムエレメント定義は特に多くなりがちなので特別に節を設けた。&lt;/p&gt;

&lt;h2 id=&quot;heading-2017-01-10-activating-custom-elements&quot;&gt;カスタムエレメントの有効化&lt;/h2&gt;

&lt;p&gt;カスタムエレメント定義が終わったらブラウザーは、HTML中のカスタムエレメントタグ（に相当するDOMノード）を、そのカスタムエレメントとして扱い始める。このステップはpjaxではスキップできない。&lt;/p&gt;

&lt;h2 id=&quot;heading-2017-01-10-pjax-using-polymer&quot;&gt;Polymerでpjax&lt;/h2&gt;

&lt;p&gt;ようやく本題だけど、今回のpjax実装では、Polymerが提供している&lt;a href=&quot;https://elements.polymer-project.org/elements/app-route?active=app-location&quot;&gt;app-location&lt;/a&gt;と&lt;a href=&quot;https://elements.polymer-project.org/elements/iron-ajax&quot;&gt;iron-ajax&lt;/a&gt;というカスタムエレメントを使って実現してみた（&lt;a href=&quot;https://github.com/KitaitiMakoto/apehuci/blob/26e1f03ac1a28983faa094b32b98ed1ad4822c26/source/components/blog-router.html&quot;&gt;blog-router.html&lt;/a&gt;）。pjaxは普通、全部JavaScriptでやるものだと思うけど、半分くらいの処理はHTMLタグを書くことで実現できてしまっていて、不思議な感じがした。&lt;/p&gt;

&lt;h3 id=&quot;heading-2017-01-10-app-location&quot;&gt;app-location&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;app-location&lt;/code&gt;を使うと、サイト内リンクが全部無効化される。その代わり、イベントリスナーでクリックイベントをハンドリングしたり、リンクに関する情報をデータバインディングを使って別の要素に渡したりできる。&lt;/p&gt;

&lt;p&gt;今回は&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;app-location&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;url-space-regex&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$=&quot;[[&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;baseRegex&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]]&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;route=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{route}}&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/app-location&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;route&lt;/code&gt;というオブジェクトに、画面遷移に関する情報を入れることにした。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt;はPolymerの提供するデータバインディング用の記法で、他に&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt;と書かれた場所と連動する（&lt;a href=&quot;https://www.polymer-project.org/1.0/docs/devguide/data-binding&quot;&gt;Data binding - Polymer Project&lt;/a&gt;）。&lt;/p&gt;

&lt;h3 id=&quot;heading-2017-01-10-iron-ajax&quot;&gt;iron-ajax&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;app-location&lt;/code&gt;は、アドレスバーのURLの書き換えはしてくれるけど、実際のリクエストは投げてくれない。ので、それをJavaScriptでイベントハンドラーとして書くか、今回のように別の要素と連携させないと意味がない。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;iron-ajax&lt;/code&gt;はその名の通りAjaxしてくれるカスタムエレメントで、画面上にレンダリングはされない。純粋にJavaScript的な実行のためにある。これが要素になっているが不思議な感じがする。&lt;/p&gt;

&lt;p&gt;これもデータバインディングの記法を使いつつ&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;iron-ajax&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;url=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{route.path}}&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;handle-as=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;document&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on-response=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;transit&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on-error=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;fallback&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ajax&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/iron-ajax&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;と書くことで、&lt;code class=&quot;highlighter-rouge&quot;&gt;app-location&lt;/code&gt;の&lt;code class=&quot;highlighter-rouge&quot;&gt;route&lt;/code&gt;オブジェクトから&lt;code class=&quot;highlighter-rouge&quot;&gt;path&lt;/code&gt;プロパティを取り出してセットしている（&lt;code class=&quot;highlighter-rouge&quot;&gt;path&lt;/code&gt;の他に&lt;code class=&quot;highlighter-rouge&quot;&gt;hash&lt;/code&gt;プロパティもあって、本当はこれもちゃんとハンドリングしないといけない）。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;auto&lt;/code&gt;属性をつけていると&lt;code class=&quot;highlighter-rouge&quot;&gt;url&lt;/code&gt;属性が変わった際に自動でAjaxが行われるので、&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;リンクをタップ -&amp;gt; app-locationのroute属性変更 -&amp;gt; iron-ajaxのurl変更 -&amp;gt; Ajaxリクエスト
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;という流れをJavaScriptを書かずに実現してくれる（リクエストを間引くのも、使ってないけど、HTML属性によって定義できる）。&lt;/p&gt;

&lt;p&gt;あとはレスポンス時やエラー時の処理をそれぞれ&lt;code class=&quot;highlighter-rouge&quot;&gt;transit&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;fallback&lt;/code&gt;という関数としてJavaScriptで書いてやって出来上がりだ。&lt;code class=&quot;highlighter-rouge&quot;&gt;transit&lt;/code&gt;としてJavaScriptで書いた処理は、殆ど&lt;code class=&quot;highlighter-rouge&quot;&gt;title&lt;/code&gt;要素と&lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt;要素の書き換えのみ。&lt;/p&gt;

&lt;h2 id=&quot;heading-2017-01-10-afterwords&quot;&gt;終わりに&lt;/h2&gt;

&lt;p&gt;Polymerによるpjaxはこのようにして実現できる。これには、公式サイトの以下のページがとても参考になった。&lt;/p&gt;

&lt;p&gt;» &lt;a href=&quot;https://www.polymer-project.org/1.0/toolbox/routing&quot;&gt;Routing with &amp;lt;app-route&amp;gt; - Polymer Project&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;余談だけど、&lt;a href=&quot;https://github.com/turbolinks/turbolinks&quot;&gt;Turbolinks&lt;/a&gt;を使うと自分で実装しなくてよかったのかも知れないなと思っている。&lt;/p&gt;

&lt;p&gt;あと、今回、ページ内に一つ&lt;code class=&quot;highlighter-rouge&quot;&gt;blog-router&lt;/code&gt;を置くことによって、つまり一元的なルーターを使ってpjaxを実現している。ReactやAngularでもルーターライブラリーがあるように、この手の処理は一元的なルーターでやるのが普通なのかも知れない。でも、次へリンクなどのHTML要素に結び付く形で、それがpjaxによる遷移かどうかを管理できるようにする、引いては、そのリンクのカスタムエレメントの機能としてpjax処理を実装できた方が、コンポーネント志向としてはいいのかも知れないなあと、やった後で思った。気が向いたらやってみるかも（そして、世界中のみんながルーターを一元的に作っている理由を知るのだ、きっと）。&lt;/p&gt;

&lt;p&gt;今この記事書いてて気付いたけど、ページ内リンクが機能しなくなってしまった……。もう遅いので、後日の対応とします。（追記。直しました。）&lt;/p&gt;

</content>
    <id>https://kitaitimakoto.github.io/apehuci/2017/01/10.html</id>
    <link href="https://kitaitimakoto.github.io/apehuci/2017/01/10.html"
      type="text/html"/>
    <title>Polymerでpjaxする、またはapp-locationの使い方</title>
    <updated>2017-01-10T00:00:00Z</updated>
    <dc:date>2017-01-10T00:00:00Z</dc:date>
  </entry>
  <entry>
    <content type="html">&lt;p&gt;&lt;a href=&quot;http://www.rubydoc.info/gems/epub-parser/file/docs/Home.markdown&quot;&gt;EPUB Parser&lt;/a&gt; gemのリポジトリーを、&lt;a href=&quot;https://github.com/&quot;&gt;GitHub&lt;/a&gt;から&lt;a href=&quot;https://gitlab.com/&quot;&gt;GitLab&lt;/a&gt;に移してみた：&lt;br /&gt;
&lt;a href=&quot;https://gitlab.com/KitaitiMakoto/epub-parser&quot;&gt;https://gitlab.com/KitaitiMakoto/epub-parser&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ここのところフリーとかオープンソースソフトウェアとサービスとかについて感じるところの記事を書いていて（未公開）、その過程でGitLabのことを思い出したので、やってみたのだった。&lt;/p&gt;

&lt;p&gt;前にクローンはしていたのだけど、&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;ブランチへのフォースプッシュが禁止されていたので、使わなくなっていた。でも今見てみたら、設定によりそれが可能になっていたので、改めて移行した。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;GitLabがmasterブランチにもフォースプッシュ可能になってた。&lt;br /&gt;右上歯車→Protected Branches→画面下ブランチの「Unprotect」&lt;/p&gt;&amp;mdash; 北市真 (@KitaitiMakoto) &lt;a href=&quot;https://twitter.com/KitaitiMakoto/status/816234964412809216&quot;&gt;2017年1月3日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;GitHubは&lt;a href=&quot;https://travis-ci.org/&quot;&gt;Travis CI&lt;/a&gt;や&lt;a href=&quot;https://circleci.com/&quot;&gt;CircleCI&lt;/a&gt;なんかとのインテグレーションが便利だけど、GitLab.comは自前でCI機能を備えていて、YAMLファイル（&lt;code class=&quot;highlighter-rouge&quot;&gt;.gitlab-ci.yml&lt;/code&gt;）をリポジトリーに入れておくと、その他の設定なしで自動でテストを走らせてくれる。べんり。&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;before_script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;apt-get update -qq &amp;amp;&amp;amp; apt-get install -y zip&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ruby -v&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;which ruby&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;gem install bundler --no-document&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bundle install --jobs=$(nproc) &quot;${FLAGS[@]}&quot;&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;test:2.2&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ruby:2.2&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bundle exec rake test&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;test:2.3&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ruby:2.3&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bundle exec rake test&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;test:2.4&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ruby:2.4&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bundle exec rake test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;heading-2017-01-08-whats-gitlab&quot;&gt;GitLabとは&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://gitlab.com/&quot;&gt;GitLab&lt;/a&gt;は、Gitを使ったプロジェクトのホスティングウェブアプリケーションで、ざっくり言ってGitHubクローンだ。基本的な部分（&lt;a href=&quot;https://gitlab.com/gitlab-org/gitlab-ce&quot;&gt;Community Edition&lt;/a&gt;）のソースコードは公開されていて、自前のサーバーにインストールして使うことができる。Enterprise Editionが有償になっている。その他にホスティングサービス（GitLab.com）もやっていて、これを今回は使った。&lt;/p&gt;

&lt;p&gt;Gitリポジトリーのホスティングの他、READMEの表示、スター、フォーク、マージリクエスト（プルリクエスト）、イシュー登録、コミット履歴表示、コミット毎の差分表示、ウィキ、グループによるメンバー管理、（GitHub Pagesのような）静的ウェブサイトのホスティング、（Gistのような）スニペットなどなど、GitHubの基本的な機能は備えている（使い勝手や速度で及ばないところはある）。&lt;/p&gt;

&lt;p&gt;ちょっとググった感じだと自前サーバーでGitのプロジェクトをホストするために使われる例が多いようだけど、GitHub.comの代替として使ってもいいと思う。僕は、アプリケーションのソースコードが公開されているということで、使い始めてみた。前はGitoriousが担っていた立ち位置だと思う（事実、Gitoriousがシャットダウンする時に、GitLabを案内していた）。&lt;/p&gt;

&lt;p&gt;この日記はGitHub Pagesのドメインで公開しているので、移行できない。&lt;/p&gt;

&lt;h2 id=&quot;heading-2017-01-08-reference&quot;&gt;追記：GitLab参考記事&lt;/h2&gt;

&lt;p&gt;奇しくも最近、1/5に、Gihyo.jpでGitLabの記事が上がっていた：&lt;br /&gt;
&lt;a href=&quot;http://gihyo.jp/dev/column/newyear/2017/gitlab&quot;&gt;GitLabのこれまでとこれから：新春特別企画｜gihyo.jp … 技術評論社&lt;/a&gt;&lt;/p&gt;

</content>
    <id>https://kitaitimakoto.github.io/apehuci/2017/01/08.html</id>
    <link href="https://kitaitimakoto.github.io/apehuci/2017/01/08.html"
      type="text/html"/>
    <title>リポジトリーをGitHubからGitLabに移してみた</title>
    <updated>2017-01-08T00:00:00Z</updated>
    <dc:date>2017-01-08T00:00:00Z</dc:date>
  </entry>
  <entry>
    <content type="html">&lt;p&gt;アドベントカレンダー「&lt;a href=&quot;http://www.adventar.org/calendars/1885&quot;&gt;年末年始おすすめ作品　BY.CORK Advent Calendar 2016&lt;/a&gt;」の24日目です。&lt;/p&gt;

&lt;p&gt;さて、アドベントカレンダー、クリスマスイブ担当という大役を仰せつかってしまったが（単に人がいなかっただけだが……くそっ、リア充どもめ）、実のところ、この日に相応しい作品が思い付かない。ほぼ唯一の持ちネタである今敏の『東京ゴッドファーザーズ』は、21日担当のまつおかさんに取られてしまった。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;冬休みにみたい作品①東京ゴッドファーザーズ&lt;br /&gt;3人のホームレスの主人公たちに訪れる、クリスマスの日の奇跡。いくつもの奇跡が重なって展開されるストーリーの運びと様々なドラマがみどころ！人間くさい描写や数々な愛のかたちに、あたたかい気持ちになれます。&lt;a href=&quot;https://twitter.com/hashtag/%E3%82%B3%E3%83%AB%E3%82%AF%E3%81%8A%E3%81%99%E3%81%99%E3%82%812016?src=hash&quot;&gt;#コルクおすすめ2016&lt;/a&gt; &lt;a href=&quot;https://t.co/jR5FmtH78Y&quot;&gt;pic.twitter.com/jR5FmtH78Y&lt;/a&gt;&lt;/p&gt;&amp;mdash; まつおか ゆう (@108mlps) &lt;a href=&quot;https://twitter.com/108mlps/status/811511915780288512&quot;&gt;2016年12月21日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;ディケンズの『&lt;a href=&quot;http://www1.bbiq.jp/kareha/trans/html/christmas_carol,_a_(katokt).html&quot;&gt;クリスマスキャロル&lt;/a&gt;』も定番で外れが無いと思うのだが、そう言えば、半分くらいまで読んで止まっているのだった。日本に寄せて恋愛ものを選ぶとしても、僕が好きな恋愛ものジャンルは浮気・不倫なので、こんな日に相応しくない（いや、ある意味、リアルで、相応しいかも知れんが……）。&lt;/p&gt;

&lt;p&gt;ということでクリスマスイブっぽいのは諦めました。アドベントカレンダーの趣旨に戻って、年末年始におすすめする物を選びます。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;三田紀房『ドラゴン桜』&lt;/h2&gt;

&lt;p&gt;&lt;a class=&quot;magnet-viewer-embed&quot; data-orientation=&quot;landscape&quot; data-spread=&quot;auto&quot; href=&quot;https://magnet.vc/v/a8zvd3s&quot;&gt;ドラゴン桜 (1)&lt;/a&gt;
&lt;script src=&quot;https://magnet.vc/embed_js&quot; defer=&quot;defer&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;年末年始特に意識すると言えば、センター試験だ。僕は塾の先生から、休憩を取ることの大切さ、取るタイミングについて教えてもらって、守っていた。年末年始はきちんと休んだし、試験の前日も勉強は一切せず、のんびり、気になっていた本を読んでいた（その代わり他の日は頑張って勉強していて、特に嫌いな英語は、このままやってたら気が狂いそうだと自分で感じていた……）。大工の祖父が家の車庫にバスケットゴールを取り付けてくれたので、毎日、休憩がてら、ひたすらシュートしていた（そのお陰で、文科系部活のくせに、体育のバスケットボールでめっちゃ得点してた）。&lt;/p&gt;

&lt;p&gt;このやり方が他の人にも合うかはもちろん分からないが、「この時期にはもうメンタル面が非常に大きなウェイトを占める」「メンタルは身体の影響を強く受ける」「なので休憩などを上手に（好きなだけ、ではない）取ることがとても大事」という点については衆目の一致が見られるんではないかと思う（未確認）。&lt;/p&gt;

&lt;p&gt;その時期のドラマが、三田紀房の『ドラゴン桜』で描かれている。テレビ版は観ていないのと、この作品について誰かと話したこともないので、世間一般のイメージは分からないけれど、僕は「一見破天荒な受験テクニックを色々紹介しているまんが」という印象で記憶していた。ところが、コルクに入社するにあたって読み直してみたら（作者の三田紀房さんのエージェントをしています）、後半に入ると、精神面をどう受験に向けていいコンディションに持っていくかという話がメインだった。心や気持ちの問題だし、自分が通過してきたことで感情移入もしやすく、共感さるシーンが多い。&lt;/p&gt;

&lt;p&gt;特に好きなのが、二人いる主人公の一人、矢島が、父親の車に乗るところ。父親のことを嫌っておりほとんど話さない矢島だけど、先生のアドバイスもあって、少し心を開きかけ、でもまた悶着あって忌避感を覚えていた頃、たまたま、家を出るタイミングが父親とかぶる。車に乗れ、送って行くと言う父親。黙って乗る矢島。そして、降りるまで、一言も話さない。「降り際に何か一言くらい言うのかな」と思って読んでいたけれど、どちらも何も発さない。コミュニケーションのないまま、車のシーンは終わる。ここでものすごく「そうだよね！」という気持ちになり、その気持ちが何なのか分からないせいで、今に至るまで記憶に残っているのだ。&lt;/p&gt;

&lt;p&gt;こういう、言葉にならない気持ちを抱かせるシーンが後半には色々と出てくるのでぜひ、これから受験する人、受験したことある人に読んでほしい。ただ、そこに至るまで10巻くらいを費やしていて、上に三巻までの試し読みを貼りはしたけど、正直、前半は飛ばして10巻、11巻くらいから読むのが、（年末年始のタイミングでは）いいのではないかと思ってる。&lt;/p&gt;

&lt;p&gt;最後に、自社のことなので宣伝。三田紀房さんの公式サイトはこちら。『ドラゴン桜』にちなんで受験に関する記事なんかも載っています。&lt;/p&gt;

&lt;p&gt;三田紀房公式サイト - &lt;a href=&quot;http://mitanorifusa.com/&quot;&gt;http://mitanorifusa.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;明日の担当は&lt;a href=&quot;https://twitter.com/marimo_cork&quot;&gt;中山マリモ&lt;/a&gt;さん、アドカレの予告には「ラブ・マスターX／安野モヨコ」と書いてあって、ほう……。&lt;/p&gt;

</content>
    <id>https://kitaitimakoto.github.io/apehuci/2016/12/24.html</id>
    <link href="https://kitaitimakoto.github.io/apehuci/2016/12/24.html"
      type="text/html"/>
    <title>アドカレ #コルクおすすめ2016 24日目 センター試験直前に、三田紀房『ドラゴン桜』後半</title>
    <updated>2016-12-24T00:00:00Z</updated>
    <dc:date>2016-12-24T00:00:00Z</dc:date>
  </entry>
  <entry>
    <content type="html">&lt;p&gt;アドベントカレンダー「&lt;a href=&quot;http://qiita.com/advent-calendar/2016/groonga&quot;&gt;Groonga Advent Calendar 2016&lt;/a&gt;」の21日目です、書いているのは25日ですが……済みません&lt;/p&gt;

&lt;p&gt;前回の&lt;a href=&quot;18.html&quot;&gt;Railsでの検索機能にgroonga-client-railsを使う（前編）&lt;/a&gt;では、&lt;a href=&quot;https://github.com/ranguba/groonga-client-rails&quot;&gt;groonga-client-rails&lt;/a&gt; gemを使って&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Groongaのデータベースを作ること&lt;/li&gt;
  &lt;li&gt;Railsのモデル操作とGroongaデータベースの同期を取ること&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;をやりました。&lt;/p&gt;

&lt;p&gt;後編の今日は、Groongaデータベースを使って、Railsアプリに検索機能を付けてみようと思います。&lt;/p&gt;

&lt;p&gt;引き続きアプリケーションのリポジトリーをGitHubに置いています：&lt;a href=&quot;https://github.com/KitaitiMakoto/groonga-client-rails-sample&quot;&gt;KitaitiMakoto/groonga-client-rails-sample&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;heading-2016-12-21-table-of-contents&quot;&gt;目次&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-2016-12-21-adding-route&quot;&gt;ルーティングの追加&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-2016-12-21-adding-search-action&quot;&gt;検索アクションの追加&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-2016-12-21-showing-search-result&quot;&gt;検索結果の表示&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-2016-12-21-adding-search-form&quot;&gt;検索フォームの作成&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-2016-12-21-highlighting-query&quot;&gt;検索語のハイライト&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-2016-12-21-advanced-search&quot;&gt;高度な検索（カラムの指定、並び替え、ページネーション）&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;heading-2016-12-21-adding-route&quot;&gt;ルーティングの追加&lt;/h2&gt;

&lt;p&gt;検索用のルーティングを追加します。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;posts?q=xxx&lt;/code&gt;と既存のコレクションリソースを使ってクエリーで検索機能を呼び出す&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;posts/search&lt;/code&gt;と検索専用のリソースを追加する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の二通りあり、アプリケーション全体のデザインで選ぶべき物だと思いますが、ここでは後者にします。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# config/routes.rb&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;resources&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:posts&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:search&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;heading-2016-12-21-adding-search-action&quot;&gt;検索アクションの追加&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PostsController&lt;/code&gt;に検索アクションを追加します。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# app/controllers/posts_controller.rb&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;search&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;searcher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PostsSearcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;blank?&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;redirect_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;action: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;index&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@posts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;searcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
             &lt;span class=&quot;nf&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
             &lt;span class=&quot;nf&quot;&gt;result_set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;records&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;（モデルの代わりに）サーチャークラスをインスタンス化し、クエリーを組み立てていきます。&lt;/p&gt;

&lt;p&gt;検索の開始には&lt;code class=&quot;highlighter-rouge&quot;&gt;#search&lt;/code&gt;メソッドを呼び出します。これでクエリー組み立ての準備が整います（クエリーオブジェクトが返されます）。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;query&lt;/code&gt;メソッドに文字列を渡すことで、検索語を認識させます。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;result_set&lt;/code&gt;を呼ぶとリモートのGroongaサーバーにHTTPリクエストを送って検索結果を取得します。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;records&lt;/code&gt;によって、それをRubyのオブジェクトに変換して返します。&lt;/p&gt;

&lt;h2 id=&quot;heading-2016-12-21-showing-search-result&quot;&gt;検索結果の表示&lt;/h2&gt;

&lt;p&gt;検索結果を表示します。&lt;code class=&quot;highlighter-rouge&quot;&gt;app/views/posts/index.html.erb&lt;/code&gt;を&lt;code class=&quot;highlighter-rouge&quot;&gt;app/views/posts/search.html.erb&lt;/code&gt;にコピーし、ActiveModel依存の所を書き換えます。&lt;/p&gt;

&lt;div class=&quot;language-erb highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- app/views/posts/search.html.erb --&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Posts&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;table&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;thead&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;th&amp;gt;&lt;/span&gt;Title&lt;span class=&quot;nt&quot;&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;th&amp;gt;&lt;/span&gt;Body&lt;span class=&quot;nt&quot;&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;th&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;colspan=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/thead&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;tbody&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link_to&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Show'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extract_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link_to&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Edit'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edit_post_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extract_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link_to&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Destroy'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extract_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;method: :delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;data: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;confirm: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Are you sure?'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/tbody&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;br&amp;gt;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link_to&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'New Post'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_post_path&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;extract_id&lt;/code&gt;は、レコードデータからIDを取り出すヘルパーです。これも自分で定義します。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;PostsHelper&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;extract_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;_key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Groongaでは、&lt;code class=&quot;highlighter-rouge&quot;&gt;_key&lt;/code&gt;というカラムによって、レコードを一意に特定するのですが、groonga-client-rails（のデフォルト）では、「モデル名-連番」となる（&lt;code class=&quot;highlighter-rouge&quot;&gt;Post-1&lt;/code&gt;）ので、そこからAcitiveRecordのIDに変換しています。&lt;/p&gt;

&lt;p&gt;検索フォームはありませんが、これで一応機能はできました。http://localhost:3000/posts/search?q=Qiita などにアクセスすると、検索結果が見られると思います。&lt;/p&gt;

&lt;h2 id=&quot;heading-2016-12-21-adding-search-form&quot;&gt;検索フォームの作成&lt;/h2&gt;

&lt;p&gt;次にフォームです。&lt;code class=&quot;highlighter-rouge&quot;&gt;/posts/search&lt;/code&gt;に&lt;code class=&quot;highlighter-rouge&quot;&gt;q&lt;/code&gt;クエリー付きでGETアクセスを投げるだけなので簡単です。&lt;/p&gt;

&lt;div class=&quot;language-erb highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- app/views/posts/_search_form.html.erb --&amp;gt;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;form_tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;search_posts_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;method: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;get&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;search&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;submit_tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Search&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;これをそれぞれのテンプレートファイルに埋め込んでやります（省略）。&lt;/p&gt;

&lt;h2 id=&quot;heading-2016-12-21-highlighting-query&quot;&gt;検索語のハイライト&lt;/h2&gt;

&lt;p&gt;ただ、せっかくだから、検索語が分かりやすくなっていてほしいですよね。また、メモの全文をここで表示してしまうと、長過ぎるという場合もあると思います。両方をいっぺんに解決できる方法として、Groongaの&lt;code class=&quot;highlighter-rouge&quot;&gt;snippet_html&lt;/code&gt;関数があります（&lt;a href=&quot;http://groonga.org/ja/docs/reference/functions/snippet_html.html&quot;&gt;7.14.17. snippet_html&lt;/a&gt;）。&lt;/p&gt;

&lt;p&gt;これは検索語の周辺数十文字（スニペット）を返してくれる関数です。更に、検索語を&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;span class=&quot;keyword&quot;&amp;gt;...&amp;lt;/span&amp;gt;&lt;/code&gt;でマークアップしてくれます（HTML）。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;snippet_html&lt;/code&gt;を使うには、Groongaから取得するカラムにこれを指定します。groonga-client-railsはデフォルトで、モデルで設定したカラムを取得してくれます（なので&lt;code class=&quot;highlighter-rouge&quot;&gt;title&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;body&lt;/code&gt;が取れていた）。これをカスタマイズするには、クエリーに&lt;code class=&quot;highlighter-rouge&quot;&gt;output_columns&lt;/code&gt;というパラメーターを追加する必要があります（&lt;a href=&quot;http://groonga.org/ja/docs/reference/commands/select.html#output-columns&quot;&gt;7.3.54.4.4.1. output_columns&lt;/a&gt;）。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# app/controllers/posts_controller.rb&lt;/span&gt;

  &lt;span class=&quot;vi&quot;&gt;@posts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;searcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
             &lt;span class=&quot;nf&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
             &lt;span class=&quot;nf&quot;&gt;output_columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'_key,title,snippet_html(body)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
             &lt;span class=&quot;nf&quot;&gt;result_set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;records&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;これで、「&lt;code class=&quot;highlighter-rouge&quot;&gt;body&lt;/code&gt;カラムでの検索結果にはスニペットを取得する」という意味になります。&lt;/p&gt;

&lt;p&gt;これに合わせてビューも変えなくてはいけません。&lt;/p&gt;

&lt;div class=&quot;language-erb highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;snippet_html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;br&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;HTMLを埋め込むので&lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt;を&lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt;にしています。また、結果は配列になっているので（一つのメモの離れた所に検索語がある場合、それぞれの周辺を取得します）改行で接続します。&lt;/p&gt;

&lt;p&gt;先述の通り、検索語はマークアップされるので、スタイリングしましょう。&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;/* app/assets/stylesheets/posts.scss */&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.keyword&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bolder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;これで、検索語が赤い太字になりました。&lt;/p&gt;

&lt;p&gt;何とか見られる結果になったんではないでしょうか。
&lt;img src=&quot;https://gyazo.com/2cc4ffc1487555bbd51fe768f6c7fcac.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;heading-2016-12-21-advanced-search&quot;&gt;高度な検索（カラムの指定、並び替え、ページネーション）&lt;/h2&gt;

&lt;p&gt;Groongaでは、検索の際に様々な条件を付け加えたり、結果を加工したりできます。機能の詳細はドキュメント（&lt;a href=&quot;http://groonga.org/ja/docs/reference/commands/select.html&quot;&gt;7.3.54. select&lt;/a&gt;）に譲りますが、ここでは以下の三つに対応してみましょう。&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;match_columns&lt;/dt&gt;
  &lt;dd&gt;検索に使用するカラムを試定。例えば「検索語がタイトルに含まれる場合のみ表示する」など。&lt;/dd&gt;
  &lt;dt&gt;sortby&lt;/dt&gt;
  &lt;dd&gt;指定したカラムで並び替える。&lt;/dd&gt;
  &lt;dt&gt;paginate&lt;/dt&gt;
  &lt;dd&gt;検索結果が多過ぎる場合にページネーションします。&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;と言っても簡単で、クエリーオブジェクトから、それぞれのメソッドを呼び出すだけです。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# app/controllers/posts_controller.rb&lt;/span&gt;

  &lt;span class=&quot;vi&quot;&gt;@posts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;searcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
             &lt;span class=&quot;nf&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
             &lt;span class=&quot;nf&quot;&gt;output_columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'_key,title,snippet_html(body)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:match_columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:sortby&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:paginate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;present?&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@posts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@posts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;result_set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;records&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;これにフォームを対応させれば出来上がりです。&lt;/p&gt;

&lt;p&gt;例えば、タイトルで並び替えした場合はこうなります。
&lt;img src=&quot;https://gyazo.com/969feded70e51520aab4962369291908.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;並び順を逆にするには、カラム名の前にマイナス記号（&lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt;）を付けます。
&lt;img src=&quot;https://gyazo.com/b117f1fc42863df60684437bcc2298c5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;どうでしたか、groonga-client-railsは、無理にActiveModel風にしない所が気に入っていたりします……と言っている間に、開発者の&lt;a href=&quot;https://github.com/kou&quot;&gt;@kou&lt;/a&gt;さんがよりちゃんとした記事を書いていました、締め切り破って済みませんでした……。&lt;/p&gt;

&lt;p&gt;» &lt;a href=&quot;http://www.clear-code.com/blog/2016/12/22.html&quot;&gt;Ruby on RailsでMySQL・PostgreSQL・SQLite3とGroongaを使って日本語全文検索を実現する方法&lt;/a&gt;&lt;/p&gt;

</content>
    <id>https://kitaitimakoto.github.io/apehuci/2016/12/21.html</id>
    <link href="https://kitaitimakoto.github.io/apehuci/2016/12/21.html"
      type="text/html"/>
    <title>Railsでの検索機能にgroonga-client-railsを使う（後編）</title>
    <updated>2016-12-21T00:00:00Z</updated>
    <dc:date>2016-12-21T00:00:00Z</dc:date>
  </entry>
  <entry>
    <content type="html">&lt;p&gt;今日の日記は&lt;a href=&quot;http://qiita.com/advent-calendar/2016/groonga&quot;&gt;Groonga Advent Calendar 2016&lt;/a&gt;の18日目です。&lt;/p&gt;

&lt;p&gt;今日はRailsアプリケーションに検索機能を付けるのに、groonga-client-rails gemを使う方法を、サンプルアプリケーションを作りながら紹介したいと思います。長くなったので……というか、準備と書く時間の見積もりを誤ったので、前後編に分けます。前編の今日はインストールからRailsのモデルと検索機能を結び付ける（言い回しが分かりにくいと思いますがあとで分かります）まで紹介し、後編では検索用のUIを作ろうと思います。&lt;/p&gt;

&lt;p&gt;以下の環境で動作確認をしています。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;OS … OS X El Capitan 10.11.6&lt;/li&gt;
  &lt;li&gt;Ruby … 2.3.3&lt;/li&gt;
  &lt;li&gt;Groonga … 6.1.1&lt;/li&gt;
  &lt;li&gt;Ruby on Rails … 5.0.0.1&lt;/li&gt;
  &lt;li&gt;groonga-client-rails … 0.9.4&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;heading-2016-12-18-table-of-contents&quot;&gt;目次&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-2016-12-18-groonga-client-rails&quot;&gt;groonga-client-railsとは&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-2016-12-18-about-sample-app&quot;&gt;サンプルアプリケーションについて&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-2016-12-18-installing-active-groonga-rails&quot;&gt;インストール&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-2016-12-18-scaffolding&quot;&gt;基本機能の作成&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-2016-12-18-tie-app-and-search-feature&quot;&gt;検索機能との結び付け&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-2016-12-18-booing-groonga&quot;&gt;Groongaの起動&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-2016-12-18-creating-searcher&quot;&gt;サーチャークラスの作成&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-2016-12-18-tie-model-and-searcher&quot;&gt;モデルクラスとサーチャークラスとの結び付け&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-2016-12-18-synchronizing-data&quot;&gt;データの同期&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-2016-12-18-appendix-searching&quot;&gt;おまけ - 検索して遊ぶ&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;heading-2016-12-18-groonga-client-rails&quot;&gt;groonga-client-railsとは&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ranguba/groonga-client-rails&quot;&gt;groonga-client-rails&lt;/a&gt;は、&lt;a href=&quot;http://rubyonrails.org/&quot;&gt;Ruby on Rails&lt;/a&gt;に検索用の機能を提供するgemです。バックエンドの検索エンジンに&lt;a href=&quot;http://groonga.org/ja/&quot;&gt;Groonga&lt;/a&gt;を使っています。以前、RailsにGroongaの検索機能を提供するgemとして&lt;a href=&quot;https://github.com/ranguba/activegroonga&quot;&gt;ActiveGroonga&lt;/a&gt;を紹介しましたが（&lt;a href=&quot;http://qiita.com/KitaitiMakoto/items/e518a51a804896f9f062&quot;&gt;RailsでActiveGroongaを使う&lt;/a&gt;）、groonga-client-railsはこれとは別アプローチのgemです。&lt;/p&gt;

&lt;p&gt;ActiveGroonga（が内部で使っている&lt;a href=&quot;http://ranguba.org/rroonga/ja/&quot;&gt;Rroonga&lt;/a&gt;）はローカルのファイルシステムにGroongaのデータベースを作成し、そこにC API経由でアクセスします。このため、インストール時にCのコンパイルが走り、RailsサーバーとGroongaデータベースは同じマシン上に存在する必要がありました。スケールアウトさせる際にはGroongaデータベースの同期が課題にもなります。&lt;/p&gt;

&lt;p&gt;groonga-client-railsが使うGroongaはリモートサーバーです。GroongaはC API経由でアクセスするほかに、HTTPサーバーとして動作し、HTTPクライアントでアクセスしてデータの投入と検索を行うこともできます（GQTPというGroonga独自のプロトコルも使えます）。この用途に向けた&lt;a href=&quot;https://github.com/ranguba/groonga-client&quot;&gt;groonga-client&lt;/a&gt;というgemがあり、それをRailsで使いやすくしたのがgroonga-client-railsです。&lt;/p&gt;

&lt;p&gt;groonga-client-railsでは、&lt;a href=&quot;http://guides.rubyonrails.org/active_job_basics.html&quot;&gt;ActiveJob&lt;/a&gt;の&lt;code class=&quot;highlighter-rouge&quot;&gt;XxxJob&lt;/code&gt;、&lt;a href=&quot;https://github.com/carrierwaveuploader/carrierwave&quot;&gt;CarrierWave&lt;/a&gt;の&lt;code class=&quot;highlighter-rouge&quot;&gt;XxxUploader&lt;/code&gt;のような&lt;code class=&quot;highlighter-rouge&quot;&gt;XxxSearcher&lt;/code&gt;というサーチャークラスを作って検索エンジンへのアクセスを抽象化します。サーチャーの作り方は後述しますが、モデルクラス一つと対応付けられ、モデルの（RDBMSやMongoDBなどへの）保存・更新・削除とGroongaの対応テーブルとの同期を取ったり、対応テーブルからの検索用APIを提供したりします。うまくインターフェイスを揃えればElsticsearchとかも同じクラスで扱えるかも？&lt;/p&gt;

&lt;h2 id=&quot;heading-2016-12-18-about-sample-app&quot;&gt;サンプルアプリケーションについて&lt;/h2&gt;

&lt;p&gt;サンプルとして、SQLite3のpostsテーブルにメモを入れたり読んだりするだけの簡単なRailsアプリケーションを使って、groonga-client-railsを導入していきます。&lt;/p&gt;

&lt;p&gt;ソースコードはこちら：
&lt;a href=&quot;https://github.com/KitaitiMakoto/groonga-client-rails-sample&quot;&gt;KitaitiMakoto/groonga-client-rails-sample&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;上で「groonga-client-railsが使うGroongaはリモートサーバーです。」と書きましたが、今回はGroongaもRailsも同じローカルマシンで動かして、127.0.0.1でHTTPでアクセスさせようと思います。&lt;/p&gt;

&lt;p&gt;なお、アプリケーション作成においては&lt;a href=&quot;https://github.com/ranguba/groonga-client-rails/tree/master/test/apps&quot;&gt;groonga-client-railsのテストディレクトリー&lt;/a&gt;を大いに参考しました。ほぼまんまです。&lt;/p&gt;

&lt;h2 id=&quot;heading-2016-12-18-installing-active-groonga-rails&quot;&gt;インストール&lt;/h2&gt;

&lt;p&gt;Groongaのインストールは公式サイトのドキュメント（&lt;a href=&quot;http://groonga.org/ja/docs/install.html&quot;&gt;2. インストール&lt;/a&gt;）を見ながらやってください。日本語を扱うと思うので、MeCabトークナイザーもインストールしておくといいと思います（これもドキュメントに記載があります）。&lt;/p&gt;

&lt;p&gt;OS XであればHomebrewでインストールできます：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;% brew install groonga --with-mecab
% brew install mecab-ipadic
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;groonga-client-railsのインストールは、いつも通りGemfileに&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'groonga-client-rails'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;と書いて&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;% bundle install --path=vendor/bundle
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;です。&lt;/p&gt;

&lt;p&gt;軽く確認しておきましょう。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;% ./bin/rails --help | grep groonga
 groonga:sync                       # Synchronize Groonga database with model data
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;タスクが追加されていますね。後で実際に使ってみます。&lt;/p&gt;

&lt;h2 id=&quot;heading-2016-12-18-scaffolding&quot;&gt;基本機能の作成&lt;/h2&gt;

&lt;p&gt;postsを読み書きするための土台を作ります。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;% ./bin/rails generate scaffold post title:string body:text
Expected string default value for '--jbuilder'; got true (boolean)
      invoke  active_record
      create    db/migrate/20161217142208_create_posts.rb
      create    app/models/post.rb
      invoke    test_unit
      create      test/models/post_test.rb
      create      test/fixtures/posts.yml
      invoke  resource_route
       route    resources :posts
      invoke  scaffold_controller
      create    app/controllers/posts_controller.rb
      invoke    erb
      create      app/views/posts
      create      app/views/posts/index.html.erb
      create      app/views/posts/edit.html.erb
      create      app/views/posts/show.html.erb
      create      app/views/posts/new.html.erb
      create      app/views/posts/_form.html.erb
      invoke    test_unit
      create      test/controllers/posts_controller_test.rb
      invoke    helper
      create      app/helpers/posts_helper.rb
      invoke      test_unit
      invoke    jbuilder
      create      app/views/posts/index.json.jbuilder
      create      app/views/posts/show.json.jbuilder
      create      app/views/posts/_post.json.jbuilder
      invoke  assets
      invoke    coffee
      create      app/assets/javascripts/posts.coffee
      invoke    scss
      create      app/assets/stylesheets/posts.scss
      invoke  scss
      create    app/assets/stylesheets/scaffolds.scss
Generate posts scaffold
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;追加されたファイルを見てみます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;% git status
On branch master
Changes not staged for commit:
  (use &quot;git add &amp;lt;file&amp;gt;...&quot; to update what will be committed)
  (use &quot;git checkout -- &amp;lt;file&amp;gt;...&quot; to discard changes in working directory)

	modified:   config/routes.rb

Untracked files:
  (use &quot;git add &amp;lt;file&amp;gt;...&quot; to include in what will be committed)

	app/assets/javascripts/posts.coffee
	app/assets/stylesheets/posts.scss
	app/assets/stylesheets/scaffolds.scss
	app/controllers/posts_controller.rb
	app/helpers/posts_helper.rb
	app/models/post.rb
	app/views/posts/
	config/groonga_client.yml
	db/migrate/
	test/controllers/posts_controller_test.rb
	test/fixtures/posts.yml
	test/models/post_test.rb

no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;config/groonga_client.yml&lt;/code&gt;というファイルが出来ていますね（ジェネレーターのアウトプットには出て来ないので、見逃しそうでした）。中身はこうです。&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;&amp;amp;default&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;http&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# protocol: https&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;127.0.0.1&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;10041&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# user: alice&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# password: secret&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;read_timeout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;-1&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# read_timeout: 3&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;backend&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;synchronous&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;development&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;*default&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;*default&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;20041&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;production&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;*default&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;127.0.0.1&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;read_timeout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;何となく分かると思います。10041番ポートは、GroongaのHTTPサーバーを起動する時のデフォルトポートです。&lt;/p&gt;

&lt;p&gt;Groongaについては一先ず置いておいて、RDB（SQLite3）の作成とマイグレーションをします。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;% ./bin/rails db:migrate
== 20161217142208 CreatePosts: migrating ======================================
-- create_table(:posts)
   -&amp;gt; 0.0014s
== 20161217142208 CreatePosts: migrated (0.0015s) =============================
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;http://localhost:3000/posts にアクセスすると、アプリケーションが動いているのが確認できると思います。&lt;/p&gt;

&lt;p style=&quot;overflow: auto; border: solid 1px lightgray;&quot;&gt;
    &lt;img alt=&quot;入力画面&quot; src=&quot;https://gyazo.com/fcdf0c0bcc926d745705d71855430643.png&quot; style=&quot;float: left; box-sizing: border-box; width: 50%; border-right: dashed 1px lightgray;&quot; /&gt;&lt;img alt=&quot;入力結果&quot; src=&quot;https://gyazo.com/96b03a960a84f5c92564cc2a23211e51.png&quot; style=&quot;width: 50%;&quot; /&gt;
&lt;/p&gt;

&lt;h2 id=&quot;heading-2016-12-18-tie-app-and-search-feature&quot;&gt;検索機能との結び付け&lt;/h2&gt;

&lt;h3 id=&quot;heading-2016-12-18-booing-groonga&quot;&gt;Groongaの起動&lt;/h3&gt;

&lt;p&gt;サンプルアプリと検索機能を結び付ける前に、まずGroongaを起動しておきましょう。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;% groonga --protocol http -s -n db/groonga.db
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-n&lt;/code&gt;は「新しくデータベースを作る」というオプションで、Groongaデータベースがまだない時に一度だけ指定します。二度目以降は不要なので&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;% groonga --protocol http -s db/groonga.db
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;として起動します。&lt;/p&gt;

&lt;p&gt;終了させるには&lt;kbd&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;C&lt;/kbd&gt;&lt;/kbd&gt;でSIGINTを送ります（デーモンモードなどについてはドキュメントを見てください）。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;db/groonga.db&lt;/code&gt; は指定したパス（及びそれをプリフィクスとしたパス）にデータベースファイルを作成するという意味です。Railsのdbディレクトリーを指定しています。&lt;/p&gt;

&lt;p&gt;サーバーモードのGroongaは、検索用のAPIの他に人間用の管理インターフェイスも持っています。http://localhost:10041/ にアクセスしてみてください。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://gyazo.com/6af787d2595fc2ea9e17b9da53f442b0.png&quot; alt=&quot;Groonga管理画面&quot; /&gt;&lt;/p&gt;

&lt;p&gt;まだテーブルの作成すらしていないので、左側の「List of table」欄には何もありません。&lt;/p&gt;

&lt;h3 id=&quot;heading-2016-12-18-creating-searcher&quot;&gt;サーチャークラスの作成&lt;/h3&gt;

&lt;p&gt;RailsアプリとGroongaとの結び付けをするサーチャークラスを作成します。サーチャークラスはモデルクラス一つにつき一つまで作成することができます&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;。不要なモデルについては、当然作る必要はありません。&lt;/p&gt;

&lt;p&gt;ここでは&lt;code class=&quot;highlighter-rouge&quot;&gt;Post&lt;/code&gt;モデルしかないのでこれに対応するクラスを作成するのですが、他の種類のクラスの例に漏れず、まず&lt;code class=&quot;highlighter-rouge&quot;&gt;app/searchers/application_searcher.rb&lt;/code&gt;ファイルに&lt;code class=&quot;highlighter-rouge&quot;&gt;ApplicationSearcher&lt;/code&gt;クラスを作りましょう。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ApplicationSearcher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Groonga&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Searcher&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;次に&lt;code class=&quot;highlighter-rouge&quot;&gt;PostsSearcher&lt;/code&gt;クラスを&lt;code class=&quot;highlighter-rouge&quot;&gt;app/searchers/posts_searcher.rb&lt;/code&gt;に作ります。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PostsSearcher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationSearcher&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;column&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;type: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ShortText&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;index: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;index_type: :full_text_search&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;column&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;type: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Text&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;index: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;index_type: :full_text_search&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;column&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:updated_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;type: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Time&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;index: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;何となく分かると思いますが、&lt;code class=&quot;highlighter-rouge&quot;&gt;schema.column&lt;/code&gt;メソッドの第一引数（&lt;code class=&quot;highlighter-rouge&quot;&gt;:title&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;:body&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;:updated_at&lt;/code&gt;）は、Groonga上の検索条件や結果に使うカラムです（Groongaもカラムとレコードでデータを管理する、テーブル型のデータベースです）。このカラムに検索語が含まれているかとか、範囲内に収まっているかとかで検索することになります。これからGroongaのテーブル上に作成するカラム名なので、RDBMSのカラム名とは違っていてもいいのですが、同じにしておく方が分かりやすいでしょう。&lt;/p&gt;

&lt;p&gt;第二引数でそのカラムの性質を定義します。&lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt;はGroongaのデータ型をします。大体分かると思うので、このまま進めましょう。実際に使う時には公式ドキュメント（&lt;a href=&quot;http://groonga.org/ja/docs/reference/types.html&quot;&gt;7.4. データ型&lt;/a&gt;）を参照してください。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;index&lt;/code&gt;はインデックスを張るかどうかで、RDBMSと同様、張れば検索やソートが速くなるし、張らなければストレージやメモリーを節約できます。検索エンジンを導入するという時点で、殆どのカラムに&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;を指定することになると思います。「検索結果表示には使うけど、検索条件には使わない」という付随的な情報のカラムでだけ&lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;にしておきます。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;index_type&lt;/code&gt;は、&lt;strong&gt;全文&lt;/strong&gt;検索に使うカラムでだけ&lt;code class=&quot;highlighter-rouge&quot;&gt;:full_text_search&lt;/code&gt;を指定します。それ以外の場合は無くて構いません。例えば&lt;code class=&quot;highlighter-rouge&quot;&gt;:updated_at&lt;/code&gt;（日時）は範囲指定に使うことはあっても全文検索には使わないので、ここでも指定されていません。&lt;/p&gt;

&lt;p&gt;他に&lt;code class=&quot;highlighter-rouge&quot;&gt;vector&lt;/code&gt;を&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;か&lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;で指定することができるようで、Groongaのベクター型に対応すると思われます。ベクター型についても詳細はドキュメントを参照してください。「投稿に複数タグを付けられる場合の、タグ」など、配列のように複数の値が入るカラムをベクターにします（この日記のタグもベクターとしてGroonga上のカラムにしています）。&lt;/p&gt;

&lt;p&gt;本来、Groongaのテーブルではもっと細かなチューニングができますが、groonga-client-railsでは（今の所）ライブラリーのおすすめ設定を使うことになります。&lt;/p&gt;

&lt;h3 id=&quot;heading-2016-12-18-tie-model-and-searcher&quot;&gt;モデルクラスとサーチャークラスとの結び付け&lt;/h3&gt;

&lt;p&gt;次に、&lt;code class=&quot;highlighter-rouge&quot;&gt;Post&lt;/code&gt;モデルに設定を書いて&lt;code class=&quot;highlighter-rouge&quot;&gt;PostsSearcher&lt;/code&gt;と結び付けます。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;searcher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PostsSearcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;searcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:title&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;searcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gsub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/&amp;lt;.*?&amp;gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;searcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;updated_at&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;この設定をすることでモデルクラスの&lt;code class=&quot;highlighter-rouge&quot;&gt;after_create&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;after_update&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;after_destroy&lt;/code&gt;フックにコールバックが登録されて、リモートのGroongaサーバーと同期が取れるようになります（なので、これらのフックさえあれば&lt;code class=&quot;highlighter-rouge&quot;&gt;ActiveRecord&lt;/code&gt;以外のクラスでも結び付けられます）。&lt;/p&gt;

&lt;p&gt;ここで&lt;code class=&quot;highlighter-rouge&quot;&gt;searcher&lt;/code&gt;の属性ライター（&lt;code class=&quot;highlighter-rouge&quot;&gt;title=&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;body=&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;updated_at=&lt;/code&gt;）は、Groongaデータベース側のカラム名を意味しています。右辺には&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Symbol&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TrueClass&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NilClass&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Proc&lt;/code&gt;など&lt;code class=&quot;highlighter-rouge&quot;&gt;#call&lt;/code&gt;メソッドを持つオブジェクト&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;のいずれかを指定できます。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;searcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;updated_at&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;のように&lt;code class=&quot;highlighter-rouge&quot;&gt;TrueClass&lt;/code&gt;の場合は、モデルクラス（&lt;code class=&quot;highlighter-rouge&quot;&gt;Post&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;posts&lt;/code&gt;テーブル）の、左辺と同名の属性・カラム（&lt;code class=&quot;highlighter-rouge&quot;&gt;updated_at&lt;/code&gt;）の値を取得して、その値をGroongaデータベースと同期します。なので実は&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;searcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:title&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;も&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;searcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;で構いません。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Symbol&lt;/code&gt;は、「RDBMSのカラム名とGroongaデータベースでのカラム名が違う」といった場合に活きます。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Proc&lt;/code&gt;の場合は見れば分かると思います。&lt;code class=&quot;highlighter-rouge&quot;&gt;#call&lt;/code&gt;の戻り値がGroongaデータベースの該当カラムに挿入されます。ここではHTMLタグっぽい文字列を削除しています。&lt;/p&gt;

&lt;p&gt;最後に&lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;の場合は、そのカラムはGroongaデータベースに入りません。「始めは使っていたけど後から使わなくなったカラム」なんかで使うんでしょうかね。&lt;/p&gt;

&lt;h3 id=&quot;heading-2016-12-18-synchronizing-data&quot;&gt;データの同期&lt;/h3&gt;

&lt;p&gt;さて、これでRDBMS（SQLite3）とGroongaとでデータの同期が取れるようになりました—これからのデータについては。&lt;/p&gt;

&lt;p&gt;この時点ではRailsを再起動したりしても既存のデータが同期されません。既存データを一括同期するためには、groonga-client-railsが提供するRakeタスクを使います。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;% ./bin/rails groonga:sync
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;これを実行してGroonga管理画面（http://localhost:10041/）にアクセスし「List table」をクリックすると、&lt;code class=&quot;highlighter-rouge&quot;&gt;posts&lt;/code&gt;など今定義したテーブルが出来ているのが分かります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://gyazo.com/2a7c4aeec6463385d813995dba71d185.png&quot; alt=&quot;既存のデータがGroongaに同期されてpostsテーブルなどが作成されている&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;posts&lt;/code&gt;の「Detail」ボタンを押すと、既存のレコードが同期されているのが分かります。&lt;/p&gt;

&lt;p&gt;通常のモデルの操作でデータが同期されるのも見ておきましょう。Railsのscaffoldで出来たUIで、データを追加します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://gyazo.com/7263c673910e5c30d519c93a5cd36c7b.png&quot; alt=&quot;Railsアプリでレコードを追加する&quot; /&gt;&lt;/p&gt;

&lt;p&gt;管理画面を見ると、Groongaにも対応するデータが入っています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://gyazo.com/24979865cd7687e14bcd2f1601633382.png&quot; alt=&quot;追加したデータがGroongaに同期されている&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;heading-2016-12-18-appendix-searching&quot;&gt;おまけ - 検索して遊ぶ&lt;/h2&gt;

&lt;p&gt;今日はここまで。次回は検索用のUIを導入しようと思います。&lt;/p&gt;

&lt;p&gt;が、効果を実感しにくい、地道な作業ばかりだったので、少しだけ遊んでみましょう。今日の作業分で、コンソールで検索ができるようになっています。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;% ./bin/rails console
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;検索では&lt;code class=&quot;highlighter-rouge&quot;&gt;PostsSearcher#search&lt;/code&gt;メソッドから開始して（&lt;code class=&quot;highlighter-rouge&quot;&gt;where&lt;/code&gt;のように）検索クエリーを組み立て、&lt;code class=&quot;highlighter-rouge&quot;&gt;result_set&lt;/code&gt;でGroongaへアクセスして結果を取得します。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;searcher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PostsSearcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;searcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;result_set&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#&amp;lt;Groonga::Client::Searcher::Select::ResultSet:0x007fd7c4b0f7e0 @response=#&amp;lt;Groonga::Client::Response::Select:0x007fd7c4b1d318 @command=#&amp;lt;Groonga::Command::Select:0x007fd7c4adf388 @command_name=&quot;select&quot;, @arguments={:table=&amp;gt;&quot;posts&quot;, :match_columns=&amp;gt;&quot;title, body&quot;}, @original_format=nil, @original_source=nil, @path_prefix=&quot;/d/&quot;, @slices={}, @drilldowns=[], @labeled_drilldowns={}&amp;gt;, @header=[0, 1481988639.462895, 0.0001811981201171875], @body=[[[2], [[&quot;_id&quot;, &quot;UInt32&quot;], [&quot;_key&quot;, &quot;ShortText&quot;], [&quot;body&quot;, &quot;Text&quot;], [&quot;title&quot;, &quot;ShortText&quot;], [&quot;updated_at&quot;, &quot;Time&quot;]], [1, &quot;Post-2&quot;, &quot;Railsで検索機能を追加する選択肢の一つに、ActiveGroongaで、ActiveRecordのように追加する方法がありますが、これはローカルのデータベースファイルにアクセスするため、スケーラビリティ等に不安がありました。groonga-client-railsなら、リモートのGroongaサーバーにHTTPやGQTPでアクセスできるので、スケーラビリティや保守性をDBやアプリケーションサーバーと別々に考えることができます。&quot;, &quot;groonga-client-railsについて&quot;, 1481954320.0], [2, &quot;Post-3&quot;, &quot;ActiveGroongaは「SQLite3でActiveRecordを使う」のに似ています。詳しくは過去のQiitaの記事などを見てください。&quot;, &quot;ActiveGroongaについて&quot;, 1481955601.0]]], @n_hits=2, @records=[{&quot;_id&quot;=&amp;gt;1, &quot;_key&quot;=&amp;gt;&quot;Post-2&quot;, &quot;body&quot;=&amp;gt;&quot;Railsで検索機能を追加する選択肢の一つに、ActiveGroongaで、ActiveRecordのように追加する方法がありますが、これはローカルのデータベースファイルにアクセスするため、スケーラビリティ等に不安がありました。groonga-client-railsなら、リモートのGroongaサーバーにHTTPやGQTPでアクセスできるので、スケーラビリティや保守性をDBやアプリケーションサーバーと別々に考えることができます。&quot;, &quot;title&quot;=&amp;gt;&quot;groonga-client-railsについて&quot;, &quot;updated_at&quot;=&amp;gt;2016-12-17 14:58:40 +0900}, {&quot;_id&quot;=&amp;gt;2, &quot;_key&quot;=&amp;gt;&quot;Post-3&quot;, &quot;body&quot;=&amp;gt;&quot;ActiveGroongaは「SQLite3でActiveRecordを使う」のに似ています。詳しくは過去のQiitaの記事などを見てください。&quot;, &quot;title&quot;=&amp;gt;&quot;ActiveGroongaについて&quot;, &quot;updated_at&quot;=&amp;gt;2016-12-17 15:20:01 +0900}], @slices={}, @drilldowns=[], @raw=&quot;[[0,1481988639.462895,0.0001811981201171875],[[[2],[[\&quot;_id\&quot;,\&quot;UInt32\&quot;],[\&quot;_key\&quot;,\&quot;ShortText\&quot;],[\&quot;body\&quot;,\&quot;Text\&quot;],[\&quot;title\&quot;,\&quot;ShortText\&quot;],[\&quot;updated_at\&quot;,\&quot;Time\&quot;]],[1,\&quot;Post-2\&quot;,\&quot;Railsで検索機能を追加する選択肢の一つに、ActiveGroongaで、ActiveRecordのように追加する方法がありますが、これはローカルのデータベースファイルにアクセスするため、スケーラビリティ等に不安がありました。groonga-client-railsなら、リモートのGroongaサーバーにHTTPやGQTPでアクセスできるので、スケーラビリティや保守性をDBやアプリケーションサーバーと別々に考えることができます。\&quot;,\&quot;groonga-client-railsについて\&quot;,1481954320.0],[2,\&quot;Post-3\&quot;,\&quot;ActiveGroongaは「SQLite3でActiveRecordを使う」のに似ています。詳しくは過去のQiitaの記事などを見てください。\&quot;,\&quot;ActiveGroongaについて\&quot;,1481955601.0]]]]&quot;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;searcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Qiita'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;result_set&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#&amp;lt;Groonga::Client::Searcher::Select::ResultSet:0x007fd7c66d14b0 @response=#&amp;lt;Groonga::Client::Response::Select:0x007fd7c66d1f00 @command=#&amp;lt;Groonga::Command::Select:0x007fd7c40cb400 @command_name=&quot;select&quot;, @arguments={:table=&amp;gt;&quot;posts&quot;, :match_columns=&amp;gt;&quot;title, body&quot;, :query=&amp;gt;&quot;Qiita&quot;}, @original_format=nil, @original_source=nil, @path_prefix=&quot;/d/&quot;, @slices={}, @drilldowns=[], @labeled_drilldowns={}&amp;gt;, @header=[0, 1481988733.769218, 0.1913049221038818], @body=[[[1], [[&quot;_id&quot;, &quot;UInt32&quot;], [&quot;_key&quot;, &quot;ShortText&quot;], [&quot;body&quot;, &quot;Text&quot;], [&quot;title&quot;, &quot;ShortText&quot;], [&quot;updated_at&quot;, &quot;Time&quot;]], [2, &quot;Post-3&quot;, &quot;ActiveGroongaは「SQLite3でActiveRecordを使う」のに似ています。詳しくは過去のQiitaの記事などを見てください。&quot;, &quot;ActiveGroongaについて&quot;, 1481955601.0]]], @n_hits=1, @records=[{&quot;_id&quot;=&amp;gt;2, &quot;_key&quot;=&amp;gt;&quot;Post-3&quot;, &quot;body&quot;=&amp;gt;&quot;ActiveGroongaは「SQLite3でActiveRecordを使う」のに似ています。詳しくは過去のQiitaの記事などを見てください。&quot;, &quot;title&quot;=&amp;gt;&quot;ActiveGroongaについて&quot;, &quot;updated_at&quot;=&amp;gt;2016-12-17 15:20:01 +0900}], @slices={}, @drilldowns=[], @raw=&quot;[[0,1481988733.769218,0.1913049221038818],[[[1],[[\&quot;_id\&quot;,\&quot;UInt32\&quot;],[\&quot;_key\&quot;,\&quot;ShortText\&quot;],[\&quot;body\&quot;,\&quot;Text\&quot;],[\&quot;title\&quot;,\&quot;ShortText\&quot;],[\&quot;updated_at\&quot;,\&quot;Time\&quot;]],[2,\&quot;Post-3\&quot;,\&quot;ActiveGroongaは「SQLite3でActiveRecordを使う」のに似ています。詳しくは過去のQiitaの記事などを見てください。\&quot;,\&quot;ActiveGroongaについて\&quot;,1481955601.0]]]]&quot;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;後編ではこれを使って検索UIを組み立てます。&lt;/p&gt;

&lt;p&gt;追記。&lt;/p&gt;

&lt;p&gt;後編を書きました：&lt;a href=&quot;21.html&quot;&gt;Railsでの検索機能にgroonga-client-railsを使う（後編）&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;正確には二つ以上作れますが、あまり意味がないと思います。&amp;nbsp;&lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
    <id>https://kitaitimakoto.github.io/apehuci/2016/12/18.html</id>
    <link href="https://kitaitimakoto.github.io/apehuci/2016/12/18.html"
      type="text/html"/>
    <title>Railsでの検索機能にgroonga-client-railsを使う（前編）</title>
    <updated>2016-12-18T00:00:00Z</updated>
    <dc:date>2016-12-18T00:00:00Z</dc:date>
  </entry>
  <entry>
    <content type="html">&lt;p&gt;この日記では&lt;a href=&quot;https://www.polymer-project.org/&quot;&gt;Polymer&lt;/a&gt;を使っているのだけど、1.xから&lt;a href=&quot;https://www.polymer-project.org/2.0/docs/about_20&quot;&gt;2.0&lt;/a&gt; Previewに上げた。その時にやったことやはまったことなど。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;目次&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-2016-12-11-assumption&quot;&gt;前提&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-2016-12-11-references&quot;&gt;参考ドキュメント&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-2016-12-11-upgrading-libraries&quot;&gt;ライブラリーのアップグレード&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-2016-12-11-upgrading-paper-elements&quot;&gt;Paper Elements&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-2016-12-11-modifying-existing-code&quot;&gt;コードの修正&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-2016-12-11-changing-file-webcomponentsjs&quot;&gt;webcomponentsjsなど&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-2016-12-11-upgrading-paper-header-panel&quot;&gt;paper-header-panel&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-2016-12-11-removing-is-from-dom-module&quot;&gt;dom-module&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-2016-12-11-styling-dynamic-inserted-elements&quot;&gt;動的に挿入される要素のスタイリング&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-2016-12-11-fixing-paper-card-paper-button-error&quot;&gt;paper-cardとpaper-buttonのエラー&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;heading-2016-12-11-assumption&quot;&gt;前提&lt;/h2&gt;

&lt;p&gt;まず、Polymerを使っていると言うけど、&lt;a href=&quot;http://webcomponents.org/&quot;&gt;Webコンポーネント&lt;/a&gt;用ライブラリー（フレームワーク）としての他、Googleが提唱するUIデザインであるマテリアルデザイン用のコンポーネント（&lt;a href=&quot;https://elements.polymer-project.org/browse?package=paper-elements&quot;&gt;Paper Elements&lt;/a&gt;）なども使っていた。そのうち&lt;a href=&quot;https://elements.polymer-project.org/elements/paper-card&quot;&gt;Paper Card&lt;/a&gt;ではまったりしたのでまずここで断っておく。&lt;/p&gt;

&lt;p&gt;また、自分で作ったコンポーネントは一つだけで、フッターに置いてある検索ボックス用の&lt;code class=&quot;highlighter-rouge&quot;&gt;blog-search&lt;/code&gt;という要素のみ。これの書き換えについても触れる。&lt;/p&gt;

&lt;h3 id=&quot;heading-2016-12-11-references&quot;&gt;参考ドキュメント&lt;/h3&gt;

&lt;dl&gt;
  &lt;dt&gt;&lt;a href=&quot;https://www.polymer-project.org/2.0/docs/about_20&quot;&gt;https://www.polymer-project.org/2.0/docs/about_20&lt;/a&gt;&lt;/dt&gt;
  &lt;dd&gt;Polymer 2.0になって変わったことの概要。&lt;/dd&gt;
  &lt;dt&gt;&lt;a href=&quot;https://www.polymer-project.org/2.0/docs/upgrade&quot;&gt;https://www.polymer-project.org/2.0/docs/upgrade&lt;/a&gt;&lt;/dt&gt;
  &lt;dd&gt;Polymer 1.xから2.0へアップグレードする時のガイド。&lt;/dd&gt;
  &lt;dt&gt;&lt;a href=&quot;https://codelabs.developers.google.com/codelabs/polymer-2-carousel/&quot;&gt;https://codelabs.developers.google.com/codelabs/polymer-2-carousel/&lt;/a&gt;&lt;/dt&gt;
  &lt;dd&gt;Polymer 2.0でコンポーネントを作るチュートリアル。&lt;/dd&gt;
&lt;/dl&gt;

&lt;h2 id=&quot;heading-2016-12-11-upgrading-libraries&quot;&gt;ライブラリーのアップグレード&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/KitaitiMakoto/apehuci/commit/8bd0c722cdeea984948ee4ebc89f5a3dfd5c74ca&quot;&gt;https://github.com/KitaitiMakoto/apehuci/commit/8bd0c722cdeea984948ee4ebc89f5a3dfd5c74ca&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;heading-2016-12-11-upgrading-paper-elements&quot;&gt;Paper Elements&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.polymer-project.org/2.0/docs/about_20#installing&quot;&gt;概要ページのインストールの項目&lt;/a&gt;にあるように、Polymerは&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bower install --save Polymer/polymer#2.0-preview
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;でアップグレードできる。
この時に選択肢が出てくるが、Polymerは2.0、webcomponentsjsは1.0を選んでおけばよい。&lt;/p&gt;

&lt;p&gt;各コンポーネントをインストールするにも同様に、各コンポーネントの&lt;code class=&quot;highlighter-rouge&quot;&gt;2.0-preview&lt;/code&gt;ブランチをインストールすればいい。これまでは&lt;code class=&quot;highlighter-rouge&quot;&gt;paper-elements&lt;/code&gt;という全体をまとめたコンポーネントがあって、それをインストールするだけで全Paper Elementがインストールできたのだけど、なぜか&lt;code class=&quot;highlighter-rouge&quot;&gt;2.0-preview&lt;/code&gt;ブランチはないので、自分が使っている物を個別にインストール必要があった。めんどくさい（イシューは上がってる、と思ったのだけど、今探したら無いな、幻か知ら）。&lt;/p&gt;

&lt;p&gt;あと、&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bower install --save paper-input#2.0-preview
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;みたいに、既存の物を&lt;code class=&quot;highlighter-rouge&quot;&gt;2.0-preview&lt;/code&gt;にアップグレードすればいいコンポーネントと、&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bower install --save PaperElements/paper-card#2.0-preview
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;みたいに、GitHubのオーガニゼーションも明示しないといけないコンポーネントがある。&lt;a href=&quot;https://github.com/Polymer/paper-card&quot;&gt;Polymer/paper-card&lt;/a&gt;を見てみて、&lt;code class=&quot;highlighter-rouge&quot;&gt;2.0-preview&lt;/code&gt;ブランチがなければ&lt;a href=&quot;https://github.com/PolymerElements/paper-card&quot;&gt;PolymerElements/paper-card&lt;/a&gt;を見る、ということをしなくてはならず、これもめんどくさい。&lt;/p&gt;

&lt;h3 id=&quot;heading-2016-12-11-changing-file-webcomponentsjs&quot;&gt;webcomponentsjsなど&lt;/h3&gt;

&lt;p&gt;webcomponentsjsなどは、パッケージその物はPolymerアップグレードの時に一緒に自動でアップグレードされるのだけど、Polymerが使うファイルが変わっていることがある。例えば&lt;code class=&quot;highlighter-rouge&quot;&gt;webcomponents.min.js&lt;/code&gt;というファイルを使っていたのが&lt;code class=&quot;highlighter-rouge&quot;&gt;webcomponents-lite.js&lt;/code&gt;に変わっていたりするので、コンソールのエラーメッセージを見ながら参照先を変えていく。&lt;/p&gt;

&lt;h2 id=&quot;heading-2016-12-11-modifying-existing-code&quot;&gt;コードの修正&lt;/h2&gt;

&lt;p&gt;アップグレードに伴って、いくつか既存のコードを修正する必要があった。大体は&lt;a href=&quot;https://www.polymer-project.org/2.0/docs/upgrade&quot;&gt;アップグレードガイド&lt;/a&gt;に従えばいいが、幾つか嵌った所。&lt;/p&gt;

&lt;h3 id=&quot;heading-2016-12-11-upgrading-paper-header-panel&quot;&gt;paper-header-panel&lt;/h3&gt;

&lt;p&gt;コンポーネントをアップグレードしたら画面が真っ白になってしまった。&lt;/p&gt;

&lt;p&gt;この日記の大部分は&lt;a href=&quot;https://elements.polymer-project.org/elements/paper-header-panel&quot;&gt;paper-header-panel&lt;/a&gt;の中に入っているのだけど、これの使い方が変わっていて、そのせいだった。子要素を配置するための&lt;a href=&quot;https://www.polymer-project.org/2.0/docs/upgrade#replace-content-elements&quot;&gt;slot&lt;/a&gt;（従来はcontent）に&lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;属性で名前が付くようになって、ユーザー（＝僕）が配置する子要素にも、対応する名前を付けておかなければいけなくなっていた。一応、&lt;code class=&quot;highlighter-rouge&quot;&gt;paper-header-panel&lt;/code&gt;のソースコードコメントにはそのことが書いてある： &lt;a href=&quot;https://github.com/PolymerElements/paper-header-panel/blob/226e265f151dfd229c68780626342dd2b6295f6f/paper-header-panel.html#L32-L37&quot;&gt;paper-header-panel.html#L32-L37&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これに合わせてテンプレートを修正した（&lt;code class=&quot;highlighter-rouge&quot;&gt;slot&lt;/code&gt;属性を足しているのに注目）：&lt;/p&gt;

&lt;p&gt;Before：&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;paper-header-panel&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;mode=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;waterfall-tall&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;paper-toolbar&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/paper-toolbar&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;main&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;footer&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/footer&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/paper-header-panel&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;After：&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;paper-header-panel&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;mode=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;waterfall-tall&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;paper-toolbar&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;slot=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/paper-toolbar&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;main&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;slot=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;footer&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;slot=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/footer&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/paper-header-panel&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;heading-2016-12-11-removing-is-from-dom-module&quot;&gt;dom-module&lt;/h3&gt;

&lt;p&gt;カスタム要素を定義するのに使う&lt;a href=&quot;https://www.polymer-project.org/1.0/docs/devguide/local-dom#template-stamping&quot;&gt;dom-module&lt;/a&gt;という要素（メタ要素？）をPolymerは提供している。カスタム要素の定義は本来JavaScriptでやるのだけど、&lt;code class=&quot;highlighter-rouge&quot;&gt;dom-module&lt;/code&gt;を使うとHTMLを使ってある程度宣言的にできて、僕はこのアプローチを気に入っている。&lt;/p&gt;

&lt;p&gt;自分で作ったカスタム要素である&lt;code class=&quot;highlighter-rouge&quot;&gt;blog-search&lt;/code&gt;はこの&lt;code class=&quot;highlighter-rouge&quot;&gt;dom-module&lt;/code&gt;で定義しているのだけど、その時に、&lt;code class=&quot;highlighter-rouge&quot;&gt;dom-module&lt;/code&gt;に&lt;code class=&quot;highlighter-rouge&quot;&gt;is&lt;/code&gt;属性を付けていた。&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dom-module&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;is=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;blog-search&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;blog-search&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dom-module&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;is&lt;/code&gt;というのは、その要素（ここでは&lt;code class=&quot;highlighter-rouge&quot;&gt;dom-module&lt;/code&gt;）を更に拡張したバージョンの要素を使う、という時に使う物で、例えばオートコンプリート機能を追加した検索インプットを作って&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;search&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;is=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;auto-complete&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;などとして使う（ちなみにブラウザーベンダー間で要不要の意見が割れているらしいので、この仕様はなくなるかも）。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dom-module&lt;/code&gt;を使う時には&lt;code class=&quot;highlighter-rouge&quot;&gt;is&lt;/code&gt;属性は不要なので、ここでは使い方が間違っているのだけど、問題なく動いていた。単に無視されていたのだろうと思う。2.0 Previewに上げても同様に動いていたのだけど、Chromeで全く動かない（&lt;code class=&quot;highlighter-rouge&quot;&gt;blog-search&lt;/code&gt;の定義自体が失敗している）ことに気が付いた。&lt;code class=&quot;highlighter-rouge&quot;&gt;is&lt;/code&gt;を外すと動いたので、ChromeがネイティブでWebコンポーネントに対応しているのと関係していそうだが調べていない（他のブラウザーでは、現在のところ、Webコンポーネントの多くの機能がpolyfillやshimで動いている）。&lt;/p&gt;

&lt;h4 id=&quot;section-1&quot;&gt;追記&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;is&lt;/code&gt;は、Polymer 1.xの頃には必要（正確には&lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;または&lt;code class=&quot;highlighter-rouge&quot;&gt;is&lt;/code&gt;が必要）だったので、&lt;code class=&quot;highlighter-rouge&quot;&gt;is&lt;/code&gt;を使っていたのは正しかった。単に、2.0にする時に外し、&lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt;を付与する必要がるということだった。&lt;/p&gt;

&lt;h3 id=&quot;heading-2016-12-11-styling-dynamic-inserted-elements&quot;&gt;動的に挿入される要素のスタイリング&lt;/h3&gt;

&lt;p&gt;この日記の検索機能では、&lt;code class=&quot;highlighter-rouge&quot;&gt;XMLHttpRequest&lt;/code&gt;で&lt;a href=&quot;http://groonga.org/ja/docs/reference/executables/groonga-httpd.html&quot;&gt;groonga-httpd&lt;/a&gt; （NginxのGroongaモジュール）から検索結果を取得し、DOMツリー内に挿入している（参考：&lt;a href=&quot;../02/07.html&quot;&gt;日記に検索機能をつけた&lt;/a&gt;）。Groongaが検索キーワードに&lt;code class=&quot;highlighter-rouge&quot;&gt;keyword&lt;/code&gt;というクラスを付けてくれるので、赤い太字になるようスタイリングしていた。&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.keyword&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bolder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Chromeでスタイリングされなくなった。これは、ChromeがShadow DOMを実装していて、Polymerもそのネイティブ実装を活かしている、つまり外部でのスタイル宣言がShadow DOM内に影響を及ぼしていないからだと思う。Webコンポーネントの大きな特長がこのカプセル化なのでむしろ歓迎すべき変更。というわけで、喜んで、Shadow DOMに閉じたスタイリングに変更した。&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dom-module&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;blog-search&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;/* ... */&lt;/span&gt;

      &lt;span class=&quot;nc&quot;&gt;.keyword&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;--keyword-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;--keyword-font-weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bolder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dom-module&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;すると、今度はFirefoxでスタイルが外れてしまった。&lt;/p&gt;

&lt;p&gt;FirefoxではShadow DOMが実装されておらずshimを使っている。具体的にはHTMLの&lt;code class=&quot;highlighter-rouge&quot;&gt;style&lt;/code&gt;要素に、Shadow DOM内に閉じているのとある程度同等のスタイル宣言をして、それを持ってスコープ付きのスタイリングとしている。&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;/* ... */&lt;/span&gt;

      &lt;span class=&quot;nc&quot;&gt;.keyword.blog-search&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;--keyword-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;--keyword-font-weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bolder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;このスタイル宣言を活かすために行われるのが、「要素名と同じクラスを追加する」という処理だ。&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;blog-search&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;paper-input&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;style-scope blog-search&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/paper-input&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/blog-search&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;（&lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt;に&lt;code class=&quot;highlighter-rouge&quot;&gt;blog-search&lt;/code&gt;が追加されている）&lt;/p&gt;

&lt;p&gt;元々HTML内に書かれているタグであれば、このようにPolymerが自動でクラスを追加してくれるのだが、検索結果のように、動的に挿入される要素ではそうはいかない。仕方がないので、挿入する時に自分でクラスを追加するようにした。&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;snippetHtml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;article&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;br&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&amp;lt;span class=&quot;keyword&quot;&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&amp;lt;span class=&quot;keyword style-scope blog-search&quot;&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;文字列処理なので乱暴だが、この場合はセキュリティホールにはならない（はず）。&lt;/p&gt;

&lt;p&gt;「Firefoxはカスタムプロパティには対応しているんだからそっち使ってくれればいいんだけどなあ」とちょっと釈然としないが、まあ、過渡期ということで仕方ないのだろう。&lt;/p&gt;

&lt;h3 id=&quot;heading-2016-12-11-fixing-paper-card-paper-button-error&quot;&gt;paper-cardとpaper-buttonのエラー&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;paper-card&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;paper-button&lt;/code&gt;が（例によって）Chromeでだけ動かない。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Uncaught DOMException: Failed to construct 'CustomElement': The result must not have attributes&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;というエラーが出てしまっている。&lt;/p&gt;

&lt;p&gt;ググるとStack Overflowがヒットして（&lt;a href=&quot;http://stackoverflow.com/questions/40181683/failed-to-execute-createelement-on-document-the-result-must-not-have-childr&quot;&gt;Failed to execute 'createElement' on 'Document': The result must not have children&lt;/a&gt;）、見ると&lt;code class=&quot;highlighter-rouge&quot;&gt;created&lt;/code&gt;（新しくは&lt;code class=&quot;highlighter-rouge&quot;&gt;constructor&lt;/code&gt;）コールバックの使い方が、新しいCustom Elements仕様としては不正なようだ。しようがないのでフォークしてここを&lt;code class=&quot;highlighter-rouge&quot;&gt;ready&lt;/code&gt;コールバックに書き換えて対応とした。イシューも上げた（&lt;a href=&quot;https://github.com/PolymerElements/paper-card/issues/90&quot;&gt;2.0-preview throw an error Uncaught DOMException: Failed to construct 'CustomElement': The result must not have attributes #90&lt;/a&gt;）。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ready&lt;/code&gt;はCustom Elements標準にはなく、Polymer独自のコールバック。1.xの時代から存在していて、2.0でも残るようなので（&lt;a href=&quot;https://www.polymer-project.org/2.0/docs/about_20#lifecycle-changes&quot;&gt;Lifecycle changes&lt;/a&gt;）、&lt;code class=&quot;highlighter-rouge&quot;&gt;blog-search&lt;/code&gt;でも使っていたがそのままにしてある。&lt;/p&gt;

&lt;h4 id=&quot;section-2&quot;&gt;追記&lt;/h4&gt;

&lt;p&gt;これは&lt;code class=&quot;highlighter-rouge&quot;&gt;paper-card&lt;/code&gt;や&lt;code class=&quot;highlighter-rouge&quot;&gt;paper-button&lt;/code&gt;ではなく、&lt;a href=&quot;https://github.com/Polymer/vulcanize&quot;&gt;vulcanize&lt;/a&gt;の問題だということが分かった（&lt;a href=&quot;https://github.com/PolymerElements/paper-card/issues/90&quot;&gt;PolymerElements/paper-card/issues/90&lt;/a&gt;）。どうもJavaScriptのclass構文で定義した物ををvulcanizeがうまく扱えないということみたい。なので2.0でclass構文使う際には注意されたい。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;こんなところかな。あとは公式の&lt;a href=&quot;https://www.polymer-project.org/2.0/docs/upgrade&quot;&gt;アップグレードガイド&lt;/a&gt;に従えばいいことばかりだった。&lt;/p&gt;

&lt;p&gt;コミットログを見るとコードレベルで何をやっているかが分かると思う：
&lt;a href=&quot;https://github.com/KitaitiMakoto/apehuci/commits/master&quot;&gt;https://github.com/KitaitiMakoto/apehuci/commits/master&lt;/a&gt;&lt;/p&gt;

</content>
    <id>https://kitaitimakoto.github.io/apehuci/2016/12/11.html</id>
    <link href="https://kitaitimakoto.github.io/apehuci/2016/12/11.html"
      type="text/html"/>
    <title>Polymerを2.0 Previewに上げた</title>
    <updated>2016-12-11T00:00:00Z</updated>
    <dc:date>2016-12-11T00:00:00Z</dc:date>
  </entry>
  <entry>
    <content type="html">&lt;p&gt;これはアドベントカレンダー「&lt;a href=&quot;http://www.adventar.org/calendars/1885&quot;&gt;年末年始おすすめ作品　BY.CORK Advent Calendar 2016&lt;/a&gt;」の二日目です。&lt;/p&gt;

&lt;p&gt;本当は二日目の僕が書く必要はないと思うのですが、初日がまさかのツイッター投稿（&lt;a href=&quot;https://twitter.com/boogie_go/status/804517137784008704&quot;&gt;https://twitter.com/boogie_go/status/804517137784008704&lt;/a&gt;）だったので、「アドベントカレンダーとは何か」ということも一緒にご説明しますね。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;アドベントカレンダーとは&lt;/h2&gt;

&lt;p&gt;アドベントカレンダーは、元々は、クリスマスまでの日数を数える日めくり（？）カレンダーだそうです（参考：&lt;a href=&quot;https://ja.wikipedia.org/wiki/%E3%82%A2%E3%83%89%E3%83%99%E3%83%B3%E3%83%88%E3%82%AB%E3%83%AC%E3%83%B3%E3%83%80%E3%83%BC&quot;&gt;ウィキペディア&lt;/a&gt;）。&lt;/p&gt;

&lt;p&gt;ただ、ここでのアドベントカレンダーは日本の（主にウェブ・スマホアプリの）エンジニアの慣習を指していて、「12月1日からスタートし、クリスマスまで、ある話題を決めて、それについて持ち回りでブログ記事などを書いていく」という物です。一箇所に色んなサービスや会社の知見が集まるので読む側としては毎日楽しみだし、後から見ても、一通り情報が手に入るので便利です。&lt;/p&gt;

&lt;p&gt;これを、僕が所属する&lt;a href=&quot;https://corkagency.com/&quot;&gt;コルク&lt;/a&gt;で、（技術情報でなく）おすすめ作品でやろう、ということになりました。経緯を把握していないんだけど、たぶん、「コルクはクリエイターのエージェンシーだが、ITにも力を入れている（入れていきたい）」というところからIT業界のノウハウとか取り入れようとしているので、そこからの派生なのかな。内輪褒めになっちゃうけど、みんな僕よりもずっと色々な物を見ているし、さすが編集担当なんかはそれを言語化するのもうまいので、僕自身が楽しみ。&lt;/p&gt;

&lt;p&gt;僕の担当分「おすすめファンタジーまんが五選」は次の通り。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;諸星大二郎「妖怪ハンター」シリーズ&lt;/h2&gt;

&lt;div class=&quot;booklog_html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;booklog_html_image&quot;&gt;&lt;a href=&quot;https://www.amazon.co.jp/%E5%A6%96%E6%80%AA%E3%83%8F%E3%83%B3%E3%82%BF%E3%83%BC-%E5%9C%B0%E3%81%AE%E5%B7%BB-%E9%9B%86%E8%8B%B1%E7%A4%BE%E6%96%87%E5%BA%AB-%E8%AB%B8%E6%98%9F-%E5%A4%A7%E4%BA%8C%E9%83%8E/dp/4086183900%3FSubscriptionId%3D0AVSM5SVKRWTFMG7ZR82%26tag%3Dbooklog.jp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4086183900&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/51TmXXBItiL._SL160_.jpg&quot; width=&quot;104&quot; height=&quot;150&quot; style=&quot;border:0;border-radius:0;&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class=&quot;booklog_html_info&quot; style=&quot;padding-left:20px;&quot;&gt;&lt;div class=&quot;booklog_html_title&quot; style=&quot;margin-bottom:10px;font-size:14px;font-weight:bold;&quot;&gt;&lt;a href=&quot;https://www.amazon.co.jp/%E5%A6%96%E6%80%AA%E3%83%8F%E3%83%B3%E3%82%BF%E3%83%BC-%E5%9C%B0%E3%81%AE%E5%B7%BB-%E9%9B%86%E8%8B%B1%E7%A4%BE%E6%96%87%E5%BA%AB-%E8%AB%B8%E6%98%9F-%E5%A4%A7%E4%BA%8C%E9%83%8E/dp/4086183900%3FSubscriptionId%3D0AVSM5SVKRWTFMG7ZR82%26tag%3Dbooklog.jp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4086183900&quot; target=&quot;_blank&quot;&gt;妖怪ハンター 地の巻 (集英社文庫)&lt;/a&gt;&lt;/div&gt;&lt;div style=&quot;margin-bottom:10px;&quot;&gt;&lt;div class=&quot;booklog_html_author&quot; style=&quot;margin-bottom:15px;font-size:12px;;line-height:1.2em&quot;&gt;著者 : &lt;a href=&quot;http://booklog.jp/author/%E8%AB%B8%E6%98%9F%E5%A4%A7%E4%BA%8C%E9%83%8E&quot; target=&quot;_blank&quot;&gt;諸星大二郎&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;booklog_html_manufacturer&quot; style=&quot;margin-bottom:5px;font-size:12px;;line-height:1.2em&quot;&gt;集英社&lt;/div&gt;&lt;div class=&quot;booklog_html_release&quot; style=&quot;font-size:12px;;line-height:1.2em&quot;&gt;発売日 : 2005-11-18&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;booklog_html_link_amazon&quot;&gt;&lt;a href=&quot;http://booklog.jp/item/1/4086183900&quot; style=&quot;font-size:12px;&quot; target=&quot;_blank&quot;&gt;ブクログでレビューを見る»&lt;/a&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;考古学者とされる稗田礼二郎が、フィールドワークで訪れた先々で、色々な怪異を体験するという話。シリーズ名に「ハンター」が含まれていますが、特にハントはしません。&lt;/p&gt;

&lt;p&gt;怪異の元となっているのが宗教。舞台が日本ではあるのですが、特に土地土地の信仰を重視しているところが面白い。「神道はこういう宗教で、こういう神様がいて……」「仏教のこの宗派はこういう教えなので……」みたいなことは焦点ではなく、その上で、「この土地では古来の巨石への信仰と仏教がこう結び付いて……」など「生きた信仰」を描き出し、その可視化として、化け物が出てきます。（そして倒さず、去るのを待ちます……。）&lt;/p&gt;

&lt;p&gt;それまでは大体ライトファンタジー、それも異世界ファンタジーばかり読んでいたので、ファンタジー観が変わりました。と同時に、宗教や信仰というのは、本来（？）小さなコミュニティの物であって、現代でも適応して形を変えていく物なんだ、と、世界観まで変わる体験でした。諸星大二郎を読んでから、神社を巡るのが楽しくなりました。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;五十嵐大介『はなしっぱなし』&lt;/h2&gt;

&lt;div class=&quot;booklog_html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;booklog_html_image&quot;&gt;&lt;a href=&quot;https://www.amazon.co.jp/%E3%81%AF%E3%81%AA%E3%81%97%E3%81%A3%E3%81%B1%E3%81%AA%E3%81%97-%E4%B8%8A-%E4%B9%9D%E9%BE%8DCOMICS-%E4%BA%94%E5%8D%81%E5%B5%90-%E5%A4%A7%E4%BB%8B/dp/4309728405%3FSubscriptionId%3D0AVSM5SVKRWTFMG7ZR82%26tag%3Dbooklog.jp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4309728405&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/419DCGKFDZL._SL160_.jpg&quot; width=&quot;104&quot; height=&quot;150&quot; style=&quot;border:0;border-radius:0;&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class=&quot;booklog_html_info&quot; style=&quot;padding-left:20px;&quot;&gt;&lt;div class=&quot;booklog_html_title&quot; style=&quot;margin-bottom:10px;font-size:14px;font-weight:bold;&quot;&gt;&lt;a href=&quot;https://www.amazon.co.jp/%E3%81%AF%E3%81%AA%E3%81%97%E3%81%A3%E3%81%B1%E3%81%AA%E3%81%97-%E4%B8%8A-%E4%B9%9D%E9%BE%8DCOMICS-%E4%BA%94%E5%8D%81%E5%B5%90-%E5%A4%A7%E4%BB%8B/dp/4309728405%3FSubscriptionId%3D0AVSM5SVKRWTFMG7ZR82%26tag%3Dbooklog.jp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4309728405&quot; target=&quot;_blank&quot;&gt;はなしっぱなし 上 (九龍COMICS)&lt;/a&gt;&lt;/div&gt;&lt;div style=&quot;margin-bottom:10px;&quot;&gt;&lt;div class=&quot;booklog_html_author&quot; style=&quot;margin-bottom:15px;font-size:12px;;line-height:1.2em&quot;&gt;著者 : &lt;a href=&quot;http://booklog.jp/author/%E4%BA%94%E5%8D%81%E5%B5%90%E5%A4%A7%E4%BB%8B&quot; target=&quot;_blank&quot;&gt;五十嵐大介&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;booklog_html_manufacturer&quot; style=&quot;margin-bottom:5px;font-size:12px;;line-height:1.2em&quot;&gt;河出書房新社&lt;/div&gt;&lt;div class=&quot;booklog_html_release&quot; style=&quot;font-size:12px;;line-height:1.2em&quot;&gt;発売日 : 2004-02-18&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;booklog_html_link_amazon&quot;&gt;&lt;a href=&quot;http://booklog.jp/item/1/4309728405&quot; style=&quot;font-size:12px;&quot; target=&quot;_blank&quot;&gt;ブクログでレビューを見る»&lt;/a&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;これも現代の日本を舞台にしたファンタジーですが（いわゆる現代ファンタジーとは違う）、よりライトと言うか、「事件」ではなくて、日常的な「気が付かないけれど起こっていること」というのを描いています。話に山や谷があまりないのですが、そのファンタジー世界に浸ることができる短編集です。&lt;/p&gt;

&lt;p&gt;五十嵐大介は、読むと感性の一部を譲り受けることができるような作家で、読んだ後しばらくは日常の見方が変わる、本当に彼が見ているように見える気分になるようなパワーを持った人だと思います。理屈先行の僕はその減退が割と早いので、一時期は毎日『はなしっぱなし』を読んでファンタジー的感覚を補充していました。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;ニール ゲイマン「サンドマン」シリーズ&lt;/h2&gt;

&lt;div class=&quot;booklog_html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;booklog_html_image&quot;&gt;&lt;a href=&quot;https://www.amazon.co.jp/%E3%82%B5%E3%83%B3%E3%83%89%E3%83%9E%E3%83%B3-1-DC-COMICS-VERTIGO/dp/4924914061%3FSubscriptionId%3D0AVSM5SVKRWTFMG7ZR82%26tag%3Dbooklog.jp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4924914061&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/51KMRRKBRYL._SL160_.jpg&quot; width=&quot;97&quot; height=&quot;150&quot; style=&quot;border:0;border-radius:0;&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class=&quot;booklog_html_info&quot; style=&quot;padding-left:20px;&quot;&gt;&lt;div class=&quot;booklog_html_title&quot; style=&quot;margin-bottom:10px;font-size:14px;font-weight:bold;&quot;&gt;&lt;a href=&quot;https://www.amazon.co.jp/%E3%82%B5%E3%83%B3%E3%83%89%E3%83%9E%E3%83%B3-1-DC-COMICS-VERTIGO/dp/4924914061%3FSubscriptionId%3D0AVSM5SVKRWTFMG7ZR82%26tag%3Dbooklog.jp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4924914061&quot; target=&quot;_blank&quot;&gt;サンドマン (1) (DC COMICS VERTIGO)&lt;/a&gt;&lt;/div&gt;&lt;div style=&quot;margin-bottom:10px;&quot;&gt;&lt;div class=&quot;booklog_html_author&quot; style=&quot;margin-bottom:15px;font-size:12px;;line-height:1.2em&quot;&gt;著者 : &lt;a href=&quot;http://booklog.jp/author/%E3%83%8B%E3%83%BC%E3%83%AB%E3%83%BB%E3%82%B2%E3%82%A4%E3%83%9E%E3%83%B3&quot; target=&quot;_blank&quot;&gt;ニール・ゲイマン&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;booklog_html_manufacturer&quot; style=&quot;margin-bottom:5px;font-size:12px;;line-height:1.2em&quot;&gt;インターブックス&lt;/div&gt;&lt;div class=&quot;booklog_html_release&quot; style=&quot;font-size:12px;;line-height:1.2em&quot;&gt;発売日 : 1998-04-08&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;booklog_html_link_amazon&quot;&gt;&lt;a href=&quot;http://booklog.jp/item/1/4924914061&quot; style=&quot;font-size:12px;&quot; target=&quot;_blank&quot;&gt;ブクログでレビューを見る»&lt;/a&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;どう紹介したものか……。&lt;/p&gt;

&lt;p&gt;主人公は「&lt;a href=&quot;https://ja.wikipedia.org/wiki/%E3%82%B6%E3%83%B3%E3%83%88%E3%83%9E%E3%83%B3&quot;&gt;サンドマン&lt;/a&gt;」「モルフェウス」などの呼び名を持つ超常の存在ドリーム。文字通り夢（そして眠り）を司る存在で、宇宙の始まりから存在し、人間が滅んでも（夢を見る知性体がいる限り）あり続ける存在です（同様の存在が他にも何人がいて、その一つ、ドリームの姉であるデス（もちろん、死を司る）とは仲がいいのが読んでいて感じられます）。例えば、物語の冒頭で、魔術師に彼が捕えられてしまうのですが、そうすると世界の眠りがめちゃくちゃになり、ある人は永久に夢を見続けることに、また別の人は眠ることができなくなったりしてしまうほどで、本当に夢その物なのです。&lt;/p&gt;

&lt;p&gt;まんがはその彼のアドベンチャーを描いた物。始め二巻は捕えられてから出るまでと、捉えられている間に奪われてしまった三つのアイテムを見付け出すまで。次の二巻は、「渦」と呼ぶ、夢に関するおかしな現象が、アメリカのある少女を中心に（というか、彼女が渦その物となって）国中を巻き込む規模で起こり、その解決まで。第五巻は完全に独立した短編集で、猫が夢を見る話などがある。そして、六巻以降は、残念ながら邦訳されていない。&lt;/p&gt;

&lt;p&gt;上手く感想を言葉にできないのだけど、伏線の扱いが上手とかも技術的な点もありますが、とにかくその発想と、夢に対する解釈の深さに圧倒されっぱなしのまんがでした。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;萱島雄太『西遊少女』&lt;/h2&gt;

&lt;div class=&quot;booklog_html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;booklog_html_image&quot;&gt;&lt;a href=&quot;http://p.booklog.jp/book/54478&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://img.p.booklog.jp/393D6F56-DC31-11E1-B1E1-2928058D85C2_m.gif&quot; width=&quot;105&quot; height=&quot;150&quot; style=&quot;border:0;border-radius:0;&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class=&quot;booklog_html_info&quot; style=&quot;padding-left:20px;&quot;&gt;&lt;div class=&quot;booklog_html_title&quot; style=&quot;margin-bottom:10px;font-size:14px;font-weight:bold;&quot;&gt;&lt;a href=&quot;http://p.booklog.jp/book/54478&quot; target=&quot;_blank&quot;&gt;西遊少女 #01 -無料サンプル号-&lt;/a&gt;&lt;/div&gt;&lt;div style=&quot;margin-bottom:10px;&quot;&gt;&lt;div class=&quot;booklog_html_author&quot; style=&quot;margin-bottom:15px;font-size:12px;;line-height:1.2em&quot;&gt;著者 : &lt;a href=&quot;http://booklog.jp/author/%E8%90%B1%E5%B3%B6%E9%9B%84%E5%A4%AA&quot; target=&quot;_blank&quot;&gt;萱島雄太&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;booklog_html_manufacturer&quot; style=&quot;margin-bottom:5px;font-size:12px;;line-height:1.2em&quot;&gt;パブー&lt;/div&gt;&lt;div class=&quot;booklog_html_release&quot; style=&quot;font-size:12px;;line-height:1.2em&quot;&gt;発売日 : 2012-08-02&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;booklog_html_link_amazon&quot;&gt;&lt;a href=&quot;http://booklog.jp/item/3/54478&quot; style=&quot;font-size:12px;&quot; target=&quot;_blank&quot;&gt;ブクログでレビューを見る»&lt;/a&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;[disclosure]僕はかつて、『西遊少女』が連載されていたパブーの開発をしていました。&lt;/p&gt;

&lt;p&gt;有名な『西遊記』をモチーフに、少女になった三蔵、沙悟浄、八戒、悟空が天竺を目指す……向かう話。主人公の三蔵はそもそも天竺に行きたくなくて、何とか離脱しようとするところを他の連中が頑張って連れ戻すスラップスティックです。&lt;a href=&quot;http://p.booklog.jp/&quot;&gt;パブー&lt;/a&gt;では非公開になっており、&lt;a href=&quot;http://mavo.takekuma.jp/title.php?title=67&quot;&gt;電脳マヴォ&lt;/a&gt;で公開されています。&lt;/p&gt;

&lt;p&gt;当時（2012年）としては非常に珍しい、ウェブの縦スクロールを意識した、というか、その特徴を使ってのびのびと遊んでいるまんが。&lt;/p&gt;

&lt;p&gt;単に「スクロールを活かす」というのだと「あーはいはい『実験的』まんがね、はいはい」となりがちだと思うんですが、『西遊少女』はお話自体が面白いので、そういう「技術に偏った奴らが何かやってる」というネガティブイメージを生まないという意味でもおすすめです。パブーの頃は第九話で連載がストップしてしまったのですが、マヴォでは最後まで描かれるんだろうか……。&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;曽田正人『テンプリズム』&lt;/h2&gt;

&lt;div class=&quot;booklog_html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;booklog_html_image&quot;&gt;&lt;a href=&quot;https://www.amazon.co.jp/%E3%83%86%E3%83%B3%E3%83%97%E3%83%AA%E3%82%BA%E3%83%A0-1-%E3%83%93%E3%83%83%E3%82%B0%E3%82%B3%E3%83%9F%E3%83%83%E3%82%AF%E3%82%B9-%E6%9B%BD%E7%94%B0-%E6%AD%A3%E4%BA%BA/dp/4091864104%3FSubscriptionId%3D0AVSM5SVKRWTFMG7ZR82%26tag%3Dbooklog.jp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4091864104&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/61u7E-vwJHL._SL160_.jpg&quot; width=&quot;105&quot; height=&quot;150&quot; style=&quot;border:0;border-radius:0;&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class=&quot;booklog_html_info&quot; style=&quot;padding-left:20px;&quot;&gt;&lt;div class=&quot;booklog_html_title&quot; style=&quot;margin-bottom:10px;font-size:14px;font-weight:bold;&quot;&gt;&lt;a href=&quot;https://www.amazon.co.jp/%E3%83%86%E3%83%B3%E3%83%97%E3%83%AA%E3%82%BA%E3%83%A0-1-%E3%83%93%E3%83%83%E3%82%B0%E3%82%B3%E3%83%9F%E3%83%83%E3%82%AF%E3%82%B9-%E6%9B%BD%E7%94%B0-%E6%AD%A3%E4%BA%BA/dp/4091864104%3FSubscriptionId%3D0AVSM5SVKRWTFMG7ZR82%26tag%3Dbooklog.jp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4091864104&quot; target=&quot;_blank&quot;&gt;テンプリズム 1 (ビッグコミックス)&lt;/a&gt;&lt;/div&gt;&lt;div style=&quot;margin-bottom:10px;&quot;&gt;&lt;div class=&quot;booklog_html_author&quot; style=&quot;margin-bottom:15px;font-size:12px;;line-height:1.2em&quot;&gt;著者 : &lt;a href=&quot;http://booklog.jp/author/%E6%9B%BD%E7%94%B0%E6%AD%A3%E4%BA%BA&quot; target=&quot;_blank&quot;&gt;曽田正人&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;booklog_html_manufacturer&quot; style=&quot;margin-bottom:5px;font-size:12px;;line-height:1.2em&quot;&gt;小学館&lt;/div&gt;&lt;div class=&quot;booklog_html_release&quot; style=&quot;font-size:12px;;line-height:1.2em&quot;&gt;発売日 : 2014-08-29&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;booklog_html_link_amazon&quot;&gt;&lt;a href=&quot;http://booklog.jp/item/1/4091864104&quot; style=&quot;font-size:12px;&quot; target=&quot;_blank&quot;&gt;ブクログでレビューを見る»&lt;/a&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;[disclosure]僕は現在、『テンプリズム』の編集を担当しているコルクに所属しています。&lt;/p&gt;

&lt;p&gt;曽田正人初めての異世界ファンタジー。伝説の力を有するツナシが、魔力と呼ばれる力を持ち、どんどん国を拡大して世界を侵略していっている&lt;ruby&gt;骨&lt;rt&gt;グゥ&lt;/rt&gt;&lt;/ruby&gt;の国と戦う物語。&lt;/p&gt;

&lt;p&gt;曽田正人と言えば僕は『昴』から入り、それ以外の作品も読んでいった、という流れなのですが、どれも共通するのは、主人公が天才であること。特に、自分の力で成長することのできる天才。ファンタジーになってもそれは健在なのですが、変わったのが天才性が目に見えるようになったことです。&lt;/p&gt;

&lt;p&gt;作中で「オロメテオールの力」と呼ばれるその力はツナシの眼に宿り、自分の意図ではその発動を制御できない。思わぬ時にその力が使えたり、望んだ時に使えなかったりする。こう書くと分かりやすいですが、結構、これまでの主人公の天才性と似ていますね。そして、ここが、さすが曽田正人という感じなんですが、「目に見える」「名前がある」という、「自分の外にある物である」と認識する条件が満たされているので、天才 vs 天才性という軸で主人公を眺める楽しみも出てきています。その上で、「それでも自分なのだし、責任を引き受ける」という決断を描くまでの成長があるところが、ファンタジーにして生まれた曽田正人の新しさだと感じました。&lt;/p&gt;

</content>
    <id>https://kitaitimakoto.github.io/apehuci/2016/12/02.html</id>
    <link href="https://kitaitimakoto.github.io/apehuci/2016/12/02.html"
      type="text/html"/>
    <title>アドカレ #コルクおすすめ2016 二日目 おすすめファンタジーまんが五選</title>
    <updated>2016-12-02T00:00:00Z</updated>
    <dc:date>2016-12-02T00:00:00Z</dc:date>
  </entry>
  <entry>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://jxck.io/&quot;&gt;Jxck&lt;/a&gt;さんによる&lt;a href=&quot;https://blog.jxck.io/entries/2016-06-25/intersection-observer.html&quot;&gt;Intersection Observer を用いた要素出現検出の最適化&lt;/a&gt;という記事を読んで、Intersection Observerを使ってみたくなった。そこで、これを使ってモバイル用のスクロールスパイを実装してみた：&lt;a href=&quot;https://kitaitimakoto.github.io/scrollspy-example/&quot;&gt;Scrollspy example&lt;/a&gt;（iOS以外のFirefoxが一番綺麗に動く。次点でSafari。）&lt;/p&gt;

&lt;h2 id=&quot;intersection-observer&quot;&gt;Intersection Observer&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API&quot;&gt;Intersection Observer&lt;/a&gt;を使うと&lt;code class=&quot;highlighter-rouge&quot;&gt;scroll&lt;/code&gt;イベントの監視が不要になるケースがあり、その際に動作が軽快になるというのが主なメリットで、ユースケースとしてはデータや（画像などの）リソースの遅延読み込みが想定されているようだ。&lt;code class=&quot;highlighter-rouge&quot;&gt;img&lt;/code&gt;要素が画面に入ってくる直前のタイミングで画像読み込みを開始する、という用途だ。&lt;/p&gt;

&lt;p&gt;ところが&lt;code class=&quot;highlighter-rouge&quot;&gt;scroll&lt;/code&gt;イベントの出番は他にもあり、最近出くわしたのが画面上部固定のナビゲーションとスクロールスパイだった。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;固定ナビゲーション&lt;/h2&gt;

&lt;p&gt;固定のナビゲーションというのは、 この言い方だったら「&lt;code class=&quot;highlighter-rouge&quot;&gt;position: fixed&lt;/code&gt;使えば？」という感じだが、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;最初はナビゲーションが普通にスクロールで移動するようになっている&lt;/li&gt;
  &lt;li&gt;スクロールによってナビゲーションが画面最上部に来たら、その位置で固定する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という物で、「ナビゲーションが画面最上部に到達しているかどうか」を判定するのに、&lt;code class=&quot;highlighter-rouge&quot;&gt;scroll&lt;/code&gt;イベントを監視しなくてはならない。これについてはIntersection Observerではなく、&lt;a href=&quot;https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md&quot;&gt;Passive Event Listener&lt;/a&gt;の出番なのだが（これもJxckさんの記事&lt;a href=&quot;https://blog.jxck.io/entries/2016-06-09/passive-event-listeners.html&quot;&gt;Passive Event Listeners によるスクロールの改善&lt;/a&gt;が素晴らしい）、今回はブラウザーを絞って、CSSの&lt;code class=&quot;highlighter-rouge&quot;&gt;position: sticky&lt;/code&gt;で解決した（参考：&lt;a href=&quot;http://unformedbuilding.com/articles/css-position-sticky/&quot;&gt;素敵な position: sticky; Unformed Building&lt;/a&gt;）。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;スクロールスパイ&lt;/h2&gt;

&lt;p&gt;残ったスクロールスパイを、Intersection Observerで実装してみた。それもモバイル用にしてみた。&lt;/p&gt;

&lt;p&gt;別にモバイルに絞らなくても、Intersection Observerによるスクロールスパイの実装というのは妥当な選択ではあるのだが、別所で「モバイルでもスクロールスパイのようなナビゲーションが欲しい」という話をしていたこともあって、その解決策の例示と併せた。&lt;/p&gt;

&lt;p&gt;モバイルでスクロールスパイがあまり見られないのは、やはり「常時サイドバーなどでナビゲーションを表示する」というのが、画面の狭い環境では受け入れ難いから。ただ、一般にヘッダーとフッターくらいは常時表示が許容されているので、ここをスクロールスパイに使ってしまおうというのがアイディアだった。スクロールスパイの目的は&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;全体のナビゲーションを表示すること&lt;/li&gt;
  &lt;li&gt;その中で現在位置を示すこと&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;だが、後者に特にフォーカスして、「現在位置が変わる度に表示を切り替えて、その場所の名前にする」という方法をとった。前者については、タップするとナビゲーションの全メニューを表示することで解決とした。&lt;/p&gt;

&lt;p&gt;あと、巷のスクロールスパイでは、現在位置が変わった時に&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;一旦ナビゲーション中の全部を「選択されていない」状態にする&lt;/li&gt;
  &lt;li&gt;その後、現在位置に対応するメニューだけを「選択」状態にする&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;となっているのが多いのだが、Intersection Observerによって注目すべき対象が絞れるので、不要なループを削れたのも嬉しい。&lt;/p&gt;

&lt;h2 id=&quot;firefoxcss&quot;&gt;FirefoxのCSS対応&lt;/h2&gt;

&lt;p&gt;スムーススクロールやカスタムプロパティ、&lt;code class=&quot;highlighter-rouge&quot;&gt;position: sticky;&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;text-decoration-style&lt;/code&gt;など、Firefoxが、意外と色々なCSSの機能に対応していて驚いた。&lt;/p&gt;

&lt;p&gt;特にスムーススクロールはお気に入りで、JavaScriptでスムーススクロールを実装する場合には、自動で&lt;code class=&quot;highlighter-rouge&quot;&gt;location&lt;/code&gt;のフラグメント部が変わらないし、何より&lt;code class=&quot;highlighter-rouge&quot;&gt;:target&lt;/code&gt;擬似クラスの対象が変わらない。その点、ブラウザーネイティブのスムーススクロールなら&lt;code class=&quot;highlighter-rouge&quot;&gt;:target&lt;/code&gt;を使ったスタイリングもできるので非常にいい（今回は使わなかったが）。&lt;/p&gt;

&lt;p&gt;最後に、改めてリンクを：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://kitaitimakoto.github.io/scrollspy-example/&quot;&gt;Scrollspy example&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/KitaitiMakoto/scrollspy-example&quot;&gt;KitaitiMakoto/scrollspy-example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
    <id>https://kitaitimakoto.github.io/apehuci/2016/09/12.html</id>
    <link href="https://kitaitimakoto.github.io/apehuci/2016/09/12.html"
      type="text/html"/>
    <title>Intersection Observerによるモバイル用スクロールスパイ</title>
    <updated>2016-09-12T00:00:00Z</updated>
    <dc:date>2016-09-12T00:00:00Z</dc:date>
  </entry>
  <entry>
    <content type="html">&lt;p&gt;久し振りに&lt;a href=&quot;https://groonga.doorkeeper.jp/events/48368&quot;&gt;Groongaで学ぶ全文検索 2016-08-26&lt;/a&gt;@&lt;a href=&quot;http://www.eli-sys.jp/&quot;&gt;イーライセンスシステムズ&lt;/a&gt;に参加してきた。&lt;/p&gt;

&lt;p&gt;今日は、全文検索がどういう物かよく分かっていないという人が複数人いたことから、全文検索の仕組みと、スコアリングについて話をしてもらった。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;全文検索の仕組み&lt;/h2&gt;

&lt;p&gt;ホテルデータベースを考える。ホテルのある場所、種類（ホテルか旅館か）、泊数や日付、説明があって、それぞれで絞り込みができる。このうち、説明が全文検索（テキスト検索）の対象になる。&lt;/p&gt;

&lt;p&gt;ある言葉（「軽井沢」）で検索する時に、全ホテルを順番に見て、それぞれに検索語が含まれているかを調べる方法は、非常に時間が掛かる。耐えられる時間内に検索結果が返ってこない。そこで、検索結果を速く返すための準備をすることになる。この準備をしたデータのことをインデックスと呼ぶ。&lt;/p&gt;

&lt;p&gt;インデックスというのは、日本語では索引で、考え方は本の末尾にある索引と同じ。本の方の索引は、専門用語などの「言葉」と、その言葉が出てくる「ページのリスト」を並べた物だ。全文検索エンジンのインデックスも同様で、キーワードと、そのキーワードを含んでいる文書（のIDなど）のペアを並べた物になっている。検索語がこのインデックスに載っていると、検索するのが速い。但し、インデックスに載っていない検索語は、検索できなくなる。そこで、インデックスのキーに載っている単語を増やすのがコツになる。&lt;/p&gt;

&lt;p&gt;元々の説明文などからこのキーを作る方法は二種類ある。一つは、説明を日本語として解釈して分割し、分割結果をキーにする方法。形態素解析と呼ばれる。&lt;/p&gt;

&lt;p&gt;もう一つは単純に決めた文字数で区切ること。「軽井沢に行こう」という説明文だったら、「軽井」「井沢」「沢に」「に行」「行こ」「う」と区切ることができる。この時、「軽井沢」で検索すると、どこにもこれと同じキーはないのでヒットしない。そこで、検索語の方も同じように区切って「軽井」「井沢」とする。それから「説明文に『軽井』を含んでいるホテル一覧」と「『井沢』を含んでいるホテル一覧」を取得し、その共通部分を取ると、「軽井沢」を含むホテル情報が手に入る。正確には、「『軽井沢』を含む&lt;strong&gt;可能性のある&lt;/strong&gt;ホテル情報一覧」が手に入る。「井沢さんと軽井さんが経営しています」という文書もヒットするからだ。それを防ぐため、共通部分を取る時に、「キーワードの順番と離れ具合を見て、この順番で隣り合っているような説明文のホテル一覧」を取得するようにする。すると「説明文に『軽井沢』を含んでいるホテル一覧」になる。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;スコアリング&lt;/h2&gt;

&lt;p&gt;なぜスコアをつけるのか、という話を最初にした。それは、検索結果一覧の中のそれぞれで、ユーザーの欲しそう度合いが違うから。欲しそうな度合いの大きい物を先に提示して、そうでない物を後に提示すると、ユーザーが本当に欲しかった物をよりうまく提供できるだろうという考え方による。この欲しそう度合いを決める際に、エリアなどの項目をどれくらい重視するかというのを数値にした物のことを「重み」と呼んで、重みを決めることを「重み付け」と言う。検索スコアをつける際、それぞれの重みを考慮したスコアをつけることになる。&lt;/p&gt;

&lt;p&gt;スコアリングの際には、確実さと重要さの二つを考えて行う。&lt;/p&gt;

&lt;p&gt;確実さというのは、「軽井沢」で検索した時に、説明文で「軽井沢にほど近い」となっているホテルよりも、エリアがズバリ「軽井沢」となっている方が重くなるようにスコアをつけること。&lt;/p&gt;

&lt;p&gt;重要さというのは、仮に説明文にタイトルと本文があった時に、タイトルの方が大事だろうと考えて、タイトルにヒットした場合により高いスコアをつけること。&lt;/p&gt;

</content>
    <id>https://kitaitimakoto.github.io/apehuci/2016/08/26.html</id>
    <link href="https://kitaitimakoto.github.io/apehuci/2016/08/26.html"
      type="text/html"/>
    <title>全文検索とスコアリングの仕組み</title>
    <updated>2016-08-26T00:00:00Z</updated>
    <dc:date>2016-08-26T00:00:00Z</dc:date>
  </entry>
  <entry>
    <content type="html">&lt;p&gt;携帯を買い換えた。&lt;/p&gt;

&lt;p&gt;これまでFirefox OSの&lt;a href=&quot;http://au-fx.kddi.com/&quot;&gt;Fx0&lt;/a&gt;を使っていたが、諸々の事情で、と言うかタブレットのNexus 7が充電できなくなってしまって、さすがに携帯端末がFirefox OSしかないのは不便が大きすぎるのでAndroid携帯に変えた。本当はNexusにしたかったけど、auにはFirefox OSを出してもらった義理を（一方的に）感じているので、一回はauを選びたかった。その中で有効な選択肢はGalaxy S7 edgeとHTC 10だったが何となくでGalaxyにした。&lt;/p&gt;

&lt;p&gt;正直Galayx S7 edgeもHTP 10も大き過ぎるので、多少は小さいHTC 10にしようかなあとは思っていたのだが、店頭で見てみるとどちらも変わらないのでGalaxyにしたのだった。&lt;/p&gt;

&lt;p&gt;それはそれとして、タブレットをどうしようかすごい迷ってて、Nexus 7は最高だったと思う。Nexus 9は大き過ぎる。iPad miniは有力候補だけどちょっとした不便を解消したいと思って簡単なアプリ作ってもストア申請めんどいなあ、だったらAndroidの方がまだ自由かなあとか、ASUSのAndroidタブレット大きさ的にはいいけど最新のOSに追従してほしいなあとか、なんかいい感じのところがない。一月くらいGalaxyとくらしてみて決めようと思う。早速BookLive!アプリでまんが読んでみたところやっぱちょっと画面小さいので、何かは買うと思うが。&lt;/p&gt;

</content>
    <id>https://kitaitimakoto.github.io/apehuci/2016/07/17.html</id>
    <link href="https://kitaitimakoto.github.io/apehuci/2016/07/17.html"
      type="text/html"/>
    <title>Farewell to Firefox OS</title>
    <updated>2016-07-17T00:00:00Z</updated>
    <dc:date>2016-07-17T00:00:00Z</dc:date>
  </entry>
  <entry>
    <content type="html">&lt;p&gt;&lt;a href=&quot;http://rouge.jneen.net/&quot;&gt;Rouge&lt;/a&gt;というRuby製のシンタックスハイライト用ライブラリーがあって、それのFluentd設定ファイル用の追加レクサー（トークナイザー）を作ってみた。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/KitaitiMakoto/rouge-lexers-fluentd&quot;&gt;https://github.com/KitaitiMakoto/rouge-lexers-fluentd&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;始めはApache用のレクサーを使ってみたんだけどうまくいかなかった。&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Directory&amp;gt;&lt;/code&gt;とかのキーワードがホワイトリスト形式だったり（これはサブクラス作ることで簡単に解決できたけど）、やっぱりFluentd独自の構文に対応したくなったりしてきたので、自分で書いたのだった。&lt;/p&gt;

&lt;p&gt;使ってみると、こんな感じ。&lt;/p&gt;

&lt;div class=&quot;language-fluentd highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Receive events from 24224/tcp&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# This is used by log forwarding and the fluent-cat command&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;  &lt;span class=&quot;nb&quot;&gt;@type&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;forward&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;24224&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# http://this.host:9880/myapp.access?json={&quot;event&quot;:&quot;data&quot;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;  &lt;span class=&quot;nb&quot;&gt;@type&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;http&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;9880&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Match events tagged with &quot;myapp.access&quot; and&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# store them to /var/log/fluent/access.%Y-%m-%d&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Of course, you can control how you partition your data&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# with the time_slice_format option.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; myapp.access&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;  &lt;span class=&quot;nb&quot;&gt;@type&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;file&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/var/log/fluent/access&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Rougeはターミナル向けにもフォーマットできる。
&lt;img src=&quot;https://gyazo.com/89808bd1f93c33658cc632253980677f.png&quot; alt=&quot;シンタックスハイライトのターミナルアウトプット&quot; /&gt;&lt;/p&gt;

&lt;p&gt;READMEに書いた通りまだやることは残っているけど、取り敢えず最低限の用はなすと思う。具体的には、『&lt;a href=&quot;https://gihyo.jp/dp/ebook/2014/978-4-7741-6698-8&quot;&gt;サーバ／インフラエンジニア養成読本 ログ収集〜可視化編&lt;/a&gt;』のシンタックスハイライトをできる程度には使える。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://gyazo.com/9db066f8005d35bba48e0196917bf1ec.png&quot; alt=&quot;サーバ／インフラエンジニア養成読本 ログ収集〜可視化編でのシンタックスハイライト&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;booklog_html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;booklog_html_image&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/%E3%82%A4%E3%83%B3%E3%83%95%E3%83%A9%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E9%A4%8A%E6%88%90%E8%AA%AD%E6%9C%AC-%E3%83%AD%E3%82%B0%E5%8F%8E%E9%9B%86%7E%E5%8F%AF%E8%A6%96%E5%8C%96%E7%B7%A8-%E7%8F%BE%E5%A0%B4%E4%B8%BB%E5%B0%8E%E3%81%AE%E3%83%87%E3%83%BC%E3%82%BF%E5%88%86%E6%9E%90%E7%92%B0%E5%A2%83%E3%82%92%E6%A7%8B%E7%AF%89-Software-Design/dp/4774169838%3FSubscriptionId%3D0AVSM5SVKRWTFMG7ZR82%26tag%3Dbooklog.jp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4774169838&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/51lSb2Ie7WL._SL160_.jpg&quot; width=&quot;105&quot; height=&quot;150&quot; style=&quot;border:0;border-radius:0;&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class=&quot;booklog_html_info&quot; style=&quot;padding-left:20px;&quot;&gt;&lt;div class=&quot;booklog_html_title&quot; style=&quot;margin-bottom:10px;font-size:14px;font-weight:bold;&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/%E3%82%A4%E3%83%B3%E3%83%95%E3%83%A9%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E9%A4%8A%E6%88%90%E8%AA%AD%E6%9C%AC-%E3%83%AD%E3%82%B0%E5%8F%8E%E9%9B%86%7E%E5%8F%AF%E8%A6%96%E5%8C%96%E7%B7%A8-%E7%8F%BE%E5%A0%B4%E4%B8%BB%E5%B0%8E%E3%81%AE%E3%83%87%E3%83%BC%E3%82%BF%E5%88%86%E6%9E%90%E7%92%B0%E5%A2%83%E3%82%92%E6%A7%8B%E7%AF%89-Software-Design/dp/4774169838%3FSubscriptionId%3D0AVSM5SVKRWTFMG7ZR82%26tag%3Dbooklog.jp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4774169838&quot; target=&quot;_blank&quot;&gt;サーバ/インフラエンジニア養成読本 ログ収集~可視化編 [現場主導のデータ分析環境を構築!] (Software Design plus)&lt;/a&gt;&lt;/div&gt;&lt;div style=&quot;margin-bottom:10px;&quot;&gt;&lt;div class=&quot;booklog_html_author&quot; style=&quot;margin-bottom:15px;font-size:12px;;line-height:1.2em&quot;&gt;著者 : &lt;a href=&quot;http://booklog.jp/author/%E9%88%B4%E6%9C%A8%E5%81%A5%E5%A4%AA&quot; target=&quot;_blank&quot;&gt;鈴木健太&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;booklog_html_manufacturer&quot; style=&quot;margin-bottom:5px;font-size:12px;;line-height:1.2em&quot;&gt;技術評論社&lt;/div&gt;&lt;div class=&quot;booklog_html_release&quot; style=&quot;font-size:12px;;line-height:1.2em&quot;&gt;発売日 : 2014-08-08&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;booklog_html_link_amazon&quot;&gt;&lt;a href=&quot;http://booklog.jp/item/1/4774169838&quot; style=&quot;font-size:12px;&quot; target=&quot;_blank&quot;&gt;ブクログでレビューを見る»&lt;/a&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

</content>
    <id>https://kitaitimakoto.github.io/apehuci/2016/06/11.html</id>
    <link href="https://kitaitimakoto.github.io/apehuci/2016/06/11.html"
      type="text/html"/>
    <title>Fluentd設定ファイルのシンタックスハイライト</title>
    <updated>2016-06-11T00:00:00Z</updated>
    <dc:date>2016-06-11T00:00:00Z</dc:date>
  </entry>
  <entry>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://groonga.doorkeeper.jp/events/43780&quot;&gt;Groongaで学ぶ全文検索 2016-05-20&lt;/a&gt;に行って来た。&lt;/p&gt;

&lt;p&gt;今日の話題は「類似文書検索」。&lt;/p&gt;

&lt;p&gt;参加者の一人が、今作っているサービスでMroonga（Groongaの機能をMySQL経由で使うストレージエンジン）を使っていて、その類似文書検索のパラメーター調整の相談があるということで、類似文書検索が話題に選ばれた。&lt;/p&gt;

&lt;p&gt;まだ世に出ていないサービスなので、以降はその物ではなくて僕が適当に変換した話を書く。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;サービス概要（フェイク）&lt;/h2&gt;

&lt;p&gt;話をブログに例えると、はてなダイアリー（はてなブログではない）のような物。&lt;/p&gt;

&lt;p&gt;まず、普通にブログ記事を書ける。&lt;/p&gt;

&lt;p&gt;そして、（最近の人は知らないかも知れないけど）「おとなり日記」という機能があって、自分の記事と似ている記事一覧が、コメントの所に表示される（今はないかも？）。&lt;/p&gt;

&lt;p&gt;勿論、はてなダイアリーには他にも色々な機能があるが、今日の話に必要なのはこの二つ。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;やりたいことと直面している課題&lt;/h2&gt;

&lt;p&gt;やりたいのは、日記を書いた時に、おとなり日記のように、似た記事を探してきて、見せること。&lt;/p&gt;

&lt;p&gt;そこの所を、Mroongaの類似文書検索の機能を使って実装したのだが、ヒットする類似文書が少なすぎるので、もっと増やしたい。そのために、今はMroongaが「似ているといえば似ているが、この特徴を似ていると言ってしまうと、およそ全ての日記がお互いに似ていることになってしまう、つまり何も言っていないに等しい」と判断して切り捨てている特徴を、復活させたい、そのためのパラメーターがあるのであれば知りたい、ということだった。もう少し具体的に言うと、ほぼ全日記に含まれるような言葉は、検索時に省かれているが、それを復活させたいということ。&lt;/p&gt;

&lt;p&gt;なお、そうするとノイズが増えることは理解していて、ただ、全体の件数が少ない今のフェイズに限っては復活させたいということだった。増えてきたら、そういう「どの日記にも含まれているキーワード」は検索語に含まないように調整するとのこと。&lt;/p&gt;

&lt;h2 id=&quot;groonga&quot;&gt;Groongaの類似文書検索&lt;/h2&gt;

&lt;p&gt;類似文書検索を知らない参加者もいたので、まずはその説明から行われた。&lt;/p&gt;

&lt;p&gt;いつものように入力と出力を考えると、入力は（今書いたばかりの）日記で、出力はその日記と似ている日記。こうした入出力を実現するためにシステムはこうなっているとよい。というか、Groongaの類似文書検索はこうなっている。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;1. 入力の文書から特徴となる語（＝特徴語）を抜き出す&lt;/h3&gt;

&lt;p&gt;例えば「私はRubyができます。」という日記を書いたとする。この時、「は」とか「私」とかは、非常に多くの日記にも含まれる。「ぼくはPythonができます。」という日記を誰かが書いていたとしたら、そこにも「は」が含まれる。&lt;/p&gt;

&lt;p&gt;一方で「Ruby」は（Rubyistのための開発日誌サービスでもない限り）あまり出てこない。同様に、別の人の日記の「Python」もあまりなさそう。こうした「他の文書には入っていないけど、この文書（を含む小数の文書）には入っている」という語が、この文書の特徴語になる。&lt;/p&gt;

&lt;h3 id=&quot;or&quot;&gt;2. 特徴語でOR検索する&lt;/h3&gt;

&lt;p&gt;さっきは違うと書いたけど、仮に、「私」と「Ruby」が、先の日記の特徴語だとしよう。似た日記を探す際には、まずその二つの語でOR検索する。すると、今日の日記の特徴語が含まれる記事がヒットする。これは、「特徴」が同じなので、似ていると言えるだろう。&lt;/p&gt;

&lt;p&gt;これで類似文書が選べたことになる。&lt;/p&gt;

&lt;p&gt;但し、特徴語が上手に選ばれていれば、だ。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;特徴語の妥当な抽出方法&lt;/h2&gt;

&lt;p&gt;日記から特徴語を抜き出す時は、日本語として自然な単語やそれに類する物（≒形態素）を抜き出すのがよい。&lt;/p&gt;

&lt;p&gt;何らかの語を抜き出す方法として、文字数を決めて、その文字数単位で切り出すことも出来る。例えば二文字と決めると、「ぼく」「くは」「はP」「Py」「yt」「th」「ho」「on」「nが」「がで」「でき」「きま」「ます」「す。」と14の語（？）を抽出できる。しかし、さっき言ったようにOR検索した時、「『がで』という文字列が含まれている日記はにている」という判断をされても、困ってしまう。&lt;/p&gt;

&lt;p&gt;全文検索ではこうした区切り方（n-gram）もありなのだが、類似文書検索の場合は、形態素による分割一択になる。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;課題の見直し&lt;/h2&gt;

&lt;p&gt;さて、ここで課題に戻ろう。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;おとなり日記の数が少なすぎる（のでサービス内回遊ができない）。&lt;/li&gt;
  &lt;li&gt;それは、特徴語を選ぶ時の基準が厳しくて、検索に使われる特徴語が少ないからのように思われる&lt;/li&gt;
  &lt;li&gt;なので、「私」や「は」といった通常使わないような語も特徴語として類似文書検索に使うようなパラメーター（など何らかの方法）を知りたい&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ということだった。結論は「そのようなパラメーターはない」だった（Mroongaには。Groongaにはある）。&lt;/p&gt;

&lt;p&gt;だが、そもそも、課題は、そういうことではないのでは？　という疑問が呈される。以下「再現率」と「適合率」という言葉を使う。勉強会ではこれらの言葉も説明もあったのだが、実はこの勉強会の2015年11月6日の回でそのことをやっていたので、ここでは端折る。以下の勉強会ページの下に過去の勉強会レポートがまとまっているので、該当日の所を探して読まれたい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://groonga.doorkeeper.jp/events/43780&quot;&gt;https://groonga.doorkeeper.jp/events/43780&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;課題を言い換えると「再現率を増やしたい」ということになる。しかし再現率と適合率はトレードオフの関係にあるので、再現率を増やすと適合率が下がる、つまりノイズが増えて、ユーザーが使わなくなりそうである。&lt;/p&gt;

&lt;p&gt;ただ、そもそも、たくさんヒットした時に、全部見る人はいない（ような文脈が多い）。大体、最初の数件しか見ないので、ヒットする件数が多いか少ないかというよりも、どの日記が上に来ているのか、という方が重要になる。つまり、検索結果のスコアリングが大事だということだ。スコアリングはMroongaで色々と調整できるので、そこで頑張るのがよいということになる。&lt;/p&gt;

&lt;p&gt;また、検索結果の中にユーザーが望む物がなかった時のフォローを入れておくというのも最近よくやられている（らしい）。例えば、今Googleで「ズートピア」を検索すると、ページ下部で次のように関連キーワードが案内される。
&lt;img src=&quot;https://gyazo.com/0fd02873157e651e6fe240e7aad68bf3.png&quot; alt=&quot;「ズートピア」検索結果画面の下部にある関連キーワード&quot; /&gt;&lt;br /&gt;
ページ下部まで見たということは望みの検索結果が得られなかったと判断して、「もしかしてこういう検索をしたかったのでは？」と提案しているわけだ。&lt;/p&gt;

&lt;p&gt;ウェブページの全文検索ではなく、ツイートやチャットだと、新しい方が探したいことが多いだろうから、投稿日時を使ってスコアリングするというのもある。日記にお気に入り機能があれば、お気に入りが多い物のスコアを上げてもいい。&lt;/p&gt;

&lt;p&gt;このように、文書その物以外のメタデータを使って、よりユーザーの望みそうな物に高い検索スコアを与え、上位に表示させるというのが最近のはやりらしい。&lt;/p&gt;

</content>
    <id>https://kitaitimakoto.github.io/apehuci/2016/05/20.html</id>
    <link href="https://kitaitimakoto.github.io/apehuci/2016/05/20.html"
      type="text/html"/>
    <title>Groonga悩み相談「類似文書検索で検索結果が少ないからより多くヒットするようにパラメーター調整したい」</title>
    <updated>2016-05-20T00:00:00Z</updated>
    <dc:date>2016-05-20T00:00:00Z</dc:date>
  </entry>
  <entry>
    <content type="html">&lt;p&gt;本なんて、パンチ穴を開けた紙の束で売ればいいのではないだろうか。&lt;/p&gt;

&lt;p&gt;みんな「マイバインダー」を持って、そこに本を挟むようにすれば、一冊という単位に縛られず、バインダーの厚さが許す限りは、何冊持ち歩いてもよい。仕切りのカードを挟んで、そこから後ろに、お気に入りの本のお気に入りのページを集めた物を常設しておいてもよい。小説のお気に入りの場面、まんがのコマ、詩、ビジネス格言集、参考書のテスト範囲……。&lt;/p&gt;

&lt;p&gt;本屋では、本ごとの専用のバインダーを置いてそこで売る。買う時はレジに運んで、店員が中から紙の束だけ外し、客に渡す。当然、ファンは、タイトルや表紙絵、写真が入ったそのバインダーを欲しがるだろうから、マーチャンダイズとして売ればいい。まんがの原画やアニメのセル画のように、プレミアを付けて、プレゼントにしてもよい（そして転売される）。&lt;/p&gt;

&lt;p&gt;バインダーの方も、専用デザイナーが生まれて気に入った物を買うようになったり、好きな写真家の写真入りにしたり、イラストレーターの一点物を大事にしていたり、iPhoneケースのように方々で作って売られるようになるだろう。&lt;/p&gt;

&lt;p&gt;どうして、こういう形の売り方がされてこなかったのだろうか。&lt;/p&gt;
</content>
    <id>https://kitaitimakoto.github.io/apehuci/2016/05/17.html</id>
    <link href="https://kitaitimakoto.github.io/apehuci/2016/05/17.html"
      type="text/html"/>
    <title>パンチの空いた本</title>
    <updated>2016-05-17T00:00:00Z</updated>
    <dc:date>2016-05-17T00:00:00Z</dc:date>
  </entry>
  <entry>
    <content type="html">&lt;p&gt;ウェブページにアノテーションを付ける時、ページの更新に対してアノテーションの指し示す場所はどうしたらいいのだろうという悩みがある。Robust Linksのやり方と同じにアノテーション作成日時を記録し、その時点でのウェブページをInternet Archive上のページなどとして参照しておけばいいのだと思い至った。そこから、欠けたピースはやはり「DOMの差分計算」になりそうだとも思った。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;アノテーション&lt;/h2&gt;

&lt;p&gt;ウェブページのある部分を大事だと思ってハイライトしたり、そこに自分の疑問点や思い付きを書き込んでおきたいことがある。前者は栞として後で参照するのに使ったり、はてなスターのように（はてなスターを使ったことがないので推測だ）「いいことを書いてあると思う」ということを書いた人、そのページを読む人に伝えるために使ったりする。後者はあまり見ないかも知れないが、例えばはてなブックマークはページ全体に対するコメントと見做せるだろう。「&lt;a href=&quot;../04/10.html&quot;&gt;日記のコメント用にHypothes.isを埋め込んでみた&lt;/a&gt;」に書いたようなまさにそのためのツールもあるにはある。ウェブページを離れれば、Kindleで日々やっていることとして想像しやすい人も多いと思う。&lt;/p&gt;

&lt;p&gt;この二つを「アノテーション（注釈）」と定義して、その（プログラムで扱うための）表現方法ややり取りのためのプロトコルを、W3Cがワーキンググループを立ち上げて策定している（&lt;a href=&quot;https://www.w3.org/annotation/&quot;&gt;W3C Web Annotation Working Group&lt;/a&gt;。&lt;a href=&quot;https://twitter.com/kzakza&quot;&gt;kzakza&lt;/a&gt;さんの&lt;a href=&quot;http://code.kzakza.com/2014/08/w3c-web-annotation-working-group/&quot;&gt;W3C Web Annotation Working Group 紹介&lt;/a&gt;も読まれたい）。これをWeb Annotationと呼ぶ（これ、とか言ったが、どこのことを呼ぶんだかはっきりとは考えていない）。策定中でまだ変わるだろうし、本題でもないので詳細は気にしないでいいのだが、JSON（JSON-LD）でこのように書く（フォーマットを定めた&lt;a href=&quot;https://www.w3.org/TR/annotation-model/&quot;&gt;Web Annotation Data Model&lt;/a&gt;仕様の&lt;a href=&quot;https://www.w3.org/TR/annotation-model/#complete-example&quot;&gt;Complete Example&lt;/a&gt;から抜粋）。&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Annotation&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;motivation&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;commenting&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;created&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2015-10-13T13:00:00Z&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;generated&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2015-10-14T15:13:28Z&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;TextualBody&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;role&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tagging&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;love&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Choice&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;members&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;TextualBody&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;role&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;describing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;I really love this particular bit of text in this XML. No really.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;format&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;text/plain&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;language&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;creator&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://example.org/user1&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;target&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;SpecificResource&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;source&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://example.com/document1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;selector&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;List&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;members&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;FragmentSelector&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;xpointer(/doc/body/section[2]/para[1])&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;何となく分かると思う。「http://example.com/document1のページの&lt;code class=&quot;highlighter-rouge&quot;&gt;/doc/body/section[2]/para[1]&lt;/code&gt;というXPointerで表現されるパラグラフ（サンプルがHTMLだったらもっと都合がよかった……。その場合はCSSセレクターを使うことになるだろう）に対して、『I really love this particular bit of text in this XML. No really.』というコメントを付けている」ことになる。&lt;/p&gt;

&lt;p&gt;さて、当然の悩みとして、「http://example.com/document1が更新されて、コメントの対象が無くなってしまったら、または内容が変わってしまったらどうなるのだろう」というのが生まれる（Kindleはどうなるんだっけ？　全部消える？）。&lt;/p&gt;

&lt;p&gt;解決として、Robust Linksと同じ方法を取るのはどうか、と思い至った。&lt;/p&gt;

&lt;h2 id=&quot;robust-links&quot;&gt;Robust Links&lt;/h2&gt;

&lt;p&gt;ウェブページはどれも、内容が変わり得るし、無くなってしまうことだってある。こういう性質を持つ、もっと言うとより「強く」持つ物を、僕等はよく知っている。コードだ。日記でソースコードリーディングや実装解説をしていてGitHub上のソースコードの特定の行へのリンクを張る時、&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;ブランチのURLを使ったりはしない。「その時点でのコミット」を指す、ハッシュダイジェスト入りのURLを使う。&lt;/p&gt;

&lt;p&gt;Robust Link（安定したリンク）はこのアイディアをどのページヘのリンクにも適用したようなものだ。普段使う&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;a&amp;gt;&lt;/code&gt;要素を強化して、リンク切れに強くする。そのアイディアはおおよそ次の通り。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;普通の方法で&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;a&amp;gt;&lt;/code&gt;要素を使ってリンクを作る（&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;a href=&quot;https://github.com/mementoweb/robustlinks&quot;&amp;gt;mementoweb/robustlinks&amp;lt;/a&amp;gt;&lt;/code&gt;）&lt;/li&gt;
  &lt;li&gt;その時点でのスナップショットへのURLを、&lt;code class=&quot;highlighter-rouge&quot;&gt;data-versionurl&lt;/code&gt;属性として付加する（&lt;code class=&quot;highlighter-rouge&quot;&gt;data-versionurl=&quot;https://github.com/mementoweb/robustlinks/commit/314640710584fcf91b0af64112714edd9ca4cb32&quot;&lt;/code&gt;）&lt;/li&gt;
  &lt;li&gt;リンクを作成した日を、&lt;code class=&quot;highlighter-rouge&quot;&gt;data-versiondate&lt;/code&gt;属性として付加する（&lt;code class=&quot;highlighter-rouge&quot;&gt;data-versiondate=&quot;2016-05-11&quot;&lt;/code&gt;）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;結果こうなる：&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://github.com/mementoweb/robustlinks&quot;&lt;/span&gt;
   &lt;span class=&quot;na&quot;&gt;data-versionurl=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://github.com/mementoweb/robustlinks/commit/314640710584fcf91b0af64112714edd9ca4cb32&quot;&lt;/span&gt;
   &lt;span class=&quot;na&quot;&gt;data-versiondate=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2016-05-11&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;mementoweb/robustlinks&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;これによって「このリンクは2016年5月11日に作られたmemento/robustlinksへのリンクで、その時点でのこのページ（リポジトリー）は&lt;code class=&quot;highlighter-rouge&quot;&gt;https://github.com/mementoweb/robustlinks/commit/314640710584fcf91b0af64112714edd9ca4cb32&lt;/code&gt;を見れば再現できる」と見做すのだ。（細かくは色々あるので、プロジェクトのサイトを参照されたい、特に「こんな面倒なマークアップをしないといけないなんて、正気か？」と感じた人：&lt;a href=&quot;http://robustlinks.mementoweb.org/&quot;&gt;Robust Links&lt;/a&gt;）。実際これで問題はなくて、この例のようにGitHubであれば僕達には馴染み深いし、そうでなくても&lt;a href=&quot;https://archive.org/index.php&quot;&gt;Internet Archve&lt;/a&gt;のようなアーカイブサイト（魚拓サイト？）をポイントしておけば、（理想的には）リンク時点の物を再現できる。記事内に作ったリンクがある時切れてしまっても、これによって記事執筆時点でのリンク先を見て、記事内容を理解することができるわけだ（そして、そういうリンクを追加するJavaScriptライブラリーをRobust Linksプロジェクトは提供している）。&lt;/p&gt;

&lt;h2 id=&quot;robust-annotation&quot;&gt;Robust Annotation&lt;/h2&gt;

&lt;p&gt;この方法、アノテーションにも応用できることは、ここまで読めば、すぐに分かるだろう。「アノテーションの対象を示す物」はリンクに他ならない。さっきのWeb Annotationのサンプルの&lt;code class=&quot;highlighter-rouge&quot;&gt;target&lt;/code&gt;オブジェクトに注目し、例えば次のように&lt;code class=&quot;highlighter-rouge&quot;&gt;versionurl&lt;/code&gt;プロパティを足してやればよい。&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;created&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2015-10-13T13:00:00Z&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;generated&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2015-10-14T15:13:28Z&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;target&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;SpecificResource&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;source&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://example.com/document1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;versionurl&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://web.archive.org/web/20151001135202/http://example.com/document1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;selector&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;List&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;members&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;FragmentSelector&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;xpointer(/doc/body/section[2]/para[1])&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;これで、「たとえ対象ページが大きく変更されていても、少なくとも2015年10月13日時点でのhttp://example.com/document1に対するコメントとしては意味を理解できる」ということになる。元々Web Annotation Data Modelで&lt;code class=&quot;highlighter-rouge&quot;&gt;created&lt;/code&gt;や&lt;code class=&quot;highlighter-rouge&quot;&gt;generated&lt;/code&gt;、サンプルにはないが&lt;code class=&quot;highlighter-rouge&quot;&gt;modified&lt;/code&gt;が定義されているので、Robust Linksの&lt;code class=&quot;highlighter-rouge&quot;&gt;data-versiondate&lt;/code&gt;に相当する物は追加しなくてもよい。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;アノテーションの更新&lt;/h2&gt;

&lt;p&gt;なるほど「古い」アノテーションを、コンテクスト込みで理解できるようになった。だがこれが嬉しいのは、そのページのコンテンツに深い興味を持っている人と、そのページを取り巻く環境に興味を持っている人くらいなのではないかと思う。言い方を変えると、大多数のライトな読者は、そんな「ちょっとした違い」でしかないところまで探求しないだろうと思う。それより、最新のページを見ている時に、古いバージョンへのアノテーションも含めた色々なアノテーションが見られたほうが楽しくはないだろうか。それを実現するにはどうしたらいいだろうか。&lt;/p&gt;

&lt;p&gt;まず、最新のページに、全てのアノテーションを表示すること。これは、当然ながら、記事の一部が削除されたり、追加されてアノテーションしていた部分の位置が変わった時に対応できない。&lt;/p&gt;

&lt;p&gt;全てのアノテーションについて、それが指し示している「バージョン」を調べ、各バージョンのウェブページを集める。それぞれについて、最新のページとの差分を求める。その差分によって、アノテーションの対象が消えているか、場所が移動しているか、内容が変更されているかを判断できれば、いいはずだ。変更については意味の理解も必要だから簡単にはいかないが、削除と位置変更くらいなら簡単なはずだ（もちろん、前後の文脈を視野に入れたアノテーションであれば、離れたパラグラフの削除などのせいで意味を持たなくなることはあるが）。&lt;/p&gt;

&lt;p&gt;例を出そう。こんなHTML断片があったとする。バージョン1と呼ぼう。&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&amp;lt;span&amp;gt;&lt;/span&gt;こんにちは。&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&amp;lt;span&amp;gt;&lt;/span&gt;お元気ですか。&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&amp;lt;span&amp;gt;&lt;/span&gt;わたしは元気です。&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;これに対して、こんな三つのアノテーションがあったとする（Web Annotation Data Modelの記法ではなく、CSSセレクターと日本語のかぎかっこを使う）。&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;アノテーション1&lt;/dt&gt;
  &lt;dd&gt;バージョン1の&lt;code class=&quot;highlighter-rouge&quot;&gt;*:nth-child(n) &amp;gt; *:nth-child(1)&lt;/code&gt;（&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;span&amp;gt;こんにちは。&amp;lt;/span&amp;gt;&lt;/code&gt;）に対して「普通の挨拶」というコメント&lt;/dd&gt;
  &lt;dt&gt;アノテーション2&lt;/dt&gt;
  &lt;dd&gt;バージョン1の&lt;code class=&quot;highlighter-rouge&quot;&gt;*:nth-child(n) &amp;gt; *:nth-child(2)&lt;/code&gt;（&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;span&amp;gt;お元気ですか。&amp;lt;/span&amp;gt;&lt;/code&gt;）に対して「珍しい挨拶」というコメント&lt;/dd&gt;
  &lt;dt&gt;アノテーション3&lt;/dt&gt;
  &lt;dd&gt;バージョン1の&lt;code class=&quot;highlighter-rouge&quot;&gt;*:nth-child(n) &amp;gt; *:nth-child(3)&lt;/code&gt;（&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;span&amp;gt;わたしは元気です。&amp;lt;/span&amp;gt;&lt;/code&gt;）に対して「つまらない挨拶」というコメント&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;このページは何か理由があって編集され、こんなバージョン2になったとする。&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&amp;lt;span&amp;gt;&lt;/span&gt;お元気ですか。&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&amp;lt;span&amp;gt;&lt;/span&gt;わたしは元気です。&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;「こんにちは。」は平凡すぎて恥ずかしくなったのかも知れない。それはさておき、先の二つのアノテーションは &lt;strong&gt;バージョン1に対する物&lt;/strong&gt; なので、最新であるバージョン2のどこに対してコメントしているかは自明ではない。もし何も処理をせず、そのままバージョン2に対する物として適用してしまうと、&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;span&amp;gt;お元気ですか。&amp;lt;/span&amp;gt;&lt;/code&gt;に対して、「普通の挨拶」というコメントが表示されてしまう。「珍しい挨拶」としてコメントしたはずなのに。明らかに、アノテーション作成者の意図を捻じ曲げてしまっている。&lt;/p&gt;

&lt;p&gt;これを是正するためには、何らかの処理を施して次のようになってほしい（名前にプライム記号「′」を付けた）。&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;アノテーション1′&lt;/dt&gt;
  &lt;dd&gt;（なし）&lt;/dd&gt;
  &lt;dt&gt;アノテーション2′&lt;/dt&gt;
  &lt;dd&gt;バージョン2の&lt;code class=&quot;highlighter-rouge&quot;&gt;*:nth-child(n) &amp;gt; *:nth-child(1)&lt;/code&gt;に対して「珍しい挨拶」というコメント&lt;/dd&gt;
  &lt;dt&gt;アノテーション3′&lt;/dt&gt;
  &lt;dd&gt;バージョン2の&lt;code class=&quot;highlighter-rouge&quot;&gt;*:nth-child(n) &amp;gt; *:nth-child(2)&lt;/code&gt;に対して「つまらない挨拶」というコメント&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nth-child(2)&lt;/code&gt;だった所が&lt;code class=&quot;highlighter-rouge&quot;&gt;nth-child(1)&lt;/code&gt;に、&lt;code class=&quot;highlighter-rouge&quot;&gt;nth-child(3)&lt;/code&gt;だった所が&lt;code class=&quot;highlighter-rouge&quot;&gt;nth-child(2)&lt;/code&gt;に変わっている。&lt;/p&gt;

&lt;p&gt;これを実現するためには何が分かるといいだろうか。「&lt;code class=&quot;highlighter-rouge&quot;&gt;*:nth-child(n)&lt;/code&gt;（&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;p&amp;gt;&lt;/code&gt;要素）の&lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;番目の子要素が無くなった」ということが分かればいいはずだ。すると、&lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;番目より後だった要素の&lt;code class=&quot;highlighter-rouge&quot;&gt;nth-child()&lt;/code&gt;の中を一つ減らせばいいということが分かる。単純な引き算だ。&lt;/p&gt;

&lt;p&gt;ではそうしたHTMLの変更をどうやって知ればいいだろうか。二つあると思う。&lt;/p&gt;

&lt;p&gt;一つは、HTMLを編集する時に、同時にこうした「どのような操作か」という情報も作り出すこと。テキストエディターのようにユーザーが直接（？）テキストを編集してしまうタイプのアプリケーションでは無理そうだが、ユーザーの操作と結果の生成の間にギャップが大きくて、何らかのフックを掛けやすそうなWYSIWYGエディターではそれが可能かも知れない。&lt;/p&gt;

&lt;p&gt;もう一つは、二つのHTMLを比べて「差分」を抽出すること。テキストファイルに対する&lt;code class=&quot;highlighter-rouge&quot;&gt;diff&lt;/code&gt;コマンドのような物だ。ここではHTMLなので、DOMツリーの差分ということになる。僕はこちらに期待している。&lt;/p&gt;

&lt;p&gt;というわけで、「バージョン」間のDOMツリーの差分を計算することができれば、古めのアノテーションのうち、最新版でも有効なものを（ある程度）抽出して適用させることができる、つまり対象ページの履歴を見るだけで「アノテーションの更新」を実現できるのではないか、と思っているわけだ。&lt;/p&gt;

&lt;p&gt;実はこの話は前にもしたことがあって、「&lt;a href=&quot;../01/02.html&quot;&gt;EPUB書籍に正誤表を反映する（Rubyスクリプトで）、またはEPUBのパッチプログラムの試み&lt;/a&gt;」の「追記」に言及がある。また、こうした関心とは無関係に、フロントエンドエンジニアの&lt;a href=&quot;https://twitter.com/kitak&quot;&gt;@kitak&lt;/a&gt;さんから「アプリケーション開発やデバッグの簡単のためにDOMツリーの差分を表示するツールが欲しい」という声を聞いたこともあって、今、DOMツリーの差分計算は、結構、ニーズがあるのではないかと思っている。&lt;/p&gt;

&lt;p&gt;なお、補足だが、アノテーションを必ずCSSセレクターなどのDOM構造を前提とした方法で行わなければいけないわけではない。Web Annotation Data Modelでも、「先頭から何文字目か」でアノテーションを付ける方法も提供している。しかし、そうした「位置情報」を使っている時に、場所の移動を計算するのは、HTMLの場合はだいぶ大変だと思う。&lt;/p&gt;

</content>
    <id>https://kitaitimakoto.github.io/apehuci/2016/05/11.html</id>
    <link href="https://kitaitimakoto.github.io/apehuci/2016/05/11.html"
      type="text/html"/>
    <title>Robust Annotation（安定したアノテーション）</title>
    <updated>2016-05-11T00:00:00Z</updated>
    <dc:date>2016-05-11T00:00:00Z</dc:date>
  </entry>
  <entry>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://sendagayarb.doorkeeper.jp/events/44607&quot;&gt;Sendagaya.rb #148&lt;/a&gt;@&lt;a href=&quot;http://www.lanches.co.jp/&quot;&gt;株式会社ランチェスター&lt;/a&gt;に参加して来た。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;02.html&quot;&gt;先週&lt;/a&gt;同様、前半は&lt;a href=&quot;http://railsguides.jp/security.html&quot;&gt;Rails セキュリティガイド&lt;/a&gt;の&lt;a href=&quot;http://railsguides.jp/security.html#%E3%83%AA%E3%83%80%E3%82%A4%E3%83%AC%E3%82%AF%E3%83%88%E3%81%A8%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB&quot;&gt;4 リダイレクトとファイル&lt;/a&gt;、後半は&lt;a href=&quot;https://www.oreilly.co.jp/books/9784873117430/&quot;&gt;メタプログラミングRuby&lt;/a&gt;の「4.5.3　Methodオブジェクト」を読んだ。&lt;/p&gt;

&lt;p&gt;「お酒は九時になってから」という謎ルールのもと、おもむろに持ち込んでいた（！）ビールを開け始めるメンバーに混じって（僕はお酒を飲めない）、pryで遊びながら&lt;a href=&quot;http://docs.ruby-lang.org/ja/2.3.0/class/Method.html&quot;&gt;Method&lt;/a&gt;や&lt;a href=&quot;http://docs.ruby-lang.org/ja/2.3.0/class/UnboundMethod.html&quot;&gt;UnboundMethod&lt;/a&gt;の理解を深めた。&lt;code class=&quot;highlighter-rouge&quot;&gt;include&lt;/code&gt;によって生えたメソッドを無効化して、元の（より親側のクラスの）メソッドに戻す、というのの実装が激しかった。&lt;/p&gt;

&lt;p&gt;次回は#149、ではなくて、特別編らしい：&lt;a href=&quot;https://sendagayarb.doorkeeper.jp/events/44390&quot;&gt;Sendagaya.rb #川村さんを囲む会&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;たぶんRubyとか関係ない。&lt;/p&gt;

</content>
    <id>https://kitaitimakoto.github.io/apehuci/2016/05/09.html</id>
    <link href="https://kitaitimakoto.github.io/apehuci/2016/05/09.html"
      type="text/html"/>
    <title>Sendagaya.rb #148</title>
    <updated>2016-05-09T00:00:00Z</updated>
    <dc:date>2016-05-09T00:00:00Z</dc:date>
  </entry>
  <entry>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://sendagayarb.doorkeeper.jp/events/44004&quot;&gt;Sendagaya.rb #147&lt;/a&gt;@&lt;a href=&quot;http://www.lanches.co.jp/&quot;&gt;株式会社ランチェスター&lt;/a&gt;に参加して来た。&lt;/p&gt;

&lt;p&gt;前半、&lt;a href=&quot;http://railsguides.jp/security.html&quot;&gt;Rails セキュリティガイド&lt;/a&gt;の&lt;a href=&quot;http://railsguides.jp/security.html#%E3%82%AF%E3%83%AD%E3%82%B9%E3%82%B5%E3%82%A4%E3%83%88%E3%83%AA%E3%82%AF%E3%82%A8%E3%82%B9%E3%83%88%E3%83%95%E3%82%A9%E3%83%BC%E3%82%B8%E3%82%A7%E3%83%AA-csrf&quot;&gt;3 クロスサイトリクエストフォージェリ (CSRF)&lt;/a&gt;の所を読んだ。話している中で出て来て知ったのけど「Railsゆとり」っていい言葉だな。&lt;/p&gt;

&lt;p&gt;後半は&lt;a href=&quot;https://www.oreilly.co.jp/books/9784873117430/&quot;&gt;メタプログラミングRuby&lt;/a&gt;のブロックの所を読んだ。Procとlambdaの違いなどをやった。&lt;/p&gt;

&lt;p&gt;次回もこの二本立ての予定とのこと。参加申込はこちら：&lt;a href=&quot;https://sendagayarb.doorkeeper.jp/events/44607&quot;&gt;Sendagaya.rb #148&lt;/a&gt;&lt;/p&gt;

</content>
    <id>https://kitaitimakoto.github.io/apehuci/2016/05/02.html</id>
    <link href="https://kitaitimakoto.github.io/apehuci/2016/05/02.html"
      type="text/html"/>
    <title>Sendagaya.rb #147</title>
    <updated>2016-05-02T00:00:00Z</updated>
    <dc:date>2016-05-02T00:00:00Z</dc:date>
  </entry>
  <entry>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://groonga.doorkeeper.jp/events/44055&quot;&gt;Groonga新リリース自慢会 6.0.2&lt;/a&gt;@&lt;a href=&quot;https://crowdworks.co.jp/&quot;&gt;クラウドワークス&lt;/a&gt;に参加して来た。&lt;/p&gt;

&lt;p&gt;Groongaは毎月29日に新バージョンをリリースしているので、今日は一足早いお披露目ということになる。主な変更点は次のページにまとまっている：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://groonga.org/ja/blog/2016/04/29/groonga-6.0.2.html&quot;&gt;Groonga 6.0.2リリース&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;主に&lt;a href=&quot;http://twitter.com/ktou&quot;&gt;@ktou&lt;/a&gt;さんが自慢していってくれたのだけど、追加や修正されたうち&lt;a href=&quot;http://blog.createfield.com/&quot;&gt;naoa_y&lt;/a&gt;さんが実装した物も多かったようで、一緒に参加していたnaoa_yさんに自慢してもらった物も結構あった。今回の個人的な目玉はそのうちの多段ドリルダウンだった。自ら詳しい紹介を書いているのでそちらを参照されたい：&lt;a href=&quot;http://blog.createfield.com/entry/2016/04/27/200305&quot;&gt;Groonga 6.0.2から多段ドリルダウンが利用可能に&lt;/a&gt;。naoa_yさんはユーザーにとってキャッチーな新機能を実装してくれることが多くありがたいことだ。&lt;/p&gt;

&lt;p&gt;もう一つの個人的な目玉は、PGroongaの各種機能追加だ：&lt;a href=&quot;https://pgroonga.github.io/ja/news/#version-1-0-7&quot;&gt;1.0.7: 2016-04-24&lt;/a&gt;。PGroongaは使っていないけど個人的にこの機能は欲しくて、GitHubでイシューを上げていたりする： &lt;a href=&quot;https://github.com/groonga/groonga/issues/437&quot;&gt;[RFC]API to retrieve query position in document #437&lt;/a&gt;。早くGroonga（と言うかgroonga-httpd）にも入ってほしい。&lt;/p&gt;

</content>
    <id>https://kitaitimakoto.github.io/apehuci/2016/04/27.html</id>
    <link href="https://kitaitimakoto.github.io/apehuci/2016/04/27.html"
      type="text/html"/>
    <title>Groonga新リリース自慢会 6.0.2</title>
    <updated>2016-04-27T00:00:00Z</updated>
    <dc:date>2016-04-27T00:00:00Z</dc:date>
  </entry>
  <entry>
    <content type="html">&lt;p&gt;&lt;img alt=&quot;Hypothes.isのバー&quot; src=&quot;https://gyazo.com/c2c66762e491d0a02b466706f561d83d.png&quot; style=&quot;float: right; margin-left: 1em; margin-bottom: 1em;&quot; /&gt;
この日記は自分が読んでいて邪魔だなと感じる物はなるべく置かないようにしていて、ツイートとかシェアとかのボタンがないのはそのため。コメントについてはずっと迷っていたけど、まあ、置いてみようかということにした。静的サイトジェネレーターと組み合わせるコメントソリューションとしては&lt;a href=&quot;https://gyazo.com/c2c66762e491d0a02b466706f561d83d&quot;&gt;DISQUS&lt;/a&gt;がデファクトスタンダード（ドファクトスタンダール？）だと思うけど、気になっていた&lt;a href=&quot;https://hypothes.is/&quot;&gt;Hypothes.is&lt;/a&gt;を試すことにした。ページ右端に見えているエリアがそれだ。タイトルを隠してしまったりして「邪魔」なのは間違いないのだけど好奇心が勝ってしまった。タイトルの位置は後で調整する（かも）。&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;記事中の文章を選択するとアノテーションとハイライトのアイコンが現れる。&quot; src=&quot;https://gyazo.com/a32998784be0efafe88123489493fe23.png&quot; style=&quot;float: left; height: 4em; margin-right: 1em; margin-bottom: 1em;&quot; /&gt;
記事の適当な所を選択するとAnnotateとHighlightのアイコンが出てきて、コメントを付けたりハイライトしたりできる。他人が付けたコメントについては、右端のバーを引っ張りだすことで見られる（コメントを残す時に、ここに現れてもよいかどうかを選べる）。&lt;/p&gt;

&lt;p&gt;Hypothes.isはウェブページなどにアノテーションを付けられるようにしようというプロジェクトで、そのための埋め込みJavaScriptコードやChrome拡張なんかを作っている。アノテーションというのは、ページの全体や一部分をハイライトしたり、コメントを付けたりすること。はてなスターとかはてブみたいなイメージ。W3Cが&lt;a href=&quot;https://www.w3.org/annotation/&quot;&gt;Web Annotation&lt;/a&gt;としてこうしたニーズのための仕様を策定中だったりする（Hypothes.isがWeb Annotationに従っているかは分からない。その前身のOpen Annotationに従ってはいたと思うので、プランとして追従するつもりはあるんだと思う）。アノテーションについては&lt;a href=&quot;http://code.kzakza.com/&quot;&gt;かざかざ&lt;/a&gt;さんの素晴らしい記事を参照されたい。リンク先末尾の「関連エントリ」もぜひ辿ってほしい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://code.kzakza.com/2013/08/open-annotation_data_model/&quot;&gt;日本よっ！これがOpen Annotationだっ！！&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ウェブページごと（URIごと）にフィードを吐いているので、このページに付けられたコメント一覧」みたいな物をページ末尾に付けたりすることはできるので、後でちょっとやってみようと思う（邪魔だったら公開しない）。&lt;/p&gt;

&lt;p&gt;しかしまあ、Hypothes.isへの登録が必要なところとか、そもそもこの日記でコメントを残したいのかとか、使われるか不安はあるが、まあ、いいか。&lt;/p&gt;

</content>
    <id>https://kitaitimakoto.github.io/apehuci/2016/04/10.html</id>
    <link href="https://kitaitimakoto.github.io/apehuci/2016/04/10.html"
      type="text/html"/>
    <title>日記のコメント用にHypothes.isを埋め込んでみた</title>
    <updated>2016-04-10T00:00:00Z</updated>
    <dc:date>2016-04-10T00:00:00Z</dc:date>
  </entry>
  <entry>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://groonga.doorkeeper.jp/events/41015&quot;&gt;Groongaで学ぶ全文検索 2016-03-25&lt;/a&gt;に行って来た。&lt;/p&gt;

&lt;p&gt;今日は、仕事でPDFを全文検索できるようにしたいから話を聞きに来たという参加者がいたので、PDFを全文検索できるよう、Groongaのデータベースを作るまでをその場でやった。&lt;/p&gt;

&lt;p&gt;まず、PDFを全文検索するために必要なことの概要を説明した。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;全文検索できるようにするまでの概要&lt;/h2&gt;

&lt;p&gt;PDFを全文検索するには&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;全文検索できるようにするための準備（データベースの構築）&lt;/li&gt;
  &lt;li&gt;データベースを使って全文検索をする&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;という二段階が必要になる。&lt;/p&gt;

&lt;p&gt;準備は、&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;PDFからテキストを抜き出す&lt;/li&gt;
  &lt;li&gt;テキストをGroongaに突っ込む&lt;/li&gt;
  &lt;li&gt;Groongaが（勝手に）インデックスを作る&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;という手順に分解できる。ここのところ僕が説明したのだけど、「テキストをGroongaに突っ込む」のところ、「どのような形で」というのが抜けていて、そこがぴんとこなかったようだ。あとで&lt;a href=&quot;https://twitter.com/ktou&quot;&gt;@ktou&lt;/a&gt;さんとの質疑応答で「&lt;strong&gt;PDFのパスとかのメタデータと一緒に&lt;/strong&gt;（JSONとかのフォーマットにして）突っ込む」と言ったところでぴんときたようだった。&lt;/p&gt;

&lt;p&gt;手順に戻って、全文検索の実行のところ。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;検索語をGroongaに与える&lt;/li&gt;
  &lt;li&gt;Groongaがその語を含むPDFのパス（とか、ページ番号とかの付随的な物）を返す&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ということになる。&lt;/p&gt;

&lt;h2 id=&quot;pdf&quot;&gt;PDFを全文検索できるようにする&lt;/h2&gt;

&lt;p&gt;ここまで説明した所で、手元のPDFファイルを使って実際にデータベースの作成から検索してみるまでを@ktouさんがやって見せてくれた。時間も限られているので、「本文に関する検索をして、そのPDFのパスが得られるようにする」というのを目標にした。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;1. テーブルを作る&lt;/h3&gt;

&lt;p&gt;コマンドラインでテーブルを作る（暗黙に、Groongaはテーブルの形でデータを表現しているということになる）。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;table_create pdfs \
  TABLE_HASH_KEY \
  ShortText
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ShortText&lt;/code&gt;のところは、ハッシュテーブルのキーの型を決めている。&lt;/p&gt;

&lt;p&gt;こんなファイルを作って、&lt;code class=&quot;highlighter-rouge&quot;&gt;groonga&lt;/code&gt;コマンドに入力すると、&lt;code class=&quot;highlighter-rouge&quot;&gt;pdfs&lt;/code&gt;テーブルが出来る。&lt;/p&gt;

&lt;p&gt;まずデータベース（ファイル）を作る。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;% groonga -n /tmp/grn
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;次にファイルに書いたコマンドを読み込ませる。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;% groonga /tmp/grn &amp;lt; /tmp/table-create.grn
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;これでテーブルが出来る。ただ、今はハッシュテーブルのキーのところにしかデータが保存できないので、PDF本文を保存する場所をこのテーブルのカラムとして作る。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;column_create pdfs body \
  COLUMN_SCALAR \
  Text
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;COLUMN_SCALAR&lt;/code&gt;の所は&lt;code class=&quot;highlighter-rouge&quot;&gt;COLUMN_SCALAR&lt;/code&gt;か&lt;code class=&quot;highlighter-rouge&quot;&gt;COLUMN_VECTOR&lt;/code&gt;かが選べて、このカラムに入るのが分割できない単位なのか、配列のようにその単位を複合させた物なのかで選ぶ。今回は、一つのキー（PDFファイルのパス）に複数の本文が入ることはないので、スカラーにしている。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;データを入れる&lt;/h3&gt;

&lt;p&gt;で、実際にデータを入れる。&lt;/p&gt;

&lt;p&gt;その前に、PDFからテキストの形式にしないといけない。更に、Groongaは（コマンドでは）JSONフォーマットでデータを入力するので、データを加工しなければならない。&lt;/p&gt;

&lt;p&gt;ここでは、&lt;a href=&quot;https://poppler.freedesktop.org/&quot;&gt;Poppler&lt;/a&gt;付属の&lt;code class=&quot;highlighter-rouge&quot;&gt;pdftotext&lt;/code&gt;コマンドで抽出したテキストをファイルに保存して、それを使ってRubyで、ファイルのパス情報と一緒にJSONにしていた。本題ではないので割愛。以下のようなファイルをRubyで作って、&lt;code class=&quot;highlighter-rouge&quot;&gt;groonga&lt;/code&gt;コマンドに読み込ませる。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;load --table pdfs
[
  {
    &quot;_key&quot;: &quot;path/to/pdf&quot;
    &quot;body&quot;: &quot;でかい本文&quot;
  }
]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-3&quot;&gt;インデックス無しでの検索&lt;/h3&gt;

&lt;p&gt;Groongaはインデックスを作らないでも検索できる。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;select --table pdfs \
  --query body:@API
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@API&lt;/code&gt;の所が、（その前にある&lt;code class=&quot;highlighter-rouge&quot;&gt;body&lt;/code&gt;カラムに対して）&lt;code class=&quot;highlighter-rouge&quot;&gt;API&lt;/code&gt;で検索する、という指定になっている。インデックスが無い時は、ただの線形検索になる。@ktouさんの手元のPDF、手元のGroongaで試したところ、この検索には60ミリ秒くらい掛かった。インデックスを作って使うとこれより速いはずなので後で試してみる。&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;インデックスを作る&lt;/h3&gt;

&lt;p&gt;RDBMSでは、インデックスを張るには単に張りたいカラムを指定すればよかったが、Groongaではより検索方法に合わせた柔軟なインデックスが作れるように、色々パラーターを指定しながら自分でインデックスを作る。そのインデックスは、上でやったようなテーブルとして作る。&lt;/p&gt;

&lt;p&gt;が、初めての時などはおすすめの設定があるので取り敢えずテンプレとしてそれを使えばよい。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;table_create terms \
  TABLE_PAT_KEY \
  ShortText \
  --default_tokenizer TokenBigram \
  --normalzer NormalizarAuto
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;全文検索する時は、（&lt;code class=&quot;highlighter-rouge&quot;&gt;pdfs&lt;/code&gt;テーブルでハッシュテーブルにしていたところに相当するところが）パトリシアトライというのがおすすめなので、&lt;code class=&quot;highlighter-rouge&quot;&gt;TABLE_PAT_KEY&lt;/code&gt;と書く。これはこのまま使っておけばよい。「&lt;code class=&quot;highlighter-rouge&quot;&gt;terms&lt;/code&gt;」というのがテーブル名なので、ここだけ気分によって変えればよい。&lt;/p&gt;

&lt;p&gt;次はカラム。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;column_create terms body_index \
  COLUMN_INDEX|WITH_POSITION \
  pdfs \
  body
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;これもテンプレで、「&lt;code class=&quot;highlighter-rouge&quot;&gt;body_index&lt;/code&gt;」は変えてよい。名前から想像付くように、&lt;code class=&quot;highlighter-rouge&quot;&gt;pdfs&lt;/code&gt;テーブルの&lt;code class=&quot;highlighter-rouge&quot;&gt;body&lt;/code&gt;カラムのためのインデックスだからこの名前になっている。分かりやすいのがいいだろう。「&lt;code class=&quot;highlighter-rouge&quot;&gt;pdfs&lt;/code&gt;」は、&lt;code class=&quot;highlighter-rouge&quot;&gt;pdfs&lt;/code&gt;テーブルに対するインデックスということを意味し、「&lt;code class=&quot;highlighter-rouge&quot;&gt;body&lt;/code&gt;」はその中の&lt;code class=&quot;highlighter-rouge&quot;&gt;body&lt;/code&gt;カラムへのインデックスだということをGroongaに教えている。&lt;/p&gt;

&lt;p&gt;これでさっきのように&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;select --table pdfs \
  --query body:@API
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;すると、今度は0.2ミリ秒程度で検索結果が返って来た。二桁の差が付いたことになる（PDF結構でかくて、1MiBくらいあった）。&lt;/p&gt;

&lt;p&gt;あとは、アプリケーションの要件に合わせてウェブUIを付けたりすると出来上がりだ。&lt;/p&gt;

&lt;p&gt;参考までに既にGroongaを使ったPDF検索アプリケーションとして&lt;a href=&quot;http://honyomi.nagoya/ja/&quot;&gt;honyomi&lt;/a&gt;があって、検索結果からそのまま読み始めたりできるので便利。&lt;/p&gt;

</content>
    <id>https://kitaitimakoto.github.io/apehuci/2016/03/25.html</id>
    <link href="https://kitaitimakoto.github.io/apehuci/2016/03/25.html"
      type="text/html"/>
    <title>取り敢えずPDFを全文検索するシステムのための最少ステップ</title>
    <updated>2016-03-25T00:00:00Z</updated>
    <dc:date>2016-03-25T00:00:00Z</dc:date>
  </entry>
  <entry>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://shibuyarb.doorkeeper.jp/events/40976&quot;&gt;渋谷.rb[:20160316]&lt;/a&gt;@&lt;a href=&quot;https://pixta.co.jp/&quot;&gt;ピクスタ株式会社&lt;/a&gt;に行って来た。道に迷って三十分遅刻して、着いたらちょうど自己紹介が終わるところだった。ある意味ちょうどいい。&lt;/p&gt;

&lt;p&gt;今日は特に誰かが発表することはなく、各々話をしたりもくもくしたりしていた。僕もRailsまだかなあとかGoとかフレームワークとかの話に混ぜてもらいつつ、&lt;a href=&quot;https://github.com/rails/rails/tree/master/actioncable&quot;&gt;Action Cable&lt;/a&gt;を試すために&lt;code class=&quot;highlighter-rouge&quot;&gt;rails new&lt;/code&gt;していた。&lt;/p&gt;

&lt;p&gt;READMEに従ってコーディングしていたけどいつまで経ってもプロセスを起動する所に辿り着かなくておかしいなあと思って、「今（Rails 5 Beta 3）のAction Cableの入門に一番いいのって何なんですかね？」と聞いてみたら&lt;a href=&quot;http://www.sitepoint.com/action-cable-and-websockets-an-in-depth-tutorial/&quot;&gt;Action Cable and WebSockets: An in-Depth Tutorial&lt;/a&gt;という記事を教えてもらった。あと実は、READMEの下の方にプロセスの起動について書いてあったということも教えてもらった。&lt;/p&gt;

&lt;p&gt;最後に&lt;a href=&quot;https://twitter.com/tyabe&quot;&gt;@tyabe&lt;/a&gt;さんが渋谷Ruby会議02を考えてます、って案内していた。ウェブアプリケーションフレームワークをテーマにする予定だとか。&lt;/p&gt;

</content>
    <id>https://kitaitimakoto.github.io/apehuci/2016/03/16.html</id>
    <link href="https://kitaitimakoto.github.io/apehuci/2016/03/16.html"
      type="text/html"/>
    <title>渋谷.rb[:20160316]</title>
    <updated>2016-03-16T00:00:00Z</updated>
    <dc:date>2016-03-16T00:00:00Z</dc:date>
  </entry>
  <entry>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://sendagayarb.doorkeeper.jp/events/40813&quot;&gt;Sendagaya.rb #141&lt;/a&gt;で&lt;a href=&quot;http://www.lanches.co.jp/&quot;&gt;株式会社ランチェスター&lt;/a&gt;に行って来た。今回は『&lt;a href=&quot;https://www.oreilly.co.jp/books/9784873115894/&quot;&gt;SQLアンチパターン&lt;/a&gt;』に関連して相談したいことがあるという参加者がいたので、その話を前半（というか殆ど）やって、後半は『&lt;a href=&quot;https://www.oreilly.co.jp/books/9784873117430/&quot;&gt;メタプログラミングRuby&lt;/a&gt;』を読んだ。&lt;/p&gt;

&lt;h2 id=&quot;sql&quot;&gt;SQLアンチパターン&lt;/h2&gt;

&lt;div class=&quot;booklog_html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;booklog_html_image&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/SQL%E3%82%A2%E3%83%B3%E3%83%81%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3-Bill-Karwin/dp/4873115892%3FSubscriptionId%3D0AVSM5SVKRWTFMG7ZR82%26tag%3Dbooklog.jp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4873115892&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/41qHKrFZi0L._SL160_.jpg&quot; width=&quot;117&quot; height=&quot;150&quot; style=&quot;border:0;border-radius:0;&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class=&quot;booklog_html_info&quot; style=&quot;padding-left:20px;&quot;&gt;&lt;div class=&quot;booklog_html_title&quot; style=&quot;margin-bottom:10px;font-size:14px;font-weight:bold;&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/SQL%E3%82%A2%E3%83%B3%E3%83%81%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3-Bill-Karwin/dp/4873115892%3FSubscriptionId%3D0AVSM5SVKRWTFMG7ZR82%26tag%3Dbooklog.jp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4873115892&quot; target=&quot;_blank&quot;&gt;SQLアンチパターン&lt;/a&gt;&lt;/div&gt;&lt;div style=&quot;margin-bottom:10px;&quot;&gt;&lt;div class=&quot;booklog_html_author&quot; style=&quot;margin-bottom:15px;font-size:12px;;line-height:1.2em&quot;&gt;著者 : &lt;a href=&quot;http://booklog.jp/author/Bill+Karwin&quot; target=&quot;_blank&quot;&gt;Bill Karwin&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;booklog_html_manufacturer&quot; style=&quot;margin-bottom:5px;font-size:12px;;line-height:1.2em&quot;&gt;オライリージャパン&lt;/div&gt;&lt;div class=&quot;booklog_html_release&quot; style=&quot;font-size:12px;;line-height:1.2em&quot;&gt;発売日 : 2013-01-26&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;booklog_html_link_amazon&quot;&gt;&lt;a href=&quot;http://booklog.jp/item/1/4873115892&quot; style=&quot;font-size:12px;&quot; target=&quot;_blank&quot;&gt;ブクログでレビューを見る»&lt;/a&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;僕はこの本を持っていないから具体的なことはあまり分からないけれど、「ポリモーフィック関連はよくない」と言っている箇所があって、ちょうど自分で作っている物でもポリモーフィック関連を使っている所があって、それで相談に来たということらしかった。本の該当箇所を説明してもらったり、&lt;a href=&quot;https://twitter.com/tkawa&quot;&gt;@tkawa&lt;/a&gt;さんが電子版を持っていたのでプロジェクターで映して見せてもらったりしながら話を聞いていると、基本的には外部キー制約が使えなくなることが問題のようで、これの解決方法として交差テーブル（だっけ？）という考え方と単一テーブル継承という考え方を紹介していた。&lt;/p&gt;

&lt;p&gt;ポリモーフィック関連はよくない、しかしではどうしたらいいだろうか、この本で提示されている解決策もあまりいいようには思われない、ということで、その人の扱っている具体的なテーブル構造なんかを教えてもらいながらみんなでああだこうだと言っていた。一般的な正解がないタイプの問題だし、ウェブのサービスだと将来要件が変わることは容易に想像できる、それも今の段階ではどう変わるか想像できないタイプの変わり方をするものだから、正解を探すのはますます難しい。&lt;a href=&quot;https://twitter.com/iR3&quot;&gt;@iR3&lt;/a&gt;さんが、長年の経験からためになるアドバイスをするなどしていた。&lt;a href=&quot;http://fukajun.org/&quot;&gt;fukajun&lt;/a&gt;さんもいいこと言ったり、もっと言いたいことありそうだった（前にもテーブル設計の時に言いたいこと残してそうだったのを思い出すに、RDBMS得意そう）のだけど、残念ながら体調不良でidobataによるテキストチャットでの参加だったものだから、勿体無い感じなってしまった。勿体無い。&lt;/p&gt;

&lt;p&gt;こういうのって、誰かに相談できる、話し相手がいることその物が価値だったりするものだなあという感覚を思い出した。&lt;/p&gt;

&lt;h2 id=&quot;ruby&quot;&gt;メタプログラミングRuby&lt;/h2&gt;

&lt;p&gt;最後三十分くらいで『メタプログラミングRuby 第2版』を読んだ。今回は主に&lt;code class=&quot;highlighter-rouge&quot;&gt;method_missing&lt;/code&gt;の所だ。「&lt;code class=&quot;highlighter-rouge&quot;&gt;method_missing&lt;/code&gt;を定義する時は一緒に&lt;code class=&quot;highlighter-rouge&quot;&gt;respond_to_missing?&lt;/code&gt;も定義しましょう」というのがポイント。&lt;/p&gt;

&lt;p&gt;あと、ついエイリアスメソッドチェインという言葉を使ってしまって「それ何？」って聞かれたのだけど、2016年なんだし、ほぼ説明を要するような言葉は封印していくべきだと感じた。&lt;/p&gt;

&lt;p&gt;次回は&lt;a href=&quot;http://rubyonrails.org/doctrine/&quot;&gt;The Rails Doctrine&lt;/a&gt;（多分、&lt;a href=&quot;http://postd.cc/rails-doctrine/&quot;&gt;日本語訳&lt;/a&gt;のほう）を読みながらおしゃべりする予定：&lt;br /&gt;
&lt;a href=&quot;https://sendagayarb.doorkeeper.jp/events/41208&quot;&gt;https://sendagayarb.doorkeeper.jp/events/41208&lt;/a&gt;&lt;/p&gt;

</content>
    <id>https://kitaitimakoto.github.io/apehuci/2016/03/14.html</id>
    <link href="https://kitaitimakoto.github.io/apehuci/2016/03/14.html"
      type="text/html"/>
    <title>SQLアンチパターン@Sendagaya.rb #141</title>
    <updated>2016-03-14T00:00:00Z</updated>
    <dc:date>2016-03-14T00:00:00Z</dc:date>
  </entry>
  <entry>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://groonga.doorkeeper.jp/events/40088&quot;&gt;Groongaで学ぶ全文検索 2016-03-11&lt;/a&gt;に行って来た。&lt;/p&gt;

&lt;p&gt;今日は、実際のユースケースに沿った話をしようということで、参加者のすごい具体的な業務の話をして、それにGroongaを入れる時にどういうふうにすればいいか、どこに注意すればいいかといった話をした。書けなさすぎるので、Mroongaを使ってウェブ日記に類似記事機能を入れるという喩え話にして書く。&lt;/p&gt;

&lt;p&gt;この日記は、実際には静的HTMLをGitHub Pagesでホストしているが、仮に、MySQLに記事データを入れてそこからデータを引っ張って表示しているとしよう。その記事テーブルにはこんなカラムがあるだろう。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;URL（パス）&lt;/li&gt;
  &lt;li&gt;タイトル&lt;/li&gt;
  &lt;li&gt;タグ&lt;/li&gt;
  &lt;li&gt;本文&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;各記事の末尾に、その記事に関連する記事一覧を出したいとする。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;関連記事の分類&lt;/h2&gt;

&lt;p&gt;読者に読むべき記事を提示する際、状況を二つに分けられる。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;読者が、自分が読みたい物を自覚している（「Groongaの記事を読みたい」）&lt;/li&gt;
  &lt;li&gt;読者は自分が読みたいタイプの記事を自覚していない（「この人の文体は気持ちがいい。次に何を読もう」&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;前者の読者に対しては、テキストフィールドを使ったいわゆる検索機能を提供すればよい。&lt;/p&gt;

&lt;p&gt;後者の読者には、記事の提供側（個人日記なので、僕のことだ）が何らかの基準で読むといいだろう記事を提示する。提示のアプローチは更にこう分類できる。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;全ユーザーに共通の記事を提示する
    &lt;ul&gt;
      &lt;li&gt;僕がおすすめしたい記事一覧を出す&lt;/li&gt;
      &lt;li&gt;日記の全記事中、人気のある記事一覧を出す（例えばPVを使って）&lt;/li&gt;
      &lt;li&gt;今読んでいる記事に似た記事一覧を出す&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;読者ごとにパーソナライズしたおすすめなどを提示する（例えばクッキーを使って。今日はこの話はしない）&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-1&quot;&gt;類似文書検索を行う方法&lt;/h2&gt;

&lt;p&gt;このうち「今読んでいる記事に似た記事一覧を出す」というのは類似文書検索と呼ばれる一般的な検索方法を使うと可能で、Groonga（Mroonga）にはその機能が備わっているので、ここではそれを使う時の方法と注意点を述べる。&lt;/p&gt;

&lt;p&gt;まず、検索エンジンの用意だが、Mroongaを使えば簡単だ。MroongaはMySQLに組み込んで使えるストレージエンジンで、Groongaを使った検索機能などを提供する。Mroongaで日記テーブルを作って記事の表示や検索をさせることができるが、記事追加といったデータを扱うマスターデータベースはInnoDBにし、MySQLのレプリケーション機能を使って作るレプリカをMroongaにする、ということができる。するとInnoDBの堅牢さやトランザクション機能にあやかりながらGroongaの高速検索機能を使える。データはレプリケーション機能を使って勝手に入ってくるので、自分で同期の仕組みを作る必要もない。&lt;/p&gt;

&lt;p&gt;こうしておくと、記事を表示する時にレプリカであるMroongaから類似文書検索機能を使って似た記事一覧を出すことができる。Mroongaで類似文書検索をするには、SQLで&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;MATCH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;本文&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AGAINST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;今見ている記事の本文&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;IN&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NATURAL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LANGUAGE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;MODE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;と書く。&lt;code class=&quot;highlighter-rouge&quot;&gt;AGAINST&lt;/code&gt;に記事の本文を与えることと、モードを&lt;code class=&quot;highlighter-rouge&quot;&gt;NATURAL LANGUAGE MODE&lt;/code&gt;にすることがポイントだ（ここで「&lt;code class=&quot;highlighter-rouge&quot;&gt;NATURAL LANGUAGE MODE&lt;/code&gt;にすると類似文書検索になる」というのはMroongaがそうしてあるということで、MySQL一般のことではない）。&lt;/p&gt;

&lt;p&gt;それから、トークナイザーに、MeCabを使うことも重要だ。N-gramだと精度の著しく低い結果になってしまう。どうしてか。それを説明するには類似文書検索の概要を説明する必要がある。（時間があったら書く -&amp;gt; なかった）&lt;/p&gt;

&lt;h2 id=&quot;mroonga&quot;&gt;Mroongaでの類似文書検索の注意点&lt;/h2&gt;

&lt;p&gt;今見ている記事の本文を使って類似文書検索をし、似ている記事の上位n件を表示すると、そこに今見ている記事その物が入ることが非常に多い（当たり前だ）。なので、条件句でそれを除くようにしておく。&lt;/p&gt;

&lt;p&gt;「似ている」ということの精度を高めるために、本文以外の情報を使うとよい。例えば、タグが共通している記事&lt;del&gt;はスコアを上げる&lt;/del&gt;&lt;ins&gt;のみを提示する&lt;/ins&gt;など（Groongaではできるのだが、Mroongaではスコアをどうこうというのはできないらしい）。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;その他の記事提示方法&lt;/h2&gt;

&lt;p&gt;始めの分類の「読者が、自分が読みたい物を自覚している」という状況のため、検索エリアを設けたとする。検索語を入れている&lt;strong&gt;途中で&lt;/strong&gt;、この日記の中で見つかりそうな単語を補完して提示すると、&lt;strong&gt;見栄えがいい&lt;/strong&gt;し、検索しても無駄そうなキーワードも早めに分かってよい。&lt;/p&gt;

&lt;p&gt;Mroongaの最新リリースで、これ（&lt;del&gt;サジェスト&lt;/del&gt;&lt;ins&gt;補完&lt;/ins&gt;機能）を実現する機能が入った。ただ、MroongaはなるべくMySQLのユーザーが自然に使えることを重視している（上の&lt;code class=&quot;highlighter-rouge&quot;&gt;NATRUAL LANGUAGE MODE&lt;/code&gt;など、既存のMySQLの物をうまくGroongaに当てはめて使っている）が、この機能はそうはいかないので、強引にGroongaのフル機能を使えるようにする。Groongaの機能を自由に使うには&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;MATCH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(...)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AGAINST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'*SS title:@&quot;...&quot; &amp;amp;&amp;amp; point &amp;gt;= 100'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;IN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BOOLEAN&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;MODE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;と、&lt;code class=&quot;highlighter-rouge&quot;&gt;AGAINST&lt;/code&gt;の中を&lt;code class=&quot;highlighter-rouge&quot;&gt;*SS&lt;/code&gt;で始める。これを使ってGroongaのprefix_rk_search(prefix romaji kana search)関数を使うと、上の&lt;del&gt;サジェスト&lt;/del&gt;&lt;ins&gt;補完&lt;/ins&gt;機能を実現できる。prefix_rk_searchはGroongaには以前のバージョンからあったので、「Mroongaの最新のリリースで&lt;del&gt;サジェスト&lt;/del&gt;&lt;ins&gt;補完&lt;/ins&gt;機能を実現する機能が入った」のではなく、「Groongaのフル機能を使えるようにするプラグマ（&lt;code class=&quot;highlighter-rouge&quot;&gt;*SS&lt;/code&gt;のこと）が入った」というのが正しい。&lt;/p&gt;

&lt;p&gt;この&lt;code class=&quot;highlighter-rouge&quot;&gt;prefix_rk_search()&lt;/code&gt;は、ローマ字やかなを使って、&lt;strong&gt;漢字が入っているカラムに対して&lt;/strong&gt;前方一致検索ができる、という機能だ（だいぶ雑な説明。詳細はドキュメントを読まれたい：&lt;a href=&quot;http://groonga.org/ja/docs/reference/operations/prefix_rk_search.html&quot;&gt;http://groonga.org/ja/docs/reference/operations/prefix_rk_search.html&lt;/a&gt;）。&lt;/p&gt;

&lt;p&gt;ただ、これは通常の検索と違い、検索キーワード入力が終わる前に何度もリクエストを投げるのでそこには注意が必要だ。検索専用サーバーを立てるなどの対応が必要になるかも知れない。&lt;/p&gt;

&lt;p&gt;ユーザーの入力を楽にするまた一つの方法として、やはり最新のリリースで、曖昧検索も入った。この日記では「Groonga」というキーワードをよく使っているので、検索すると何件か記事がヒットする。検索時に「Groonag」と綴り間違いをしてしまうかも知れない（僕はこの間違いをよくする。本当によくする）。それでも「Groonga」で検索した時の結果を出してしまう機能が曖昧検索だ。これの詳細は開発者のブログ記事を参照されたし：&lt;a href=&quot;http://blog.createfield.com/entry/2016/02/28/014432&quot;&gt;http://blog.createfield.com/entry/2016/02/28/014432&lt;/a&gt;&lt;/p&gt;

</content>
    <id>https://kitaitimakoto.github.io/apehuci/2016/03/11.html</id>
    <link href="https://kitaitimakoto.github.io/apehuci/2016/03/11.html"
      type="text/html"/>
    <title>Groongaの類似文書検索</title>
    <updated>2016-03-11T00:00:00Z</updated>
    <dc:date>2016-03-11T00:00:00Z</dc:date>
  </entry>
  <entry>
    <content type="html">&lt;p&gt;今日も&lt;a href=&quot;https://sendagayarb.doorkeeper.jp/events/39806&quot;&gt;Sendagaya.rb #139&lt;/a&gt;@&lt;a href=&quot;http://www.lanches.co.jp/company&quot;&gt;株式会社ランチェスター&lt;/a&gt;に参加して来た。『&lt;a href=&quot;https://www.oreilly.co.jp/books/9784873117430/&quot;&gt;メタプログラミングRuby 第2版&lt;/a&gt;』を少し読んだ後、参加者の持ち込んだ相談事の話をしたりした。&lt;/p&gt;

&lt;h2 id=&quot;ruby-methodmissing&quot;&gt;メタプログラミングRuby method_missing&lt;/h2&gt;

&lt;p&gt;今日は「3.3 method_missing」から。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://docs.ruby-lang.org/ja/2.3.0/method/Hash/i/default.html&quot;&gt;Hash#default&lt;/a&gt;なんてあったんだ、とか、引数なんて取れたんだ、と話していたが、本筋は問題なく読み進んでいた。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;相談事&lt;/h2&gt;

&lt;p&gt;その後は参加者の一人が持ち込んだ相談について話した。ただ、業務と直結していてここに書いていいか分からないので割愛。面白い話だったし、実際やってみてどうなったか、後日ぜひ聞きたい。&lt;/p&gt;

&lt;h2 id=&quot;sendagayarb-kpt&quot;&gt;Sendagaya.rb KPT&lt;/h2&gt;

&lt;p&gt;次回は第140回というまことに切りのいい数値なので、&lt;a href=&quot;http://fukajun.org/&quot;&gt;fukajun&lt;/a&gt;さんの発案で、KPTをやることになった。多分、飲みながら。&lt;/p&gt;

</content>
    <id>https://kitaitimakoto.github.io/apehuci/2016/02/29.html</id>
    <link href="https://kitaitimakoto.github.io/apehuci/2016/02/29.html"
      type="text/html"/>
    <title>Sendagaya.rb #139</title>
    <updated>2016-02-29T00:00:00Z</updated>
    <dc:date>2016-02-29T00:00:00Z</dc:date>
  </entry>
  <entry>
    <content type="html">&lt;p&gt;この日記の検索機能（フッターの検索フォームからできる）では&lt;a href=&quot;http://groonga.org/ja/docs/reference/executables/groonga-httpd.html&quot;&gt;groonga-httpd&lt;/a&gt;を使っている。日記本文は&lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;にホストしてもらっている。GitHub PagesはHTTPでもHTTPSでもどちらでもアクセスできて、ツイッターなどでURIを貼る時には僕はHTTPSの方を使っている。だがgroonga-httpdはこれまでHTTPSに対応していなかったので、&lt;a href=&quot;https://developer.mozilla.org/ja/docs/Web/API/XMLHttpRequest&quot;&gt;XHR&lt;/a&gt;で接続することができなかった。仕方なく前段に&lt;a href=&quot;http://nginx.org/&quot;&gt;Nginx&lt;/a&gt;を立てて、そこでTLSの終端をしていた。&lt;/p&gt;

&lt;p&gt;日課の&lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get update &amp;amp;&amp;amp; apt-get upgrade&lt;/code&gt;をしていたらGroongaの各種パッケージが降って来たので更新内容を確認しに行った（&lt;a href=&quot;http://groonga.org/ja/docs/news.html#release-6-0-0&quot;&gt;6.0.0リリース - 2016-02-29&lt;/a&gt;）。そこにTLSサポートのことが書かれていたので、早速この日記の検索サーバーでもアップデートして、TLSを有効にした（と書くと白々しいか、TLSサポートは僕が要望した物だった：&lt;a href=&quot;https://osdn.jp/projects/groonga/lists/archive/dev/2016-February/003951.html&quot;&gt;https://osdn.jp/projects/groonga/lists/archive/dev/2016-February/003951.html&lt;/a&gt;）。&lt;/p&gt;

&lt;p&gt;また、groonga-httpdは前々からHTTP/2が使えるようになっていたので、ついでにそちらも有効にした。&lt;/p&gt;

&lt;p&gt;検索は単純にキーアップイベントを拾い、入力の一文字目からその都度groonga-httpdに検索リクエストを投げるようにしているので、HTTP/2でコネクションを張りっぱなしにして検索できるのは効果が大きいのではないかと思う（測ってない）。&lt;/p&gt;

&lt;p&gt;ただ、検索用に日記のデータを入力するのは手元のスクリプトで&lt;a href=&quot;https://github.com/ranguba/groonga-client&quot;&gt;groonga-client&lt;/a&gt; gemを使って実行していたのだが、このgemがHTTPS対応していないのでそこを対応しないといけない。それまでは、今日のこの日記以降の記事は検索対象にならない。HTTP接続用の別のポートを開けてもいいが、まあいいだろう。&lt;/p&gt;

</content>
    <id>https://kitaitimakoto.github.io/apehuci/2016/02/27.html</id>
    <link href="https://kitaitimakoto.github.io/apehuci/2016/02/27.html"
      type="text/html"/>
    <title>日記の検索部分をHTTP/2対応した</title>
    <updated>2016-02-27T00:00:00Z</updated>
    <dc:date>2016-02-27T00:00:00Z</dc:date>
  </entry>
  <entry>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://groonga.doorkeeper.jp/events/39274&quot;&gt;Groongaで学ぶ全文検索 2016-02-26&lt;/a&gt;に行って来た。&lt;/p&gt;

&lt;p&gt;今日のお題は「select」。&lt;a href=&quot;http://groonga.org/ja/docs/reference/commands/select.html&quot;&gt;select&lt;/a&gt;というのは、Groongaの、全文検索エンジンとして最も重要な機能である検索を行うためのコマンド。&lt;/p&gt;

&lt;p&gt;前回、実際のテーブルやデータを見ながら話せたのがよかったという声が多かったので、今回も具体的なGroongaの使い方を、というところからの選択。&lt;/p&gt;

&lt;p&gt;まず僕が使っている以下の機能を簡単に紹介したあとで、それ以外のを&lt;a href=&quot;https://twitter.com/ktou&quot;&gt;@ktou&lt;/a&gt;さんが紹介するという流れだった。&lt;/p&gt;

&lt;p&gt;僕が使っている機能：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;全文検索&lt;/li&gt;
  &lt;li&gt;完全一致検索 … &lt;a href=&quot;https://github.com/ranguba/epub-searcher&quot;&gt;EPUB Searcher&lt;/a&gt;の削除機能でレコードを特定する時に使っている&lt;/li&gt;
  &lt;li&gt;snippet_html出力 … この日記で、検索結果中の検索語をハイライトしている&lt;/li&gt;
  &lt;li&gt;グルーピング（ドリルダウン） … &lt;a href=&quot;https://github.com/ranguba/epub-searcher&quot;&gt;EPUB Searcher&lt;/a&gt;で著者一覧ページで、著者の下に本一覧を表示するのに使っている&lt;/li&gt;
  &lt;li&gt;カラムの重み付け … この日記の検索で、本文よりタイトルとタグでのヒットを重視している。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以下、@ktouさんが紹介してくれた機能：&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;クエリー言語として解析&lt;/h2&gt;

&lt;p&gt;例えばGoogleで「A B C」で検索すると「Aが含まれるかつBが含まれるかつCが含まれるページを探す」という意味になる。「A or B or C」と検索すると「Aが含まれるまたはBが含まれるまたはCが含まれるページを探す」という意味になる。ツイッターで「groonga -lang:ja」みたいな検索を僕はよくしていて、ここでの「lang:ja」（日本語のツイート）「-」（を除外する）というのもある&lt;ins&gt;（Groongaでもこの記法そのまま使えるとのこと。&lt;code class=&quot;highlighter-rouge&quot;&gt;lang:ja&lt;/code&gt;が&lt;code class=&quot;highlighter-rouge&quot;&gt;lang&lt;/code&gt;テーブルに対する&lt;code class=&quot;highlighter-rouge&quot;&gt;ja&lt;/code&gt;での検索になり、「&lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt;」を付けると除外になる）&lt;/ins&gt;。こうした、クエリーの中に検索語以外の命令を含められる時、この命令を表現する物がクエリー言語と呼ばれる。Groongaにもこのクエリー言語を理解する能力がある。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;集計機能&lt;/h2&gt;

&lt;p&gt;グルーピングした際、グループそれぞれについて、何件のレコードがヒットしたかを集計することもできる。件数を数えるほか、あるカラムの値の合計、平均、最大値、最小値を求めることもできる。&lt;/p&gt;

&lt;p&gt;忘れていたけど、この、件数を取得して表示するのはEPUB Searcherで使っていた。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;クエリー展開&lt;/h2&gt;

&lt;p&gt;「焼き肉」で検索した時、勝手に「焼き肉 OR 焼肉 OR やきにく」というクエリーに変更して検索してくれる機能。「焼き肉と焼肉とやきにくを同一視する」ということ自体はユーザー（アプリケーション開発者）が予め登録しておく必要がある（どうやって？）。何を同一視したいかというのは、アプリケーションによって変わるからだ。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;重みの底上げ&lt;/h2&gt;

&lt;p&gt;いい名前が付いていないと言っていた。&lt;/p&gt;

&lt;p&gt;検索時にカラムごとに重みを設定して（タイトルは重くする、本文はそれほどでもない、など）最終的にレコードごとに総合スコアを出す。これが通常の重み付け。&lt;/p&gt;

&lt;p&gt;その総合スコアの計算の&lt;em&gt;後に&lt;/em&gt;、更に重みの数値を足すことができる。例えば、キャンペーンフラグカラムがONだと重み+10する、など。&lt;/p&gt;

&lt;p&gt;通常の重み付けはカラムに対しての指定だが、この底上げはレコード一つ一つに対しての指定となる点が特徴となる。&lt;/p&gt;

&lt;p&gt;使い方例も紹介されたが公開していいかどうか分からないとのことだったのでここでは他の例で説明する。Google検索では、過去に検索して閲覧したことがあるページが、次からの検索で上位になりやすいようになっている。これは、「閲覧した回数」といったカラムを持っておいて、総合スコアを計算し終わった後にそのカラムの値を追加して検索上位に持ってくる、というふうに、Groongaを使う場合は実装することができる。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;ソート&lt;/h2&gt;

&lt;p&gt;ソートできる。&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;途中から結果を出せる&lt;/h2&gt;

&lt;p&gt;オフセットとかページネーションとかいうやつ。&lt;/p&gt;

&lt;h2 id=&quot;section-6&quot;&gt;参照先でも検索できる&lt;/h2&gt;

&lt;p&gt;SQLだとJOINするようなのがGroongaはJOINせずに検索できる。&lt;/p&gt;

&lt;p&gt;記事テーブルとコメントテーブルがあって、記事に対してコメントが結び付いているとする。この時、SQLだと記事の主キーとコメントの主キーを&lt;code class=&quot;highlighter-rouge&quot;&gt;JOIN&lt;/code&gt;で結び付ける。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;記事とコメントがくっついたテーブルを作る（と見做すことができる）&lt;/li&gt;
  &lt;li&gt;コメントテーブルの該当カラムに対して検索を実施し、&lt;/li&gt;
  &lt;li&gt;「くっついたテーブル」の記事テーブルの使いたいカラムを取得する&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;となる。&lt;/p&gt;

&lt;p&gt;Groongaは&lt;del&gt;コメントテーブルに記事への参照を&lt;/del&gt;&lt;ins&gt;記事テーブルにコメントへの参照を（発表していて逆だねって指摘してもらった）&lt;/ins&gt;直接保持させることができる。だから、&lt;code class=&quot;highlighter-rouge&quot;&gt;JOIN&lt;/code&gt;のような追加の命令無く&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;コメントに対して検索し、&lt;/li&gt;
  &lt;li&gt;そのコメントが付いている記事を取得する&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ということができる。&lt;/p&gt;

&lt;p&gt;記事に対して、後から関連商品みたいなテーブルを加えたくなることがあるかも知れない。この時、RDBMSであれば（正規化されていれば）単にそのためのテーブルを作成し、検索時に&lt;code class=&quot;highlighter-rouge&quot;&gt;JOIN&lt;/code&gt;で結び付けるようにすることができる。記事テーブルには変更が必要ない。&lt;/p&gt;

&lt;p&gt;Groongaの場合は記事テーブルに関連商品テーブルへの参照を持たせることになる（か逆方向の参照を持たせる。方向はアプリケーションによる）。既存の記事テーブルに対する変更が発生する。しかし、Groongaはカラム指向データベースなので、こうしたカラムの追加操作は低コストでできるので問題にならない（RDBMSで&lt;code class=&quot;highlighter-rouge&quot;&gt;ALTER TABLE&lt;/code&gt;となると、件数によってはおおごとだ）。&lt;/p&gt;

&lt;p&gt;「Solrはこうしたテーブル跨ぎの検索はうまくできないんでは？」と@ktouさんが言っていたので識者の指摘を待ちたい。&lt;/p&gt;

</content>
    <id>https://kitaitimakoto.github.io/apehuci/2016/02/26.html</id>
    <link href="https://kitaitimakoto.github.io/apehuci/2016/02/26.html"
      type="text/html"/>
    <title>Groongaでできる検索方法あれこれ</title>
    <updated>2016-02-26T00:00:00Z</updated>
    <dc:date>2016-02-26T00:00:00Z</dc:date>
  </entry>
  <entry>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://tour.golang.org/&quot;&gt;A Tour of Go&lt;/a&gt;のエクササイズをやって、GitHubに上げてみた：&lt;a href=&quot;https://github.com/KitaitiMakoto/a-tour-of-go-exercises&quot;&gt;github.com/KitaitiMakoto/a-tour-of-go-exercises&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;ウェブクローラーの課題（&lt;a href=&quot;https://github.com/KitaitiMakoto/a-tour-of-go-exercises/blob/master/exercise-web-crawler.go&quot;&gt;exercise-web-crawler.go&lt;/a&gt;）が難しくて、まずgoroutineを使って非同期にクロールさせるのに手こずった。一つのHTTPリクエストに一つのgoroutineを割り当てた時、終了の待ち合わせはどうするのがいいんだろう。僕は、一々チャンネルを閉じるようにした。閉じるのの待ち合わせは&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;とやった。この他に、&lt;code class=&quot;highlighter-rouge&quot;&gt;go&lt;/code&gt;呼び出しの辺りにラベルを付けて、groutineから戻ったところで&lt;code class=&quot;highlighter-rouge&quot;&gt;break&lt;/code&gt;するというやり方もあるようだ。エクササイズは本当は教師がいて答え合わせしてもらえるととてもいいのだけど、残念ながらいないので、誰か、「こうしたらもっといいよ」というの教えてください。まあ、色んなソースを読むというのが、よいのだろうとは思うが。&lt;/p&gt;

&lt;p&gt;次に、「一度フェッチしたURIは二度フェッチしないようにする」というのも課題の一部で、ヒントに「その管理にマップを使うのはいいけど、マップは単独では並行処理に関して安全ではない」とあって、この排他制御にもちょっと困った。大きなロックを獲得して、その中でフェッチすると、並行処理させている意味が無くなっちゃう。でも、どのタイミングでロックを取ればいいのか、何のロックを取ればいいのか、というのに迷った。「一つのURIにつき一つのミューテックスを作る」ということを最初考えたのだけど、そもそもあるURIに対応するミューテックスが存在するかの確認処理と、その後ミューテックスを作るまでの間に他のgoroutineが同じ物を触る可能性があるわけで、うまくいかない。結局、単純にマップその物をロックするようにした。そうすると、&lt;code class=&quot;highlighter-rouge&quot;&gt;defer&lt;/code&gt;を使わない実装になってしまったのだけど、もっといいやり方がないものだろうか。&lt;/p&gt;

</content>
    <id>https://kitaitimakoto.github.io/apehuci/2016/02/21.html</id>
    <link href="https://kitaitimakoto.github.io/apehuci/2016/02/21.html"
      type="text/html"/>
    <title>A Tour of Goのエクササイズをやってみた</title>
    <updated>2016-02-21T00:00:00Z</updated>
    <dc:date>2016-02-21T00:00:00Z</dc:date>
  </entry>
  <entry>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://sendagayarb.doorkeeper.jp/events/39087&quot;&gt;Sendagaya.rb #137&lt;/a&gt;に参加して来た。『メタプログラミングRuby 第2版』と、Active Record enumsの話をして来た。&lt;/p&gt;

&lt;h2 id=&quot;ruby-3-&quot;&gt;メタプログラミングRuby 3章 メソッド&lt;/h2&gt;

&lt;p&gt;今回も&lt;a href=&quot;https://www.oreilly.co.jp/books/9784873117430/&quot;&gt;メタプログラミングRuby&lt;/a&gt;を読んだ。「3章 メソッド」から（こういう時、章にもリンクを貼りたいものだ）。&lt;/p&gt;

&lt;p&gt;同じようなメソッドの定義を繰り返すのではなく、動的に定義することで、重複した記述を減らす方法が紹介される。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Computer&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;computer_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data_source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;computer_id&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@data_source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data_source&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define_component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;define_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@data_source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;get_&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;_info&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@id&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@data_source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;get_&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;_price&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@id&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;capitalize&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; ($&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;)&quot;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;* &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;define_component&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:mouse&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;define_component&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:cpu&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;define_component&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:keyboard&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;これで&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mouse&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@data_source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get_mouse_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@data_source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get_mouse_price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Mouse: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; ($&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;)&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;* &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;みたいなメソッドを幾つも書く作業から開放される。例によってふんふんなるほどと読んでいたが、例によって甘かった。十五分読んだ後にみんなで話している時に、このコードの「危なさ」を指摘する声が上がった。&lt;/p&gt;

&lt;p&gt;「&lt;code class=&quot;highlighter-rouge&quot;&gt;initialize&lt;/code&gt;で&lt;code class=&quot;highlighter-rouge&quot;&gt;data_source&lt;/code&gt;を引数に受け取っているが、別々のインスタンス初期化時に別々の&lt;code class=&quot;highlighter-rouge&quot;&gt;data_source&lt;/code&gt;を受け取り得るから、クラス全体が和集合のような不要なメソッドも持った物になる」とのことだった。僕にはぴんとこなかった。その後、コードを使って説明してくれた。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;methods&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:moge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:hoge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;methods2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:moge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:hoge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Computer&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define_kick&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define_kick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;define_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;_kick&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Computer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &quot;moge&quot;、&quot;hoge&quot;を出力&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;instance_methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [:moge_kick, :hoge_kick]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Computer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;methods2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &quot;moge&quot;、&quot;hoge&quot;、&quot;age&quot;を出力&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;instance_methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [:moge_kick, :hoge_kick, :age_kick]&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; true&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;instance_methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [:moge_kick, :hoge_kick, :age_kick]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;（少しコメントを足し、改変した）&lt;/p&gt;

&lt;p&gt;最後の行、&lt;code class=&quot;highlighter-rouge&quot;&gt;c1&lt;/code&gt;でも期待しないメソッド&lt;code class=&quot;highlighter-rouge&quot;&gt;#age_kick&lt;/code&gt;が使えることを示している（その前の行からも明らかだが）。こういう危なさがあることに、僕は気が付かなかった。勿論、これが「危ない」かどうかは作るアプリケーション次第だ。別にこれで構わないということも理論上ある。それは何かと話していて、「サンプル」かなとなった。&lt;/p&gt;

&lt;h2 id=&quot;activerecord-enumsdb&quot;&gt;ActiveRecord enumsのDB内での値を文字列にする&lt;/h2&gt;

&lt;p&gt;その後、今日は何を話そうかと話していると、Rails 4.1から入った&lt;a href=&quot;http://edgeguides.rubyonrails.org/4_1_release_notes.html#active-record-enums&quot;&gt;ActiveRecord enums&lt;/a&gt;の機能についての相談が上がった。&lt;/p&gt;

&lt;p&gt;この機能はRDBMSなんかでも実装されているenum（列挙型）の機能をRailsのレイヤーで実装した物で、ユーザー（Railsを使うプログラマー）はモデルオブジェクトが提供する、人間が読みやすいインターフェイスだけ扱っていればいいようになる。バックエンドではActiveRecordが数値に変換してDBに格納し、ユーザーとの間を取り持ってくれる。&lt;/p&gt;

&lt;p&gt;今回の相談は、この機能ではDBに格納する値も文字列にすることができるが、それは普通ではないのだろうか？　という物。&lt;/p&gt;

&lt;p&gt;始め、「何となく気持ち悪いですね」くらいしか言うことができなかった。一応、データサイズが増えるというのもあるが、このご時世、そこは気にするポイントではないだろうとのこと。しばらく話しながら思い付いたのは、文字列にするとインデックスを張ることになるだろうから、インサート時にインデックスを更新するコストが掛かって（遅くなって）しまうということだった。これはそれなりに妥当だと受け取られて、「じゃあ、やっぱり（ActiveRecordの）enumのバックエンドは数値にしておくのが普通なんですね」ということになった。&lt;/p&gt;

&lt;p&gt;ちなみに相談者が文字列を使いたい一番の背景は、Railsは分からないがSQLなら分かるという人のいる場（に、今いるらしい）では、値が数値で返って来ると人間の方で対応する文字列を参照しないといけないので、嫌だ、ということだった。これは勿論妥当だと思うので、この人のケースでは、文字列を使うのは正解だと思う（が、&lt;a href=&quot;https://github.com/sferik/rails_admin&quot;&gt;RailsAdmin&lt;/a&gt;がエラーになるという問題があるらしかった）。それは置いておいても割と一般的に文字列を使いたいこだわりがありそうだったが、そこは深く話さなかった。今思うともったいなかったかも知れない。&lt;/p&gt;

&lt;p&gt;「そう言えば、Railsを使うとマスターテーブルを作ることをしなくなるな」という話もした。『&lt;a href=&quot;https://www.oreilly.co.jp/books/9784873114163/&quot;&gt;エンタープライズRails&lt;/a&gt;』には「アプリケーションのフレームワークや言語よりも、データベースのデータのほうが長く残るから、データだけで完結できるようにしておくべきだ」と書いてあったように思うのだけど、時代も違うし、エンタープライズだとウェブのコンシューマー向けサービスとは領域も違うということだろうか。&lt;/p&gt;

</content>
    <id>https://kitaitimakoto.github.io/apehuci/2016/02/15.html</id>
    <link href="https://kitaitimakoto.github.io/apehuci/2016/02/15.html"
      type="text/html"/>
    <title>Sendagaya.rb #137</title>
    <updated>2016-02-15T00:00:00Z</updated>
    <dc:date>2016-02-15T00:00:00Z</dc:date>
  </entry>
  <entry>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://groonga.doorkeeper.jp/events/38529&quot;&gt;Groongaで学ぶ全文検索 2016-02-12&lt;/a&gt;に行って来た。今日は、参加者が勉強にと国立国会図書館の書誌情報データを取って来てGroongaに入れてみている、だが今のテーブル設計がいいのか分からないということだったので、それをまず説明してもらって、&lt;a href=&quot;https://twitter.com/ktou&quot;&gt;@ktou&lt;/a&gt;さんが各テーブル作成時のオプションなどを説明してくれた。&lt;/p&gt;

&lt;p&gt;インデックスを作る前と後で検索結果を比較していて、インデックス作ってそっちで検索すると20倍速くなったということで、インデックスの有用性が証明されてた。&lt;/p&gt;

&lt;p&gt;そんなわけで個別に色々説明してくれたのだが、まとまっているわけではないので、幾つか取り上げることにする。&lt;/p&gt;

&lt;h2 id=&quot;withposition&quot;&gt;WITH_POSITIONの活躍&lt;/h2&gt;

&lt;p&gt;今回はインデックステーブルを作る時に、タイトルに対応するインデックスカラムを作る時に&lt;code class=&quot;highlighter-rouge&quot;&gt;COLUMN_INDEX|WITH_POSITION&lt;/code&gt;と、&lt;code class=&quot;highlighter-rouge&quot;&gt;WITH_POSITION&lt;/code&gt;が指定されていた。これがうまく活きる状況の話があった。&lt;/p&gt;

&lt;p&gt;『一、二年生の基礎英作文』というタイトルの本があった。これに対して「一年生」で検索した時に、この本はヒットするだろうか。但し、実際のトークナイザーは&lt;code class=&quot;highlighter-rouge&quot;&gt;TokenBigram&lt;/code&gt;が選ばれていたが、仮に&lt;code class=&quot;highlighter-rouge&quot;&gt;TokenMecab&lt;/code&gt;にしたとする。&lt;/p&gt;

&lt;p&gt;タイトルは「一」「、」「二」「年生」「の」……とMeCabはトークナイズした。検索クエリーは「一」「年生」になる。とすると、このタイトルはクエリーのトークン「一」にも「年生」にもヒットするので、ヒットしそうだ。しかししない。なぜならGroongaはこのタイトルカラムではキーワードの位置情報も持っていて、「一」と「年生」がこの順番で隣り合っていないことを知っているからだ。同様の理由で、仮に『二年生の基礎英作文（一）』みたいなタイトルの本があったとしてもヒットしない。このように、「キーワードが文書中でどの位置にあるか」という情報も持たせるオプションが&lt;code class=&quot;highlighter-rouge&quot;&gt;WITH_POSITION&lt;/code&gt;。なので逆に、これを指定していなければ上のクエリーでこの文書はヒットするだろう。&lt;/p&gt;

&lt;p&gt;MeCabみたいな形態素解析をせずbi-gramで&lt;code class=&quot;highlighter-rouge&quot;&gt;WITH_POSITION&lt;/code&gt;なし、みたいなカラムを作ると、色々な物がヒットし過ぎて検索には使い物にならないカラムになったりもする。&lt;/p&gt;

&lt;h2 id=&quot;bi-gram&quot;&gt;bi-gramでトークナイズしている時は、一文字では検索できないのか？&lt;/h2&gt;

&lt;p&gt;bi-gramでトークナイズしている時は、インデックスのキーには二文字の文字列が入っている（文末など場合によっては一文字もある）。そういう時に、検索クエリーが一文字の時には、何もヒットしなくなるのでは？　という疑問が出た。&lt;/p&gt;

&lt;p&gt;答えはヒットする。今回の実例では、インデックスキーをパトリシリアトライで作っていた（＝ハッシュにしていなかった）から。パトリシアトライなら前方一致検索ができるので、一文字のクエリーでも探すことができる。なぜパトリシアトライなら前方一致検索ができるのか？　忘れた。もうパトリシアトライの構造を忘れたので後で見ておく……。&lt;/p&gt;

&lt;p&gt;尚、MySQL 5.7から入ったInnoDBの全文検索機能では、bi-gramでトークナイズする設定にすると、実際に一文字での検索ではヒットしなくなるらしい。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;テーブルのキーに選ぶべき物&lt;/h2&gt;

&lt;p&gt;今回は、国会図書館から提供されているTSVのうち、URL、タイトル、著者、出版社をGroongaに入れていた。テーブルとしてはハッシュテーブルを選び、キーにURIを入れていた。これは正しい設計だろうか？&lt;/p&gt;

&lt;p&gt;具体的なアプリケーションの要件によって、考慮するべきことがある。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ハッシュテーブルでいいだろうか？&lt;/li&gt;
  &lt;li&gt;いいとして、キーはURLでいいだろうか？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ハッシュテーブルのいい所は、キーが存在していて、そのキーを使ってレコードを一意に特定できる所。逆に言うと特定する必要がない、つまり後からレコードを探して更新や削除をすることが無いのであれば、ハッシュテーブルを使う必要はない。追加しか無いのなら、配列を使ってもいい。&lt;/p&gt;

&lt;p&gt;ハッシュテーブルを選んだとして、そのキーカラムのサイズは（現在のGroongaでは）4KiBになっている。普通それならURLを入れても大丈夫だろうと思うが、溢れることがあると@ktouさんは主張していた（何か嫌な思い出がありそうだった）。ので、今回の場合だと、選択したカラムにはなかったが、ISBNを使うのがよさそうとのこと。また、そういう一意かつ短めの物が選べない時は、一意な物のハッシュ値を計算してキーとして入れるといいとのこと。&lt;/p&gt;

</content>
    <id>https://kitaitimakoto.github.io/apehuci/2016/02/12.html</id>
    <link href="https://kitaitimakoto.github.io/apehuci/2016/02/12.html"
      type="text/html"/>
    <title>実例を元にした全文検索エンジン（Groonga）のテーブル設計</title>
    <updated>2016-02-12T00:00:00Z</updated>
    <dc:date>2016-02-12T00:00:00Z</dc:date>
  </entry>
  <entry>
    <content type="html">&lt;p&gt;この日記に検索機能を付けてフッターに置いた。軽快にインクリメンタルサーチができていて、なかなかいい。&lt;/p&gt;

&lt;h2 id=&quot;groonga&quot;&gt;Groongaを使った全文検索&lt;/h2&gt;

&lt;p&gt;この際に、二つやったことのない作業があって、その一つは検索エンジンを使った検索機能の作成。正直、静的サイトの検索なんて&lt;a href=&quot;https://developers.google.com/custom-search/&quot;&gt;Google Custom Search&lt;/a&gt;や&lt;a href=&quot;https://swiftype.com/&quot;&gt;Swiftype&lt;/a&gt;を使えばいいと思うが、自分で遊ぶための場所を持つというのも日記を移行した目的の一つだったから、自分でやってみた。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://middlemanapp.com/jp/&quot;&gt;Middleman&lt;/a&gt;でサイトをビルドした後、&lt;a href=&quot;http://docs.ruby-lang.org/ja/2.3.0/library/rake.html&quot;&gt;Rake&lt;/a&gt;タスクでビルド済みディレクトリーから日記本文を抽出して、&lt;a href=&quot;http://groonga.org/ja/&quot;&gt;Groonga&lt;/a&gt;に投げ込んでインデックスを作っている。始め、Middlemanのビルド時のidentical、updated、created、removedという状態変化の情報を利用して、必要な分だけGroonga上のインデックスを更新しようかと思っていた（そのための調査結果はQiitaの&lt;a href=&quot;http://qiita.com/KitaitiMakoto/items/ca3792f75270b533d37c&quot;&gt;Middlemanで「変更なし」「作成」「削除」「変更」の状態を取る&lt;/a&gt;という記事に書いた）。でも、実用上それで問題ないのだが、一応「ビルド環境が変わったらそういった状態変化の情報は変わる、ポータブルではない」ということに配慮して、毎回全日記の分をGroongaに投げるようにしている。今のところ、パフォーマンスが問題になったりということは全然ない。&lt;/p&gt;

&lt;p&gt;そのように毎回全部作り直すことにしたので、ローカルでインデックス構築済み&lt;a href=&quot;http://groonga.org/ja/docs/reference/executables/groonga-httpd.html&quot;&gt;groonga-httpd&lt;/a&gt;の&lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt;イメージを作って、それをデプロイするようにしようかとも思った。実際イメージを作るまではやっていた。が、せっかくGroongaがなるべくOSの機能を引き出すように作られているのに、仮想環境で動かすのはもったいないと思って「普通」にインストールして&lt;a href=&quot;http://www.freedesktop.org/wiki/Software/systemd/&quot;&gt;systemd&lt;/a&gt;で起動して使っている（&lt;a href=&quot;https://www.linode.com/&quot;&gt;Linode&lt;/a&gt;を使っているから、まあ、仮想環境ではあるが）。&lt;/p&gt;

&lt;p&gt;何故か&lt;code class=&quot;highlighter-rouge&quot;&gt;snippet_html()&lt;/code&gt;関数がうまく動いていないので、別途調査が必要だ。&lt;/p&gt;

&lt;p&gt;そう言えば、記事を削除した時の対応もRakeタスクにない。消すことがあったら考えよう。記事データをGroongaを投げる時に削除できるよう自動化するのでなく、PostgreSQLの&lt;code class=&quot;highlighter-rouge&quot;&gt;VACUUM&lt;/code&gt;みたいに、ユーザー側で明示的に実行するのでいいと思う。&lt;/p&gt;

&lt;h2 id=&quot;polymer&quot;&gt;Polymerコンポーネントの作成&lt;/h2&gt;

&lt;p&gt;もう一つは、検索エリアを作るのに、&lt;a href=&quot;https://www.polymer-project.org/1.0/&quot;&gt;Polymer&lt;/a&gt;を使って検索用のコンポーネントを作った（HTMLソースを見れば&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;blog-search&amp;gt;&lt;/code&gt;というタグが見付かるはずだ）こと。&lt;/p&gt;

&lt;p&gt;作り始め、全く何も表示できず、Polymerに慣れてもいないので自分が何か間違っているかと色々試しすごい時間を費したが、内部で使っているコンポーネントを読み込む&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;link&amp;gt;&lt;/code&gt;要素の&lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt;属性を&lt;code class=&quot;highlighter-rouge&quot;&gt;ipmort&lt;/code&gt;と書き間違えていただけだった。分かった時には脱力した。&lt;/p&gt;

&lt;p&gt;ユーザー入力（&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;paper-input&amp;gt;&lt;/code&gt;）、Groongaとの通信（&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;iron-ajax&amp;gt;&lt;/code&gt;）、その二つの繋ぎ（&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;blog-search&amp;gt;&lt;/code&gt;）という構成で作ったが、&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;blog-search&amp;gt;&lt;/code&gt;は昔ながらのjQueryを使った素朴な同期処理のようになってしまった。Polymerにはデータバインディングの仕組みがあるのにもったいない。もう少しすっきりするよう書き換えたい。&lt;/p&gt;

&lt;p&gt;しかし、他のコンポーネント指向のライブラリーもそうだと思うが、閉じたスコープのことだけを考えてHTML、CSS、JavaScriptを書けばよいというのは大分ストレスフリーだ。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;前からずっと、「あの記事はどこだっけ」と思った時に&lt;code class=&quot;highlighter-rouge&quot;&gt;git grep&lt;/code&gt;してURIを調べてからページを表示していたので、それが無くなって自分が嬉しい機能だ。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;追記&lt;/h2&gt;

&lt;p&gt;と思いきや、このサイトは外にリンクを置く時はHTTPSで置いているのだけどgroonga-httpdのdebパッケージにはTLSモジュールが組み込まれていなかった。取り敢えずNginxを前に立てたけど、groonga-httpdのウェブサーバー機能もNginxなので、こちらのビルド時にTLSモジュールを組み込むのが正しいと思う。後でメーリングリストに送って入れてもらうか自分でビルドするかしよう。&lt;/p&gt;

</content>
    <id>https://kitaitimakoto.github.io/apehuci/2016/02/07.html</id>
    <link href="https://kitaitimakoto.github.io/apehuci/2016/02/07.html"
      type="text/html"/>
    <title>日記に検索機能をつけた</title>
    <updated>2016-02-07T00:00:00Z</updated>
    <dc:date>2016-02-07T00:00:00Z</dc:date>
  </entry>
  <entry>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://sendagayarb.doorkeeper.jp/events/38208&quot;&gt;Sendagaya.rb #135&lt;/a&gt;に行って来た。今日も前半は『&lt;a href=&quot;https://www.oreilly.co.jp/books/9784873117430/&quot;&gt;メタプログラミングRuby 第2版&lt;/a&gt;』を読んで、後半はRails 5のチェンジログから&lt;a href=&quot;https://github.com/rails/rails/blob/v5.0.0.beta1/activerecord/CHANGELOG.md&quot;&gt;Active Record 5.0.0.beta1のチェンジログ&lt;/a&gt;を眺めていた。&lt;/p&gt;

&lt;h2 id=&quot;ruby-refinements&quot;&gt;メタプログラミングRuby Refinements&lt;/h2&gt;

&lt;p&gt;今日は「2.4.2 メソッドの実行」から「2.4.3 Refinements」まで。&lt;/p&gt;

&lt;p&gt;メソッドの実行では他の言語から来ると&lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt;とかに戸惑うよねとか、&lt;code class=&quot;highlighter-rouge&quot;&gt;protected&lt;/code&gt;って何に使うんだろうねという話をした。&lt;/p&gt;

&lt;p&gt;お次はいよいよ&lt;a href=&quot;http://magazine.rubyist.net/?0041-200Special-refinement&quot;&gt;Refinements&lt;/a&gt;。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyClass&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;my_method&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;original my_method&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;anothor_method&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;my_method&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;MyClassRefinements&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;refine&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyClass&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;my_method&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;refined my_method&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyClassRefinements&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;my_method&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &quot;refined my_method&quot;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;another_method&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &quot;original my_method&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;この最後の行は驚かないだろうか。僕は驚いた。&lt;/p&gt;

&lt;p&gt;この挙動を本では&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Refinementsが有効になっているコードは、（略）インクルードやプリペンドしたモジュールのコードよりも優先される。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;と説明している。しかしこれだけで、メソッド探索の順番を覚えられるだろうか。&lt;a href=&quot;https://twitter.com/tkawa&quot;&gt;@tkawa&lt;/a&gt;さんの説明が素晴らしかった。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;クラスやインクルードやプリペンドを考慮するより先に、まずRefinementsを探す&lt;/li&gt;
  &lt;li&gt;次に通常のメソッド探索手順に従って、プリペンドされた物、インクルードした物、特異クラス、クラス……とメソッドを探す&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ということだ。上の例で言うと、まず&lt;code class=&quot;highlighter-rouge&quot;&gt;my_methodを呼ぶ場合&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Refinementsを探す&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MyClassRefinements&lt;/code&gt;が見付かる&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;my_method&lt;/code&gt;が定義されている&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MyClassRefinements#my_method&lt;/code&gt;を呼ぶ&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;で、結果は&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;refined my_method&quot;&lt;/code&gt;になる。一方&lt;code class=&quot;highlighter-rouge&quot;&gt;another_method&lt;/code&gt;は&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Refinementsを探す&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MyClassRefinements&lt;/code&gt;が見付かる&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;another_method&lt;/code&gt;は定義されていない&lt;/li&gt;
  &lt;li&gt;Refinementsの探索は終わり、今後二度と探索されない&lt;/li&gt;
  &lt;li&gt;プリペンドされたモジュールやインクルードされたモジュールを探すが、ない&lt;/li&gt;
  &lt;li&gt;クラスを見る&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MyClass&lt;/code&gt;である&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;another_method&lt;/code&gt;が定義されている&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;another_method&lt;/code&gt;を実行する&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;my_method&lt;/code&gt;が呼ばれている&lt;/li&gt;
  &lt;li&gt;Refinementsの探索は終わっているので、クラスの&lt;code class=&quot;highlighter-rouge&quot;&gt;my_method&lt;/code&gt;が見付かる&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MyClass#my_method&lt;/code&gt;を実行する&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ということで、結果が&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;original my_method&quot;&lt;/code&gt;になる、というわけだ。&lt;/p&gt;

&lt;p&gt;子の説明を聞いて僕は「あ。」と声が漏れるくらい腹に落ちた。&lt;/p&gt;

&lt;h2 id=&quot;active-record-500beta1&quot;&gt;Active Record 5.0.0.beta1チェンジログ&lt;/h2&gt;

&lt;p&gt;その後もちょいちょいRefinementsと遊んでからは&lt;a href=&quot;https://github.com/rails/rails/blob/v5.0.0.beta1/activerecord/CHANGELOG.md&quot;&gt;Active Record 5.0.0.beta1のチェンジログ&lt;/a&gt;をざっと流しながら気になった所で止めて、あーだこーだ言っていた。結構RDBMSの個別機能に対応していたり、細かなユースケースを拾ったりしていて、「Active Recordは基本は既に成熟しているんだろうなあ」という感想を持った。&lt;/p&gt;

&lt;p&gt;次回は『メタプログラミングRuby』読むほか、fukajunさんがElectronについての発表をしたいということなのでそれは聞けるはずだ。あとはその場で決まるんだろう。その場で決まるので、聞きたいことを持って行けば、聞けると思う。&lt;/p&gt;

&lt;p&gt;次回分もすぐさまイベントが作られて、申し込める。&lt;br /&gt;
&lt;a href=&quot;https://sendagayarb.doorkeeper.jp/events/38655&quot;&gt;https://sendagayarb.doorkeeper.jp/events/38655&lt;/a&gt;&lt;/p&gt;

</content>
    <id>https://kitaitimakoto.github.io/apehuci/2016/02/02.html</id>
    <link href="https://kitaitimakoto.github.io/apehuci/2016/02/02.html"
      type="text/html"/>
    <title>Sendagaya.rb #135</title>
    <updated>2016-02-02T00:00:00Z</updated>
    <dc:date>2016-02-02T00:00:00Z</dc:date>
  </entry>
  <entry>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://groonga.doorkeeper.jp/events/37647&quot;&gt;Groongaで学ぶ全文検索 2016-01-29&lt;/a&gt;に行って来た。今日は濃かった。その分面白かった。&lt;/p&gt;

&lt;p&gt;まずノーマライザーの話をして、その後形態素解析の話をした。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;ノーマライザー&lt;/h2&gt;

&lt;p&gt;ノーマライザーはノーマライズする物。ノーマライズは、半角「ｶﾚｰ」と全角「カレー」、ひらがな「りんご」とかたかな「リンゴ」など、厳密には違う物を同じ物に寄せるという処理。どういう基準でノーマライズするかというのは色々あって、その色々ごとにノーマライザーの種類がある。&lt;/p&gt;

&lt;p&gt;インデックスを作る時、インデックスのキーにノーマライズした物を選んでおくと、例えば「りんご」で検索した時に、「りんご」を含む文書と「リンゴ」を含む文書の両方を返すことができる。これがノーマライザーを使う理由。&lt;/p&gt;

&lt;p&gt;ただ、この状況下で「リンゴ」で検索すると、インデックスのキーワードには「りんご」しかないので、何もヒットしない（「リンゴ」というキーワードはインデックスを作る時にノーマライズされて「りんご」になっているから、入っていない）。だから、検索時にクエリーの方もノーマライズする。この時にはインデックス作成時と同じノーマライザーを使わないと、キーワードの集合が変わるので、いけない。&lt;/p&gt;

&lt;p&gt;（面白い質疑応答二つあった、後で書く。かも。）&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;形態素解析&lt;/h2&gt;

&lt;p&gt;形態素解析は、文などを形態素に分ける処理。形態素が何かは各自調べられたい。迂闊なことを言えない。日本語の文を構成する、意味的に分割できる一番小さな単位、とかそんな感じ。全文検索では、インデックスのキーワードをどのように選ぶかというやり方の一つとして、形態素解析器を使う（他にN-gramがあるのは以前書いた通り：&lt;a href=&quot;../../2015/11/20.html&quot;&gt;日本語文書の全文検索&lt;/a&gt;）。&lt;/p&gt;

&lt;p&gt;例えばクエリーの中の「りんご」と「リンゴ」を同一視するには、文字単位で見ていって、かたかなを見付ける度に全部ひらがなにしていけばいい。こういうノーマライズは文字単位で処理すればできる。が、「PC」で検索した時に「パソコン」を含む文書を返す、二つを同一視するにはこの方法では不可能。「パソコン」を見つけたら「PC」にする必要がある。この時に&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;「パソコン」が一つの単位になるように、クエリーを分割する方法（形態素に分割する方法）、「パソ」みたいに「パソコン」より細かく分割しないし、「パソコンを」みたいに他の語とくっついた形で大きな粒度で分割しない方法。&lt;/li&gt;
  &lt;li&gt;「パソコン」と「PC」は同じ物だ、という日本語の知識（扱うアプリケーションによる。同じ物と扱いたくないアプリケーションもあるだろう）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の知識が必要になる。&lt;/p&gt;

&lt;p&gt;前者が形態素解析と呼ばれる処理。形態素解析器は「『パソコン』というのは名詞である」「『で』というのは助詞である」「『で』は文の最初には現れない」といった知識（辞書）を持っている。この知識を元に文を解析して、日本語としてありそうな切り方を何パターンか出す。その中の一番ありそうな物を結果として返す（それを全文検索エンジンが使う）。&lt;/p&gt;

&lt;p&gt;ところで、どのように切るか、というのは、ドメインによって変わる。新聞で使われる言葉、ツイッターで使われる言葉、若者の言葉、年寄りの言葉……。
アプリケーションが扱うドメインが分かっているなら、一般的（？）な切り方でなく、それぞれに適した切り方ができるはずだ。この「それぞれに適した」は、それぞれ用の辞書を使うことで対応する（形態素解析器自体は変えない）。時代とともに検索結果が古びてきたようだと、辞書を新しくする必要も出てくるだろう。&lt;/p&gt;

&lt;p&gt;辞書を新しくするということは、インデックスのキーワードの選び方が変わるということだから、その時にはインデックスを作り直す必要がある。&lt;/p&gt;

&lt;p&gt;後者、単語（形態素）の同一視は、ノーマライズの前のクエリー展開というフェイズでやっている。そこは辞書を元にクエリーを見て、&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;「パソコンほしい」 OR 「PCほしい」 OR 「パソコン欲しい」 OR 「PC欲しい」
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;みたいなクエリーに変換して検索エンジンに投げている。&lt;/p&gt;

&lt;p&gt;「パソコン」と「PC」を同一視するには、形態素解析の結果が欲しいところだがクエリー展開はその前なので、ここは独自に頑張ったりする。その場合は「（二重に同じ処理をすることになのるで）&lt;del&gt;トークナイズ&lt;/del&gt;&lt;ins&gt;ノーマライズ（勉強会中に発表し、直してもらった）&lt;/ins&gt;はしないように」といった仕様上の注意が生まれる。&lt;/p&gt;

&lt;p&gt;今回は話題が広くて、また勉強会中に公開したいという制約とでまとめられないがこんな感じだった。あとで追記するかも知れない。&lt;/p&gt;

</content>
    <id>https://kitaitimakoto.github.io/apehuci/2016/01/29.html</id>
    <link href="https://kitaitimakoto.github.io/apehuci/2016/01/29.html"
      type="text/html"/>
    <title>ノーマライズと形態素解析</title>
    <updated>2016-01-29T00:00:00Z</updated>
    <dc:date>2016-01-29T00:00:00Z</dc:date>
  </entry>
  <entry>
    <content type="html">&lt;p&gt;ようやく『&lt;a href=&quot;https://gihyo.jp/dp/ebook/2015/978-4-7741-7879-0&quot;&gt;APIデザインケーススタディ&lt;/a&gt;』を読み終えた。デザインの本なのだけど、僕はRubyの様々な組み込み・標準添付ライブラリーの解説書、またはエッセイとして、主に読んだ。楽しい時間で、読み終わって寂しい。&lt;/p&gt;

&lt;div class=&quot;booklog_html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;booklog_html_image&quot;&gt;&lt;a href=&quot;https://gihyo.jp/dp/ebook/2015/978-4-7741-7879-0&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://image.gihyo.co.jp/assets/images/gdp/2015/978-4-7741-7879-0.jpg&quot; width=&quot;92&quot; height=&quot;130&quot; style=&quot;border:0;border-radius:0;&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class=&quot;booklog_html_info&quot; style=&quot;padding-left:20px;&quot;&gt;&lt;div class=&quot;booklog_html_title&quot; style=&quot;margin-bottom:10px;font-size:14px;font-weight:bold;&quot;&gt;&lt;a href=&quot;https://gihyo.jp/dp/ebook/2015/978-4-7741-7879-0&quot; target=&quot;_blank&quot;&gt;APIデザインケーススタディ ――Rubyの実例から学ぶ。問題に即したデザインと普遍の考え方&lt;/a&gt;&lt;/div&gt;&lt;div style=&quot;margin-bottom:10px;&quot;&gt;&lt;div class=&quot;booklog_html_author&quot; style=&quot;margin-bottom:15px;font-size:12px;;line-height:1.2em&quot;&gt;著者 : &lt;a href=&quot;http://booklog.jp/author/%E7%94%B0%E4%B8%AD%E5%93%B2%E8%91%97&quot; target=&quot;_blank&quot;&gt;田中哲著&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;booklog_html_manufacturer&quot; style=&quot;margin-bottom:5px;font-size:12px;;line-height:1.2em&quot;&gt;株式会社技術評論社&lt;/div&gt;&lt;div class=&quot;booklog_html_release&quot; style=&quot;font-size:12px;;line-height:1.2em&quot;&gt;発売日 : 2015-12-16&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;booklog_html_link_amazon&quot;&gt;&lt;a href=&quot;http://booklog.jp/item/13/9784774178790&quot; style=&quot;font-size:12px;&quot; target=&quot;_blank&quot;&gt;ブクログでレビューを見る»&lt;/a&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;本当は25日に読み終わったのだけど、昨日はSendagaya.rbのことを書いたので、話題を分けるために今日にした。こういう時、&lt;a href=&quot;http://www.tdiary.org/&quot;&gt;tDiary&lt;/a&gt;が恋しくなる。日記の為のソフトウェアだから、一日に複数の話題を書くことが、自然にできる。&lt;/p&gt;

&lt;p&gt;この本は「I/O」「ソケット」「プロセス」「時刻」「数、文字列」の五章で構成されている。個人的にこれを&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;OSとの間を埋める（「I/O」、「ソケット」、「プロセス」）&lt;/li&gt;
  &lt;li&gt;人間社会との間を埋める（「時刻」）&lt;/li&gt;
  &lt;li&gt;その他（「数、文字列」）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;と捉えた。&lt;/p&gt;

&lt;h2 id=&quot;os&quot;&gt;OSとの間を埋める&lt;/h2&gt;

&lt;p&gt;RubyのI/Oやプロセスなどに関するクラスは、システムコールやglibcの関数を、インターフェイスは模倣して、内部では呼び出すのを原則としてデザインされている。その中でも、そのままglibcからRubyに移植せず、敢えて異なるインターフェイスや動作にしたほうがいい所があったのでそうした、や、ユースケースを考えるとメソッドを追加したほうがいいからそうした、などの事例が紹介されている。それぞれに調査結果、考察、決断が述べられていて、単なるカタログにはなっていなくてケーススタディする内容があり、面白い。&lt;/p&gt;

&lt;p&gt;僕はRubyのユーザーではあるけれど、Cは書けない。拡張ライブラリーは使う一方だし、OSのシステムコールなども直接触ることはまずない。&lt;a href=&quot;http://docs.ruby-lang.org/ja/2.3.0/method/IO/i/read_nonblock.html&quot;&gt;IO#read_nonblock&lt;/a&gt;なども、使うことはあってリファレンスマニュアルは読むけど、そこに書いていることで満足して、それでも不明なところは（Rubyプログラムを）動かして確認してから使っていた。この本では、そういった部分のOS側の話なども解説した上で、Rubyではどうしたかと話してくれるので、デザインだけでなく、APIその物の勉強にもなる。「自分が触っている部分の一つ下のレイヤーも理解しておくべきだ」とはよく言われることで、でも中々実践は難しい、その部分を行えるので助かる。&lt;/p&gt;

&lt;p&gt;また、余談になるが、ノンブロッキングI/Oという言葉は非常によく聞くし、一応、&lt;a href=&quot;http://rubyeventmachine.com/&quot;&gt;EventMachine&lt;/a&gt;や&lt;a href=&quot;https://nodejs.org/en/&quot;&gt;Node.js&lt;/a&gt;などで使えてはいるつもりだ。でも、下のレイヤーでは、ファイルディスクリプターにブロッキングモードとノンブロッキングモードがあって、ノンブロッキングモードの時にアクセスして読み取り可能でなければこういうエラーになって、という仕組みになっていたことは全く知らなかった。この知識が、直後に読み始めた『&lt;a href=&quot;https://gihyo.jp/dp/ebook/2016/978-4-7741-7936-0&quot;&gt;nginx実践入門&lt;/a&gt;』の最初のほうで活きたので思わず顔がにやけた。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;人間社会との間を埋める&lt;/h2&gt;

&lt;p&gt;第4章は時刻の話。ここはもう、人間側の都合に合わせる話が圧巻。&lt;/p&gt;

&lt;p&gt;閏秒があるから将来の日時を正確に表すことは不可能、というのは序の口で、日本にいると、UTCにタイムゾーンオフセットを足せばいいんでしょ？　くらいに考えてしまうかも知れないけど夏時間があったらそうはいかない。夏時間、いつから夏時間で、いつまで夏時間か、どのように決まるのか、知っていますか？　僕は知らなかった。「毎年これこれの月のこれこれの曜日」みたいに決まっているのはいい方で、太陰暦に従うとか、その年にならないと政府が決めないとか、ほんと色々ある。夏時間の切り替わりのタイミングでは、存在しない日時や二重に存在する日時が存在するので、日時の扱いは慎重さが必要になってくる。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;その他&lt;/h2&gt;

&lt;p&gt;ここは数値関連の色々な話。ここまで読んでいれば、APIデザインのパターンに少しは慣れているので、なるほどなるほどとさくさく進む章だった。&lt;/p&gt;

&lt;p&gt;「終わりに」で&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ところで、意識的に使いやすさをデザインするにあたって、具体例と並んで存在して欲しいのは、使いやすさの理論です。理論があれば、個々の具体例がどのような理屈で使いやすさを実現しているか、理解しやすくなりますし、目の前の問題を解決するライブラリをどうデザインするのが良いのか、という見通しを与えてくれるでしょう。さらには、使いにくさという問題を発見することにも役に立つかもしれません。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;残念なことに、今のところ、そのような理論で満足できるものはなさそうです。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ということが述べられていた。何気ない文のようだが、最後まで読んだ所で「意識的に使いやすさをデザイン」と言われると、とても重みがある。&lt;/p&gt;

</content>
    <id>https://kitaitimakoto.github.io/apehuci/2016/01/26.html</id>
    <link href="https://kitaitimakoto.github.io/apehuci/2016/01/26.html"
      type="text/html"/>
    <title>『APIデザインケーススタディ』を読んだ</title>
    <updated>2016-01-26T00:00:00Z</updated>
    <dc:date>2016-01-26T00:00:00Z</dc:date>
  </entry>
  <entry>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://sendagayarb.doorkeeper.jp/events/38134&quot;&gt;Sendagaya.rb #134&lt;/a&gt;に参加して『メタプログラミングRuby』の読書会をして来た。今日は初参加、それも「最近Ruby始めたばかりで……」とか「プログラミングを始めたばかりで……」という人がすごく多かった。何があったんだろう？&lt;/p&gt;

&lt;p&gt;先週に引き続き『&lt;a href=&quot;https://www.oreilly.co.jp/books/9784873117430/&quot;&gt;メタプログラミングRuby 第2版&lt;/a&gt;』を読んだ。&lt;/p&gt;
&lt;div class=&quot;booklog_html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;booklog_html_image&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/%E3%83%A1%E3%82%BF%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0Ruby-%E7%AC%AC2%E7%89%88-Paolo-Perrotta/dp/4873117437%3FSubscriptionId%3D0AVSM5SVKRWTFMG7ZR82%26tag%3Dbooklog.jp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4873117437&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/5102wwx0VzL._SL160_.jpg&quot; width=&quot;117&quot; height=&quot;150&quot; style=&quot;border:0;border-radius:0;&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class=&quot;booklog_html_info&quot; style=&quot;padding-left:20px;&quot;&gt;&lt;div class=&quot;booklog_html_title&quot; style=&quot;margin-bottom:10px;font-size:14px;font-weight:bold;&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/%E3%83%A1%E3%82%BF%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0Ruby-%E7%AC%AC2%E7%89%88-Paolo-Perrotta/dp/4873117437%3FSubscriptionId%3D0AVSM5SVKRWTFMG7ZR82%26tag%3Dbooklog.jp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4873117437&quot; target=&quot;_blank&quot;&gt;メタプログラミングRuby 第2版&lt;/a&gt;&lt;/div&gt;&lt;div style=&quot;margin-bottom:10px;&quot;&gt;&lt;div class=&quot;booklog_html_author&quot; style=&quot;margin-bottom:15px;font-size:12px;;line-height:1.2em&quot;&gt;著者 : &lt;a href=&quot;http://booklog.jp/author/Paolo+Perrotta&quot; target=&quot;_blank&quot;&gt;Paolo Perrotta&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;booklog_html_manufacturer&quot; style=&quot;margin-bottom:5px;font-size:12px;;line-height:1.2em&quot;&gt;オライリージャパン&lt;/div&gt;&lt;div class=&quot;booklog_html_release&quot; style=&quot;font-size:12px;;line-height:1.2em&quot;&gt;発売日 : 2015-10-10&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;booklog_html_link_amazon&quot;&gt;&lt;a href=&quot;http://booklog.jp/item/1/4873117437&quot; style=&quot;font-size:12px;&quot; target=&quot;_blank&quot;&gt;ブクログでレビューを見る»&lt;/a&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;「2.2.5 ネームスペースを使う」から15分みんなで黙読して、その後に気になることなどを話した。この「気になること」が盛り上がって、今日は他のことはしなかった。結構知らないことが書いてあって（第1版読んだはずなんだけど殆ど憶えてない……）面白い。&lt;/p&gt;

&lt;p&gt;例えばコラムで&lt;a href=&quot;http://docs.ruby-lang.org/ja/2.3.0/method/Kernel/m/load.html&quot;&gt;load&lt;/a&gt;に触れていた。普通&lt;code class=&quot;highlighter-rouge&quot;&gt;load&lt;/code&gt;は呼ぶ度にスクリプトが実行されるので、定数定義があると再定義の警告が表示されてしまう。ところが第二引数に&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;を渡して&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'defining-constants.rb'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;と呼ぶと、この警告が避けられる。なぜかというと、「第二引数に&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;を渡すと、無名モジュールが作成され、スクリプトはその中で実行されるから」だと本では説明されている。「なるほどそうなのか、第二引数のこと知らなかった、勉強になったなあ」と、僕はあっさり流していたが、参加者から「無名モジュールってなんですか」っていう声が上がってそう言えば、知らないな、と思った。無名クラス（匿名クラス）はたまに使うのでそこからの類推と、文脈と合わせて勝手にイメージを作って納得していたが、知らない。ということで、デスクトップをプロジェクターで映していた&lt;a href=&quot;http://fukajun.org/&quot;&gt;fukajun&lt;/a&gt;さんがターミナルを出して、動かしてくれる。みんなで「こういうことかな」「じゃあこういう時はこうなるのかな」などと言っていると、それも全部実行してくれる。こうしてみんなで無名モジュール（anonymous module。僕は匿名モジュールと呼びたい）の理解を深めた。（&lt;ins&gt;翻訳の角さんから、無名、匿名についてこんなコメントを頂いた。&lt;a href=&quot;https://twitter.com/kdmsnr/status/691839083266641920&quot;&gt;https://twitter.com/kdmsnr/status/691839083266641920&lt;/a&gt;。うーんなるほど、勉強になる……。&lt;/ins&gt;）&lt;/p&gt;

&lt;p&gt;その後&lt;code class=&quot;highlighter-rouge&quot;&gt;Class&lt;/code&gt;のクラスは？　&lt;code class=&quot;highlighter-rouge&quot;&gt;Module&lt;/code&gt;のクラスは？　&lt;code class=&quot;highlighter-rouge&quot;&gt;Module&lt;/code&gt;のスーパークラスは？　みたいな話が出ていて、Ruby始めたばかりの人がぴんとこないということだったのでその解説をしたりもした（&lt;a href=&quot;https://twitter.com/tkawa&quot;&gt;tkawa&lt;/a&gt;さんが）。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://docs.ruby-lang.org/ja/2.3.0/method/Module/i/prepend.html&quot;&gt;prepend&lt;/a&gt;は第1版にはなかったこともあってかなり盛り上がった。次の記事を見て老害がノスタルジーに浸りながら&lt;code class=&quot;highlighter-rouge&quot;&gt;alias_method_chain&lt;/code&gt;の仕組みを解説したりもした。&lt;br /&gt;
&lt;a href=&quot;http://www.techscore.com/blog/2013/01/22/ruby2-0%E3%81%AEmodule-prepend%E3%81%AF%E5%A6%82%E4%BD%95%E3%81%AB%E3%81%97%E3%81%A6alias_method_chain%E3%82%92%E6%92%B2%E6%BB%85%E3%81%99%E3%82%8B%E3%81%AE%E3%81%8B%EF%BC%81%EF%BC%9F/&quot;&gt;Ruby2.0のModule#prependは如何にしてalias_method_chainを撲滅するのか！？&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;本に戻って、文中、&lt;code class=&quot;highlighter-rouge&quot;&gt;prepend&lt;/code&gt;に関して、こういう風に動作を説明してくれる。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;M1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;M2&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;M1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;M3&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;prepend&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;M1&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;M2&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;M3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ancestors&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [M1, M3, M2]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;prepend&lt;/code&gt;した&lt;code class=&quot;highlighter-rouge&quot;&gt;M1&lt;/code&gt;が&lt;code class=&quot;highlighter-rouge&quot;&gt;M3&lt;/code&gt;の&lt;strong&gt;前&lt;/strong&gt;に差し込まれて、&lt;code class=&quot;highlighter-rouge&quot;&gt;include&lt;/code&gt;した&lt;code class=&quot;highlighter-rouge&quot;&gt;M2&lt;/code&gt;が&lt;strong&gt;後&lt;/strong&gt;に置かれている。一度継承ツリーに入ったモジュールは二度は入らない。説明の通りだ。では、&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;M3&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;M2&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;prepend&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;M1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;と順番を変えたら、&lt;code class=&quot;highlighter-rouge&quot;&gt;M3.ancestors&lt;/code&gt;はどうなるだろうか。実行せずに答えられるだろうか？　その答えに、どのくらい確信を持てるだろうか？　これも、各々推測を述べた後、「fukajunターミナル」で実行して、回答を得たりした。&lt;/p&gt;

&lt;p&gt;こういう、一人で本を読んでいるだけだと見逃しがちなことも、誰かが気付いて声を上げてくれるので読書会中々いいです。ただ（と言っても別に悪いとは思ってないけど）、このやり方は時間は掛かる。ので今日のSendagaya.rbはここで終わった。&lt;/p&gt;

&lt;p&gt;次回は&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;『メタプログラミングRuby』引き続き&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://rubyonrails.org/doctrine/&quot;&gt;The Rails Doctrine&lt;/a&gt;を読んで何か話す&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.heroku.com/archives/2016/1/22/rails-5-beta-upgrade&quot;&gt;Upgrading to Rails 5 Beta - The Hard Way&lt;/a&gt;を読んでRails 5へのアップグレードの辛さを感じる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;なんかがいいですかねえ、って話をしていたけど、来週その場で決まることでしょう。&lt;/p&gt;

&lt;p&gt;ちなみに、今回は開催前日にDoorkeeperのイベントが作成されたけど、次回分はその日のうちに作成されていたので、もう申し込める：&lt;br /&gt;
&lt;a href=&quot;https://sendagayarb.doorkeeper.jp/events/38208&quot;&gt;https://sendagayarb.doorkeeper.jp/events/38208&lt;/a&gt;&lt;/p&gt;

</content>
    <id>https://kitaitimakoto.github.io/apehuci/2016/01/25.html</id>
    <link href="https://kitaitimakoto.github.io/apehuci/2016/01/25.html"
      type="text/html"/>
    <title>『メタプログラミングRuby 第2版』@Sendagaya.rb #134</title>
    <updated>2016-01-25T00:00:00Z</updated>
    <dc:date>2016-01-25T00:00:00Z</dc:date>
  </entry>
  <entry>
    <content type="html">&lt;p&gt;&lt;a href=&quot;http://droonga.org/ja/&quot;&gt;Droonga&lt;/a&gt;は、しばらく&lt;a href=&quot;http://droonga.org/ja/install/&quot;&gt;マニュアル&lt;/a&gt;通りにインストールできない状態だったので、インストーラーを直してプルリクエストを送った。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/droonga/droonga-engine/pull/39&quot;&gt;https://github.com/droonga/droonga-engine/pull/39&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/droonga/droonga-http-server/pull/13&quot;&gt;https://github.com/droonga/droonga-http-server/pull/13&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;（マージしてもらった後に問題に気付いて追加でちょいちょいパッチを投げてもいる）&lt;/p&gt;

&lt;p&gt;マージされたものの、今はまだ修正版がリリースはされていないので、それぞれこういう風に&lt;code class=&quot;highlighter-rouge&quot;&gt;VERSION&lt;/code&gt;環境変数を指定してインストールする必要がある。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# curl https://raw.githubusercontent.com/droonga/droonga-engine/master/install.sh | \
    VERSION=master bash
# curl https://raw.githubusercontent.com/droonga/droonga-http-server/master/install.sh | \
    VERSION=master bash
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;リリースされたら&lt;code class=&quot;highlighter-rouge&quot;&gt;VERSION=master&lt;/code&gt;はなくてもインストールできるようになる。&lt;/p&gt;

&lt;p&gt;また、マニュアルでは&lt;code class=&quot;highlighter-rouge&quot;&gt;service&lt;/code&gt;コマンドでDroongaの二つのプロセスを管理しているけど、今回のパッチで&lt;a href=&quot;http://freedesktop.org/wiki/Software/systemd/&quot;&gt;systemd&lt;/a&gt;を使うようになったので、今マニュアルを直しているところ。来週中にはパッチを送れるはず。&lt;/p&gt;

&lt;p&gt;マニュアル通りに入れられないこと自体は認識していて、ワークアラウンド入りの&lt;a href=&quot;http://itamae.kitchen/&quot;&gt;Itamae&lt;/a&gt;レシピを作って使っていた（&lt;a href=&quot;../../2015/12/05.html&quot;&gt;DroongaをインストールするItamaeレシピ&lt;/a&gt;）。後ろめたさがあった。スキル的には自分で直せるはずなのにそうしていないのは愚か、問題報告すらしていなかった。今回修正して、受け入れてもらって、喉の小骨がようやく取り除けた気分だ。&lt;/p&gt;

&lt;p&gt;恥ずかしながらシェルスクリプトに不慣れで、プルリクエストを送ったあとで、色々指摘してもらいながら直していた。ありがとうございました。&lt;/p&gt;

&lt;p&gt;systemdのunitファイルにも不安があるので、こうしたほうがいいよというのがあったらぜひ教えてほしい。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/droonga/droonga-engine/blob/master/install/droonga-engine.service&quot;&gt;droonga-engine.service&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/droonga/droonga-http-server/blob/master/install/droonga-http-server.service&quot;&gt;droonga-http-server.service&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
    <id>https://kitaitimakoto.github.io/apehuci/2016/01/24.html</id>
    <link href="https://kitaitimakoto.github.io/apehuci/2016/01/24.html"
      type="text/html"/>
    <title>Droongaのインストーラーを直した</title>
    <updated>2016-01-24T00:00:00Z</updated>
    <dc:date>2016-01-24T00:00:00Z</dc:date>
  </entry>
  <entry>
    <content type="html">&lt;p&gt;久し振りに&lt;a href=&quot;https://shibuyarb.doorkeeper.jp/events/37064&quot;&gt;渋谷.rb[:20160120]&lt;/a&gt;に行って来た。初参加の人が半分近くいて、すごいなあと思った。&lt;/p&gt;

&lt;p&gt;予め予告のあった&lt;a href=&quot;https://docs.google.com/presentation/d/1RTUIJYJUCx_8MRj4hHx7uPbMOQSmCIF3Nobrttd1HfQ/edit&quot;&gt;主人がExcel方眼紙に殺されてRubyを書き始めてから5ヶ月が過ぎました&lt;/a&gt;っていう発表のほか、みんな何かしら話すことがあって、九時過ぎまで発表が続いていた。中でも&lt;a href=&quot;https://github.com/yuku-t&quot;&gt;yuku-t&lt;/a&gt;さんの発表が印象に残っていて、最終的には&lt;a href=&quot;https://github.com/yuku-t/duck_testing&quot;&gt;duck_testing&lt;/a&gt;っていうRubyGemの紹介と「いい感じにしてほしい」というお願いになったんだけど、このgemを作るに至る経緯の説明がよかった。&lt;/p&gt;

&lt;p&gt;基本的には、型でチェックしたいという話。だから、各メソッドにはYARD向けのコメントで引数の型と戻り値の型を書いている。でも当然ながらYARDのコメントをRubyは見てくれないので、&lt;a href=&quot;https://github.com/egonSchiele/contracts.ruby&quot;&gt;contracts.ruby&lt;/a&gt;の導入を検討した。でも、実装方法が危なっかしい（中では、古い人は知っているかも知れない、&lt;a href=&quot;https://github.com/michaelfairley/method_decorators&quot;&gt;MethodDecorators&lt;/a&gt;を使っている）のと、本番でオフにできないので、やめた。YARDのコメントを読み取って自動で型に関するテストを生成し実行する、というgemを作ったとのこと。&lt;/p&gt;

&lt;p&gt;YARDはコードの解析に&lt;a href=&quot;http://docs.ruby-lang.org/ja/2.3.0/class/Ripper.html&quot;&gt;Ripper&lt;/a&gt;を使っていて、そのASTにプラグインからアクセスできるので、contarcts.ruby用のプラグインを書けばそこからドキュメントを自動生成できるはずだし、事実そういうYARDプラグインがあるらしい。でも既にYARD向けのコメントをたくさん書いていて、それを全部直して回るのは大変。さらに、YARDでドキュメントコメントを書いているgemは多いので、そこに一行足すだけで自動的にテスまでできるという物は、多くの人に役立つはずだ、という説明がされた。最後の、自分の問題を解決すると、より多くの人の問題も、労力無く解決できるという視点が素晴らしいなと思った。期待したい。&lt;/p&gt;

&lt;p&gt;僕は先日の日記に書いた&lt;a href=&quot;16.html&quot;&gt;『nginx実践入門』をシンタックスハイライトする&lt;/a&gt;の内容をデモしつつ、「コードからその言語を判定するところ、今は目視でやって設定をハードコードしていて辛いので、やってくれるgemを知っている人がいたら教えてください」という相談をしてきた。その後の夕食の時とかに聞くと、意外とこれが反響があって嬉しかった。もうちょっと抽象化してgemにしたいなという気持ちになってきた。&lt;/p&gt;

&lt;p&gt;あと、渋谷.rbとは関係ないけど日記なので書くと、&lt;a href=&quot;https://github.com/KitaitiMakoto/itamae-plugin-resource-security_context&quot;&gt;itamae-plugin-resource-security_context&lt;/a&gt;というItamaeプラグインをリリースした。今のところ&lt;code class=&quot;highlighter-rouge&quot;&gt;restorecon&lt;/code&gt;をするだけだけど、仕事で必要になるに連れてほかのこともできるようにしていきたい。SELinux使っている人がもしいたら、一緒に開発していきましょう……。&lt;/p&gt;

</content>
    <id>https://kitaitimakoto.github.io/apehuci/2016/01/20.html</id>
    <link href="https://kitaitimakoto.github.io/apehuci/2016/01/20.html"
      type="text/html"/>
    <title>渋谷.rb[:20160120]</title>
    <updated>2016-01-20T00:00:00Z</updated>
    <dc:date>2016-01-20T00:00:00Z</dc:date>
  </entry>
  <entry>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://sendagayarb.doorkeeper.jp/events/37324&quot;&gt;Sendagaya.rb #133&lt;/a&gt;に行って来た。今日は、前半『&lt;a href=&quot;https://www.oreilly.co.jp/books/9784873117430/&quot;&gt;メタプログラミングRuby 第2版&lt;/a&gt;』を読んで、後半は&lt;a href=&quot;https://github.com/rails/rails/tree/master/actioncable&quot;&gt;Action Cable&lt;/a&gt;を読んだ。&lt;/p&gt;

&lt;h2 id=&quot;ruby-2&quot;&gt;メタプログラミングRuby 第2版&lt;/h2&gt;

&lt;div class=&quot;booklog_html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;booklog_html_image&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/%E3%83%A1%E3%82%BF%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0Ruby-%E7%AC%AC2%E7%89%88-Paolo-Perrotta/dp/4873117437%3FSubscriptionId%3D0AVSM5SVKRWTFMG7ZR82%26tag%3Dbooklog.jp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4873117437&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/5102wwx0VzL._SL160_.jpg&quot; width=&quot;117&quot; height=&quot;150&quot; style=&quot;border:0;border-radius:0;&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class=&quot;booklog_html_info&quot; style=&quot;padding-left:20px;&quot;&gt;&lt;div class=&quot;booklog_html_title&quot; style=&quot;margin-bottom:10px;font-size:14px;font-weight:bold;&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/%E3%83%A1%E3%82%BF%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0Ruby-%E7%AC%AC2%E7%89%88-Paolo-Perrotta/dp/4873117437%3FSubscriptionId%3D0AVSM5SVKRWTFMG7ZR82%26tag%3Dbooklog.jp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4873117437&quot; target=&quot;_blank&quot;&gt;メタプログラミングRuby 第2版&lt;/a&gt;&lt;/div&gt;&lt;div style=&quot;margin-bottom:10px;&quot;&gt;&lt;div class=&quot;booklog_html_author&quot; style=&quot;margin-bottom:15px;font-size:12px;;line-height:1.2em&quot;&gt;著者 : &lt;a href=&quot;http://booklog.jp/author/Paolo+Perrotta&quot; target=&quot;_blank&quot;&gt;Paolo Perrotta&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;booklog_html_manufacturer&quot; style=&quot;margin-bottom:5px;font-size:12px;;line-height:1.2em&quot;&gt;オライリージャパン&lt;/div&gt;&lt;div class=&quot;booklog_html_release&quot; style=&quot;font-size:12px;;line-height:1.2em&quot;&gt;発売日 : 2015-10-10&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;booklog_html_link_amazon&quot;&gt;&lt;a href=&quot;http://booklog.jp/item/1/4873117437&quot; style=&quot;font-size:12px;&quot; target=&quot;_blank&quot;&gt;ブクログでレビューを見る»&lt;/a&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://fukajun.org/&quot;&gt;fukajun&lt;/a&gt;さんが「本を読むってどうやってやるんですかねえ？」って言ったけど誰も答えを持ち合わせていなかった。十五分みんな黙読し、その後気になったことを話すというスタイルになった。範囲は「2章 月曜日：オブジェクトモデル」の始めから「2.2.4 オブジェクトとクラスのまとめ」まで。みんなRubyを書けるので特に問題がなく、字が汚いとか&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Rake&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Task&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;を&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Rake&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Task&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;って書いたら&lt;a href=&quot;https://houndci.com/&quot;&gt;HoundCI&lt;/a&gt;に怒られるんだけどなんでだろう？　といったことを話していた。&lt;/p&gt;

&lt;p&gt;次回は「2.2.5 ネームスペースを使う」から。毎週ちょっとずつは読むとのこと。&lt;/p&gt;

&lt;p&gt;また、ここのところ本にシンタックスハイライトを入れるのをやっていたので、この本も帰ったらやろうと思っていたが、始めからハイライトされていた。
&lt;a href=&quot;https://gyazo.com/bcd51dd81e50c33c4b8fe5d714ca8887&quot;&gt;&lt;img src=&quot;https://gyazo.com/bcd51dd81e50c33c4b8fe5d714ca8887.png&quot; alt=&quot;『メタプログラミングRuby 第2版』は始めからシンタックスハイライトされている&quot; style=&quot;max-width: 80%;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;action-cable&quot;&gt;Action Cable&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ApplicationCable::Channel&lt;/code&gt;のユーザー定義のメソッドのスタックトレースを遡って、どこから呼ばれるのかを見ていった。&lt;/p&gt;

&lt;p&gt;fukajunさんがプロジェクターで映しながらエディターを開いてソースを追い掛け、みんなで横からああだこおだと言っていた。読んだのはだいたいこの辺。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/rails/rails/blob/39f383bad01e52c217c9007b5e9d3b239fe6a808/actioncable/lib/action_cable/connection/subscriptions.rb&quot;&gt;action_cable/connection/subscriptions.rb&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/rails/rails/blob/39f383bad01e52c217c9007b5e9d3b239fe6a808/actioncable/lib/action_cable/connection/message_buffer.rb&quot;&gt;action_cable/connection/message_buffer.rb&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/rails/rails/blob/39f383bad01e52c217c9007b5e9d3b239fe6a808/actioncable/lib/action_cable/server/worker.rb&quot;&gt;action_cable/server/worker.rb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一度&lt;a href=&quot;https://github.com/celluloid/celluloid&quot;&gt;Celluloid&lt;/a&gt;をやめて&lt;a href=&quot;https://github.com/ruby-concurrency/concurrent-ruby&quot;&gt;Concurrent Ruby&lt;/a&gt;にしたところ（&lt;a href=&quot;https://github.com/rails/rails/commit/3b7ccadfc1c8dfec61af898167e1300b17f5cf25&quot;&gt;3b7ccad&lt;/a&gt;）、それを巻き戻し（&lt;a href=&quot;https://github.com/rails/rails/commit/d0393fccffc118a5de37654aa222774b66123393&quot;&gt;d0393fc&lt;/a&gt;）、更にまた巻き戻す（&lt;a href=&quot;https://github.com/rails/rails/commit/01c320001bcce617196270f3d398d48a89a6ea2a&quot;&gt;01c3200&lt;/a&gt;）ということをしていて、この辺の扱い大変なんだなあという話をした。使いたいのはCelluloidの方であるようだ（&lt;a href=&quot;https://github.com/rails/rails/pull/22977&quot;&gt;#22977&lt;/a&gt;）。&lt;/p&gt;

&lt;p&gt;ここを読んだおかげで、&lt;a href=&quot;http://necojackarc.hatenablog.com/entry/2015/12/20/043612&quot;&gt;Rails5.0.0-beta1のActionCableを使って超簡易チャットを実装してみた&lt;/a&gt;にある&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MessagesController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;ActionCable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;broadcast&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;messages&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;message: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;username: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cookies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;signed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;みたいなコードを見ても驚かずに「なるほど&lt;code class=&quot;highlighter-rouge&quot;&gt;ActionCable.server.broadcast&lt;/code&gt;に渡している&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;messages&quot;&lt;/code&gt;コマンドは別スレッドで実行されるからここはブロックせずに、即座にブラウザーに応答することができるんだな」と考えることができるようになった（でも、僕は気にならないけど、コントローラー内でこういうことするのに違和感を覚える人もいた）。&lt;/p&gt;

&lt;h2 id=&quot;electronrails-assetsjavascript&quot;&gt;electron、rails-assets、JavaScript生態系&lt;/h2&gt;

&lt;p&gt;なんかelectronが盛り上がってるらしく、夕食を頂きながら仕組みとかHTMLで作るのどうなの？　とか、rails-assetsとか派生してJavaScriptの開発環境って今どんな感じなの？　といった話をした。&lt;/p&gt;

</content>
    <id>https://kitaitimakoto.github.io/apehuci/2016/01/18.html</id>
    <link href="https://kitaitimakoto.github.io/apehuci/2016/01/18.html"
      type="text/html"/>
    <title>Sendagaya.rb #133</title>
    <updated>2016-01-18T00:00:00Z</updated>
    <dc:date>2016-01-18T00:00:00Z</dc:date>
  </entry>
  <entry>
    <content type="html">&lt;p&gt;『&lt;a href=&quot;https://gihyo.jp/dp/ebook/2016/978-4-7741-7936-0&quot;&gt;nginx実践入門&lt;/a&gt;』を買った。&lt;/p&gt;
&lt;div class=&quot;booklog_html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;booklog_html_image&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/nginx%E5%AE%9F%E8%B7%B5%E5%85%A5%E9%96%80-WEB-DB-PRESS-plus-%E4%B9%85%E4%BF%9D/dp/4774178667%3FSubscriptionId%3D0AVSM5SVKRWTFMG7ZR82%26tag%3Dbooklog.jp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4774178667&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/511NShYrT8L._SL160_.jpg&quot; width=&quot;105&quot; height=&quot;150&quot; style=&quot;border:0;border-radius:0;&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class=&quot;booklog_html_info&quot; style=&quot;padding-left:20px;&quot;&gt;&lt;div class=&quot;booklog_html_title&quot; style=&quot;margin-bottom:10px;font-size:14px;font-weight:bold;&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/nginx%E5%AE%9F%E8%B7%B5%E5%85%A5%E9%96%80-WEB-DB-PRESS-plus-%E4%B9%85%E4%BF%9D/dp/4774178667%3FSubscriptionId%3D0AVSM5SVKRWTFMG7ZR82%26tag%3Dbooklog.jp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4774178667&quot; target=&quot;_blank&quot;&gt;nginx実践入門 (WEB+DB PRESS plus)&lt;/a&gt;&lt;/div&gt;&lt;div style=&quot;margin-bottom:10px;&quot;&gt;&lt;div class=&quot;booklog_html_author&quot; style=&quot;margin-bottom:15px;font-size:12px;;line-height:1.2em&quot;&gt;著者 : &lt;a href=&quot;http://booklog.jp/author/%E4%B9%85%E4%BF%9D%E9%81%94%E5%BD%A6&quot; target=&quot;_blank&quot;&gt;久保達彦&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;booklog_html_manufacturer&quot; style=&quot;margin-bottom:5px;font-size:12px;;line-height:1.2em&quot;&gt;技術評論社&lt;/div&gt;&lt;div class=&quot;booklog_html_release&quot; style=&quot;font-size:12px;;line-height:1.2em&quot;&gt;発売日 : 2016-01-16&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;booklog_html_link_amazon&quot;&gt;&lt;a href=&quot;http://booklog.jp/item/1/4774178667&quot; style=&quot;font-size:12px;&quot; target=&quot;_blank&quot;&gt;ブクログでレビューを見る»&lt;/a&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;早速設定ファイルの所などをシンタックスハイライトした。
&lt;a href=&quot;https://gyazo.com/7fa685b4b5ff7ab226c72794b5a89d4b&quot;&gt;&lt;img src=&quot;https://gyazo.com/7fa685b4b5ff7ab226c72794b5a89d4b.png&quot; alt=&quot;Nginxの設定ファイルがシンタックスハイライトされている&quot; style=&quot;max-width: 60%;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;以下の手順で再現可能。本のEPUBファイルが&lt;code class=&quot;highlighter-rouge&quot;&gt;path/to/nginx実践入門.epub&lt;/code&gt;にあるものとする。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gem install epub-parser -v '&amp;gt;= 0.2.4'
$ gem install epub-maker -v 0.0.3
$ gem install rouge rouge-lexers-docker
$ git clone https://gist.github.com/0779a34fd74bae96468f.git rougify-gdp-book
$ cd rougify-gdp-book
$ ruby rougify-gdp-book.rb path/to/nginx実践入門.epub
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;EPUBファイルを&lt;strong&gt;上書きする&lt;/strong&gt;ので注意すること。&lt;/p&gt;

&lt;p&gt;『&lt;a href=&quot;https://gihyo.jp/dp/ebook/2015/978-4-7741-7879-0&quot;&gt;APIデザインケーススタディ&lt;/a&gt;』（&lt;a href=&quot;03.html&quot;&gt;『APIデザインケーススタディ』を、ソースコードのシンタックスハイライトしながら読む&lt;/a&gt;）とか『&lt;a href=&quot;https://gihyo.jp/dp/ebook/2015/978-4-7741-7464-8&quot;&gt;Dockerエキスパート養成読本&lt;/a&gt;』（&lt;a href=&quot;http://apehuci-kitaitimakoto.sqale.jp/apehuci/?date=20150705&quot;&gt;Dockerエキスパート養成読本を、ソースコードのシンタックスハイライトしながら読む&lt;/a&gt;）とか、EPUBファイルに後から手を加えてシンタックスハイライトしているけど、別にこれがそれほどいいことだとは思っていない。こういうことができるように、DRMなしのEPUBを売ってくれている技術評論社には感謝しているが、できれば本を作る時にハイライトを入れてくれるのが一番いいと思っている。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;追記&lt;/h2&gt;

&lt;p&gt;こんなコメントを貰った。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;“できれば本を作る時にハイライトを入れてくれるのが一番いいと思っている” モノクロ端末や誤認識を考えると入れるのに二の足を踏むのはあるかも / “『nginx実践入門』をシンタックスハイライトする” &lt;a href=&quot;https://t.co/xvneTcDdwf&quot;&gt;https://t.co/xvneTcDdwf&lt;/a&gt;&lt;/p&gt;&amp;mdash; masayoshi takahashi (@takahashim) &lt;a href=&quot;https://twitter.com/takahashim/status/688686509696811009&quot;&gt;2016, 1月 17&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;なるほど、確かに。色の区別がつきにくい人もいるし、白黒のままのほうがよさそうだ。切り替えられるように作るべきかは、悩ましいところ。&lt;/p&gt;

</content>
    <id>https://kitaitimakoto.github.io/apehuci/2016/01/16.html</id>
    <link href="https://kitaitimakoto.github.io/apehuci/2016/01/16.html"
      type="text/html"/>
    <title>『nginx実践入門』をシンタックスハイライトする</title>
    <updated>2016-01-16T00:00:00Z</updated>
    <dc:date>2016-01-16T00:00:00Z</dc:date>
  </entry>
  <entry>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://groonga.doorkeeper.jp/events/36432&quot;&gt;Groongaで学ぶ全文検索 2016-01-15&lt;/a&gt;に参加して来た。今日のテーマは運用、その中でもデータの守り方。&lt;/p&gt;

&lt;h2 id=&quot;rdbms&quot;&gt;RDBMSでのデータの守り方&lt;/h2&gt;

&lt;p&gt;Groongaの話の前に、ファイルとRDBMSでのデータの守り方の話をしてもらった。&lt;/p&gt;

&lt;p&gt;ファイルにデータを書き込むとデータが永続化する。書き込みの時に、途中で何らかの理由で中断が起きると途中までしか書き込まれない。「Hello」と書き込むつもりだったのに「Hel」までしか書き込まれていない、といったことが起こる。これはデータが守られていない状態だと言える。不測の事態のせいでおかしなデータを持つことになってしまっている。&lt;/p&gt;

&lt;p&gt;RDBMSでは、こういった「おかしなデータ」が存在しないように、トランザクションを使うようになっている。トランザクションを使うと、場合によってはデータが書き込まれていないことがあるが、途中まで書き込まれているというおかしな状態になるのは防ぐことができる。&lt;/p&gt;

&lt;p&gt;RDBMSがこうして頑張っていても、ストレージデバイスが壊れるとデータは失われてしまう。これを防ぐのは「運用」の仕事になる。&lt;/p&gt;

&lt;p&gt;データ消失を防ぐためには、何らかの方法でコピーを取る。コピーがあればあるだけ、それら全部が同時に壊れる可能性は低くなるので、データは守られる。ただ、お金が掛かったり帯域を使用したりするというトレードオフがある。&lt;/p&gt;

&lt;h2 id=&quot;groonga&quot;&gt;Groongaでのデータの守り方&lt;/h2&gt;

&lt;p&gt;ここまでがデータを守る運用の一般的な話で、ここから全文検索エンジン、特にGroonga族の話。&lt;/p&gt;

&lt;p&gt;全文検索エンジンはトランザクションに対応している物は少なく、Groongaも対応していない。こうした時におかしなデータという状態を防ぐには大きく分けて二つの方法がある。&lt;/p&gt;

&lt;p&gt;一つはデータベースのデータのバックアップを取っておいて、データ損失が起こったら、バックアップ時点へ巻き戻す方法。この場合、バックアップ時点から障害時点までの間に新しく作られたデータは失われ、更新されたデータは更新前の物に戻る。&lt;/p&gt;

&lt;p&gt;二つ目は、Groongaでデータがおかしな状態になったり失われたりするのを防ぐのは諦めて、マスターデータの方が失われないよう仕組みを整える方法。マスターデータがあれば、いつでもGroongaのインデックスを復旧できる。Groongaの運用では、こちらのほうが現実的。マスターデータの守り方は色々あるので、データの性質やシステムの条件などで適切な物を選ぶ。RDBMS上のデータをマスターとしたり、ファイルとして保存したり、クラウド上のデータストアに置いたり。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;復旧に掛かる時間&lt;/h2&gt;

&lt;p&gt;復旧することでデータを元に戻せるが、これに時間が掛かると、ダウンタイムがそれだけ長くなってしまう。上の二つ目、マスターデータを頑張って守る方法は、Groongaの復旧では一から全てのデータを入れ直すので、最も時間がかかる。&lt;/p&gt;

&lt;p&gt;一つ目の方法の時間の掛かり方は、バックアップ時点から障害時点までの間のデータの扱い次第。そこのデータを諦めるなら、バックアップが（コピーなどするだけで）そのまま使えるので復旧は速い。バックアップ時点から障害時点までは、コピーではなくて差分バックアップを取っておくようにする方法もある。この場合は、バックアップ時点までの復旧は速く、そこから差分バックアップの内容を適用する部分では時間が掛かる。&lt;/p&gt;

&lt;p&gt;また、一つ目の方法、コピーを取る方法のバリエーションとして、レプリケーションもある。レプリケーションは概ねリアルタイムに全データをバックアップ取れるが、デザイン上の問題やネットワーク遅延、マスターとレプリカ間の性能の違いなどで遅延はある。&lt;/p&gt;

&lt;h2 id=&quot;groonga-1&quot;&gt;Groongaでのバックアップ&lt;/h2&gt;

&lt;p&gt;Groongaにはトランザクションがないので、書き込み中に処理が止まるとデータがおかしなことになってしまう（ことがある）。マスターデータを用意して復旧に備えるのが現実的な運用になる。この時、前述の通り復旧に時間が掛かってしまうことになるが、普段サービスしている時は一つ一つ順にデータを書き込んでいるような物でも、まとめて一度に書き込めるモードがあって、これを使うとより速く復旧できる。また、そもそもGroongaは書き込み性能が高いので、RDBMSに比べると復旧は速い。&lt;/p&gt;

&lt;p&gt;Groonga族のMroonga、PGroongaでのバックアップは、それぞれのRDBMSの仕組みに乗るのがよい。それぞれトランザクションやレプリケーションがある。&lt;/p&gt;

&lt;p&gt;また、MySQLの場合、InnoDBのレプリケーション先としてMroongaを選ぶことができる。こうすると、（データが守られやすい）InnoDBをマスターデータとして考えることができる。&lt;/p&gt;

&lt;p&gt;PostgreSQLにもレプリケーションの仕組みはあるが、MySQLのレプリケーションの仕組みとはだいぶ違う。MySQLではINSERTなどの命令をレプリケーションに流すので、その命令をGroongaの物として読み替えることができた。PostgreSQLはファイルパスやファイル内のバイトオフセットなど物理的な位置を流してレプリケーションに使うので、この情報をGroongaのインデックス更新のために読み替えることができない。そこで、復旧の際には、PostgreSQLにREINDEXを書けてGroongaのインデックスを作り直すことになる。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;レプリケーションではまりがちな罠&lt;/h2&gt;

&lt;p&gt;また、全文検索エンジンに限らないがレプリケーションの運用について大事なことは、システムのキャパシティを考える時にレプリカを含んではいけないということだ。マスターとレプリカを含めた台数でちょうどさばけているようなシステムは、レプリカが一台落ちただけで、システム全体が検索をさばき切れなくなって、落ちたりする。&lt;/p&gt;

&lt;p&gt;レプリカは遊んでいるように見えるのでつい使いたくなるが使ってはいけない。正確には、レプリカを入れてちょうど検索を捌けるというようなプランニング、運用をしてはいけない。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;その他&lt;/h2&gt;

&lt;p&gt;気になったので聞いてみた。マスターDBでSSDを使うのはありなのか？　実際SSDで運用している人がいた。のでありなんだろうなあ。&lt;/p&gt;

&lt;p&gt;Groongaのデータをコピーやdumpコマンドによってバックアップ取る際、中途半端な状態のコピーになってしまうことはないのか？　ある。のでシステムから切り離してバックアップするとか、バックアップ専用にテーブルを作ってバックアップ取ったら消すとか、工夫して運用する必要がある。&lt;/p&gt;

</content>
    <id>https://kitaitimakoto.github.io/apehuci/2016/01/15.html</id>
    <link href="https://kitaitimakoto.github.io/apehuci/2016/01/15.html"
      type="text/html"/>
    <title>Groongaの運用（データの守り方）</title>
    <updated>2016-01-15T00:00:00Z</updated>
    <dc:date>2016-01-15T00:00:00Z</dc:date>
  </entry>
  <entry>
    <content type="html">&lt;p&gt;昨日（&lt;a href=&quot;02.html&quot;&gt;EPUB書籍に正誤表を反映する（Rubyスクリプトで）、またはEPUBのパッチプログラムの試み&lt;/a&gt;）に引き続き「ちゃんと正誤表を公表してくれる著者と、DRMをかけない素のEPUBファイルを配信してくれる出版社があればこそ」シリーズの第二弾（第三弾は多分無い）。&lt;/p&gt;

&lt;p&gt;以前&lt;a href=&quot;http://apehuci-kitaitimakoto.sqale.jp/apehuci/?date=20150705&quot;&gt;Dockerエキスパート養成読本を、ソースコードのシンタックスハイライトしながら読む&lt;/a&gt;という日記を書いたが、その時のスクリプトを修正して、『APIデザインケーススタディ』にも対応させた。&lt;/p&gt;
&lt;div class=&quot;booklog_html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;booklog_html_image&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/API%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%82%B1%E3%83%BC%E3%82%B9%E3%82%B9%E3%82%BF%E3%83%87%E3%82%A3-%7ERuby%E3%81%AE%E5%AE%9F%E4%BE%8B%E3%81%8B%E3%82%89%E5%AD%A6%E3%81%B6%E3%80%82%E5%95%8F%E9%A1%8C%E3%81%AB%E5%8D%B3%E3%81%97%E3%81%9F%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%81%A8%E6%99%AE%E9%81%8D%E3%81%AE%E8%80%83%E3%81%88%E6%96%B9-WEB-PRESS-plus/dp/4774178020%3FSubscriptionId%3D0AVSM5SVKRWTFMG7ZR82%26tag%3Dbooklog.jp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4774178020&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/514Ve4nSUZL._SL160_.jpg&quot; width=&quot;105&quot; height=&quot;150&quot; style=&quot;border:0;border-radius:0;&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class=&quot;booklog_html_info&quot; style=&quot;padding-left:20px;&quot;&gt;&lt;div class=&quot;booklog_html_title&quot; style=&quot;margin-bottom:10px;font-size:14px;font-weight:bold;&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/API%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%82%B1%E3%83%BC%E3%82%B9%E3%82%B9%E3%82%BF%E3%83%87%E3%82%A3-%7ERuby%E3%81%AE%E5%AE%9F%E4%BE%8B%E3%81%8B%E3%82%89%E5%AD%A6%E3%81%B6%E3%80%82%E5%95%8F%E9%A1%8C%E3%81%AB%E5%8D%B3%E3%81%97%E3%81%9F%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%81%A8%E6%99%AE%E9%81%8D%E3%81%AE%E8%80%83%E3%81%88%E6%96%B9-WEB-PRESS-plus/dp/4774178020%3FSubscriptionId%3D0AVSM5SVKRWTFMG7ZR82%26tag%3Dbooklog.jp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4774178020&quot; target=&quot;_blank&quot;&gt;APIデザインケーススタディ ~Rubyの実例から学ぶ。問題に即したデザインと普遍の考え方 (WEB+DB PRESS plus)&lt;/a&gt;&lt;/div&gt;&lt;div style=&quot;margin-bottom:10px;&quot;&gt;&lt;div class=&quot;booklog_html_author&quot; style=&quot;margin-bottom:15px;font-size:12px;;line-height:1.2em&quot;&gt;著者 : &lt;a href=&quot;http://booklog.jp/author/%E7%94%B0%E4%B8%AD%E5%93%B2&quot; target=&quot;_blank&quot;&gt;田中哲&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;booklog_html_manufacturer&quot; style=&quot;margin-bottom:5px;font-size:12px;;line-height:1.2em&quot;&gt;技術評論社&lt;/div&gt;&lt;div class=&quot;booklog_html_release&quot; style=&quot;font-size:12px;;line-height:1.2em&quot;&gt;発売日 : 2015-12-16&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;booklog_html_link_amazon&quot;&gt;&lt;a href=&quot;http://booklog.jp/item/1/4774178020&quot; style=&quot;font-size:12px;&quot; target=&quot;_blank&quot;&gt;ブクログでレビューを見る»&lt;/a&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;元々の本は（PDF版から類推するに）ソースコードの所も白黒のようだけど、こうしてハイライトして読むことができるようになる。&lt;/p&gt;
&lt;figure&gt;
  &lt;a href=&quot;https://gyazo.com/ed5d038aace704a0fcea8313dddf3fb9&quot; target=&quot;gyazo&quot;&gt;&lt;img src=&quot;//gyazo.com/ed5d038aace704a0fcea8313dddf3fb9.png&quot; alt=&quot;Rubyのコードがシンタックスハイライトされている&quot; style=&quot;max-width: 50%;&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://gyazo.com/5bf04bb00b3537f488e4811ceab3f826&quot; target=&quot;gyazo&quot;&gt;&lt;img src=&quot;//gyazo.com/5bf04bb00b3537f488e4811ceab3f826.png&quot; alt=&quot;PythonやPerlも含めソースコードがシンタックスハイライトされている&quot; style=&quot;max-width: 50%;&quot; /&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;スクリプトは前と同じ所に置いてある：&lt;br /&gt;
&lt;a href=&quot;https://gist.github.com/KitaitiMakoto/0779a34fd74bae96468f&quot;&gt;https://gist.github.com/KitaitiMakoto/0779a34fd74bae96468f&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;クローンなりダウンロードなりして&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ruby rougify-gdp-book.rb path/to/api-design.epub
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;と実行すればよい。&lt;/p&gt;

&lt;p&gt;これで、ようやく本を読む準備が整った。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ともあれ、&lt;strong&gt;こんなことができるのも、ちゃんと正誤表を公表してくれる著者と、DRMをかけない素のEPUBファイルを配信してくれる出版社があればこそ&lt;/strong&gt;。感謝したい。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;（&lt;a href=&quot;http://sho.tdiary.net/20151222.html&quot;&gt;&lt;cite&gt;EPUB書籍に正誤表を反映する&lt;/cite&gt;&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;である。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;スクリプトの修正にあたって、プログラミング言語の推測に苦労した（ハイライトに使っている&lt;a href=&quot;http://rouge.jneen.net/&quot;&gt;Rouge&lt;/a&gt;はshebangを見るくらいしかしてくれない）。主な方法は、「そのソースコードが含まれる節の見出し（&lt;code class=&quot;highlighter-rouge&quot;&gt;h2&lt;/code&gt;や&lt;code class=&quot;highlighter-rouge&quot;&gt;h3&lt;/code&gt;）と言語の対応表を作る」ということになった。「見出しにシステムコールという語が含まれていればCだろう」という具合である。&lt;/p&gt;

&lt;p&gt;これも中々うまい法則を見付けられず、結局一つ一つの見出しと&lt;code class=&quot;highlighter-rouge&quot;&gt;code&lt;/code&gt;要素を見て手作業で対応表を作った。途中、「こんなのは人間の仕事ではない！」と思って&lt;a href=&quot;https://github.com/github/linguist&quot;&gt;github-linguist&lt;/a&gt;の使用も検討したが、Gitリポジトリー全体でなく個別のテキストに対して使う方法がすぐに分からなかったのでやめた。&lt;/p&gt;

&lt;p&gt;技評の方で&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;code&amp;gt;&lt;/code&gt;要素の&lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt;属性や&lt;code class=&quot;highlighter-rouge&quot;&gt;data-*&lt;/code&gt;属性で言語名を書いておいてくれると、一番楽なんだけどなあ。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;ところで、確認中に、EPUB版の索引が全然機能しないことに気付いたんだけど、これも本文へのリンクにするスクリプトを配ったら喜ばれるものだろうか……。&lt;/p&gt;

</content>
    <id>https://kitaitimakoto.github.io/apehuci/2016/01/03.html</id>
    <link href="https://kitaitimakoto.github.io/apehuci/2016/01/03.html"
      type="text/html"/>
    <title>『APIデザインケーススタディ』を、ソースコードのシンタックスハイライトしながら読む</title>
    <updated>2016-01-03T00:00:00Z</updated>
    <dc:date>2016-01-03T00:00:00Z</dc:date>
  </entry>
  <entry>
    <content type="html">&lt;p&gt;田中哲さんの『&lt;a href=&quot;https://gihyo.jp/dp/ebook/2015/978-4-7741-7879-0&quot;&gt;APIデザインケーススタディ&lt;/a&gt;』を買ったので、前『&lt;a href=&quot;http://gihyo.jp/book/2015/978-4-7741-7441-9&quot;&gt;Dockerエキスパート養成読本&lt;/a&gt;』でやったように（&lt;a href=&quot;http://apehuci-kitaitimakoto.sqale.jp/apehuci/?date=20150705&quot;&gt;Dockerエキスパート養成読本を、ソースコードのシンタックスハイライトしながら読む&lt;/a&gt;）ソースコードの部分をシンタックスハイライトしようとしたところで、ただただしさんの「&lt;a href=&quot;http://sho.tdiary.net/20151222.html&quot;&gt;EPUB書籍に正誤表を反映する&lt;/a&gt;」という日記を読んだ。本の&lt;a href=&quot;https://github.com/akr/api-design-case-study-book&quot;&gt;正誤表&lt;/a&gt;を見ながらEPUBファイルの中身を直接書き換えることで、誤りを正した状態で読み始められるようにする、という内容だ。&lt;/p&gt;

&lt;p&gt;これは素晴らしい、ぜひ真似しよう、と思って、スクリプトを書いた：&lt;br /&gt;
&lt;a href=&quot;https://gist.github.com/KitaitiMakoto/7b2286b61a0bafcc5926&quot;&gt;https://gist.github.com/KitaitiMakoto/7b2286b61a0bafcc5926&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;必要なのは&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;『&lt;a href=&quot;https://gihyo.jp/dp/ebook/2015/978-4-7741-7879-0&quot;&gt;APIデザインケーススタディ&lt;/a&gt;』のEPUBファイル（&lt;code class=&quot;highlighter-rouge&quot;&gt;path/to/book.epub&lt;/code&gt;にあることにする）&lt;/li&gt;
  &lt;li&gt;Ruby&lt;/li&gt;
  &lt;li&gt;幾つかのRubyGem：&lt;code class=&quot;highlighter-rouge&quot;&gt;$ gem install nokogiri-xml-range epub-parser epub-maker&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Gistにある&lt;code class=&quot;highlighter-rouge&quot;&gt;reflect-errata-api-design.rb&lt;/code&gt;のファイル&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;で、全て揃ったら&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ruby reflect-errata-api-design.rb path/to/book.epub
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;と実行すると正誤表を反映してくれる。&lt;/p&gt;
&lt;figure&gt;
&lt;a href=&quot;https://gyazo.com/10bc38f6f2acb88d2217b3d36c1c4e62&quot; target=&quot;gyazo&quot;&gt;&lt;img alt=&quot;正誤表適用前&quot; src=&quot;//gyazo.com/10bc38f6f2acb88d2217b3d36c1c4e62.png&quot; style=&quot;width: 50%;&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://gyazo.com/5bd09585adc98a282ea30b000cc8e101&quot; target=&quot;gyazo&quot;&gt;&lt;img alt=&quot;正誤表適用前&quot; src=&quot;//gyazo.com/5bd09585adc98a282ea30b000cc8e101.png&quot; style=&quot;width: 50%;&quot; /&gt;&lt;/a&gt;
  &lt;figcaption&gt;「w&lt;strong style=&quot;color: red;&quot;&gt;ir&lt;/strong&gt;te」だった所が「w&lt;strong style=&quot;color: red;&quot;&gt;ri&lt;/strong&gt;te」と修正されている&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;大掛かりである。上記の手順だけで充分大掛かりなのに、このスクリプトを書くには数時間を要している。今回程度の数、内容なら、たださんの日記にあるように、エディターを使って手作業で反映させるのが一番手間がないだろう。&lt;/p&gt;

&lt;p&gt;ちなみに&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;正誤表はページ数指定なので、HTMLファイルを特定するのにPDF版を参照してページ数から章番号を突き止めるしかないのがやや面倒&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;とのことで、EPUBでの対応箇所を探す多分一番簡単な方法は&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;EPUBファイルを展開する&lt;br /&gt;
  &lt;code class=&quot;highlighter-rouge&quot;&gt;$ unzip path/to/book.epub -d api-design&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;grep&lt;/code&gt;やThe Silver Searcher（&lt;code class=&quot;highlighter-rouge&quot;&gt;ag&lt;/code&gt;）、The Platinum Searcher（&lt;code class=&quot;highlighter-rouge&quot;&gt;pt&lt;/code&gt;）で展開したディレクトリーを探す&lt;br /&gt;
  &lt;code class=&quot;highlighter-rouge&quot;&gt;$ ag wirte api-design&lt;/code&gt;&lt;br /&gt;
  &lt;code class=&quot;highlighter-rouge&quot;&gt;$ ag をを api-design&lt;/code&gt;&lt;br /&gt;
  :&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ではなかろうかと思う（検索機能付きのパソコン向けEPUBリーダーってある？）。&lt;/p&gt;

&lt;h2 id=&quot;gem&quot;&gt;使っているgemの紹介&lt;/h2&gt;

&lt;p&gt;さてこのスクリプト、これまで色々準備してたことのプチ決算な趣があるので、少し自慢話にお付き合い願いたい。動かすのに必要なgemを三つ挙げたが、全て僕が作ったgemで、こんなこともあろうかと準備してきた物々なのである。&lt;/p&gt;

&lt;h3 id=&quot;epub-parsercfi&quot;&gt;EPUB ParserのCFI実装&lt;/h3&gt;

&lt;p&gt;前からずっと&lt;a href=&quot;http://www.rubydoc.info/gems/epub-parser/0.2.4/file/docs/Home.markdown&quot;&gt;EPUB Parser&lt;/a&gt;という、EPUBファイルの中身を調べるgemを作っていた。このgemが扱っているEPUB 3仕様には&lt;a href=&quot;http://www.idpf.org/epub/linking/cfi/epub-cfi.html&quot;&gt;EPUB CFI&lt;/a&gt;という補足的な仕様がある。「本の中のある一点（一文字）」や「ある場所からある場所まで」といった範囲を指定するための記法を定義した仕様だ。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;epubcfi(/6/36!/4/2/16/5,:25,:27)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;のようなちょっと目を疑う読みにくさの記法なのでずっと敬遠してきたのだが、ちょうど今回の「EPUBパッチ」のような時に使えるかと、数か月前に重い腰を上げて実装したのだった。&lt;/p&gt;

&lt;p&gt;正確にはパッチで終わるのでなく、差分アップデートをやってみたいと思っている。対象もEPUBじゃなくてDOMにしたい、つまりウェブページも対象にしたい。ただ、まずは（要素の省略などが許されているHTMLでなく）必ずXHTMLを使うことになっているEPUBからと思っているし、EPUBでこれができると、Kindleのようなプラットフォームで、本につけたハイライトやメモ書きを保持したまま本の内容をアップデートできるはずだ。電子書籍のいいところに、配信側が気軽にアップデートできることがあるが、そのたびにメモ書きが消えてしまうのは避けたい。また、まんがなんか特にそうだが、不要な所も含めた本全体をアップデートしていると転送料ももったいないしユーザーも長く待たされる。差分アップデートならこれが避けられる。&lt;/p&gt;

&lt;p&gt;そんな思惑で実装していたCFIの機能が、今回役に立った。Gistにあるスクリプトの&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;ERRATA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;target: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/6/36!/4/2/16/5,:25,:27'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;operation: :replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;replace: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ri'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;target: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/6/36!/4/2/18/7,:33,:35'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;operation: :replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;replace: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ri'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;target: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/6/46!/4/2/70/6/1,:0,:4'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;operation: :replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;replace: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'send'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;target: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/6/52!/4/2/28/1,:61,:62'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;operation: :remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;target: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/6/68!/4/2/44/1:267'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;operation: :add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;add: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'が'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;target: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/6/98!/4/2/12/9:7'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;operation: :add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;add: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'*10'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;target: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/6/118!/4/2/50/3,:45,:46'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;operation: :remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;という定数で使っている。&lt;code class=&quot;highlighter-rouge&quot;&gt;target&lt;/code&gt;プロパティのところがそれだ。&lt;/p&gt;

&lt;p&gt;カンマで区切られているやつが「範囲」で、区切られていないのが「一点」を表す。削除や差し替えは「どこを」という情報が必要だから範囲を使っているし、文字の追加は不要なので一点を使っている。&lt;/p&gt;

&lt;p&gt;このCFI、おもしろい特徴があって、CFI同士、順番をつけることができるのだ。まあ、（始めから終わりまで一次元に続く）本の一点や範囲を示しているんだから、数直線上の点や範囲と同じで、考えてみれば順序が付くのは当たり前なのだが。この順番を、&lt;strong&gt;XHTML文書その物は参照せずに&lt;/strong&gt;決められるところがおもしろい。他に何も見ないでも、&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;epubcfi(/6/36!/4/2/16/5:25)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;と&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;epubcfi(/6/36!/4/2/18/7:33)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;なら前者（&lt;code class=&quot;highlighter-rouge&quot;&gt;epubcfi(/6/36!/4/2/16/5:25)&lt;/code&gt;）のほうが「先」にあるということが分かる。正誤表適用前に、適用箇所が後ろの方から前の方に並ぶように、正誤表を並び替えているのだが、その時に、この順番の機能を使った（Rubyの&lt;code class=&quot;highlighter-rouge&quot;&gt;sort_by&lt;/code&gt;メソッドのブロックから返している）。なぜ後ろから前なのかと言うと、もし前からやってしまうと、適用の結果DOMツリーの構造が変わって、その後の操作の適用対象がずれてしまうことがあるからだ（DOMのNodeSetの中から複数ノードを消すときなんかと同じ）。&lt;/p&gt;

&lt;p&gt;これは同じくDOMツリー上の場所を示すのによく使われるCSSセレクターやXPathにはない特徴で、パッチ適用箇所の表現に（渋々ながら）EPUB CFIを採用した理由になっている（CSSセレクターやXPathでも一定の制限を掛けてみんな守るようにすれば順番付けはできる）。&lt;/p&gt;

&lt;p&gt;余談だけど、&lt;code class=&quot;highlighter-rouge&quot;&gt;insert&lt;/code&gt;じゃなくて&lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;delete&lt;/code&gt;じゃなくて&lt;code class=&quot;highlighter-rouge&quot;&gt;remove&lt;/code&gt;といった用語は&lt;a href=&quot;https://tools.ietf.org/html/rfc5261&quot;&gt;XML Patch&lt;/a&gt;と&lt;a href=&quot;https://tools.ietf.org/html/rfc6902&quot;&gt;JSON Patch&lt;/a&gt;（&lt;a href=&quot;http://www.hcn.zaq.ne.jp/___/WEB/RFC6902-ja.html&quot;&gt;日本語訳&lt;/a&gt;）から拝借した。&lt;/p&gt;

&lt;h3 id=&quot;nokogirixmlrange&quot;&gt;Nokogiri::XML::Range&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://www.rubydoc.info/gems/nokogiri-xml-range&quot;&gt;Nokogiri::XML::Range&lt;/a&gt;については以前にも書いた（&lt;a href=&quot;http://apehuci-kitaitimakoto.sqale.jp/apehuci/?date=20150907&quot;&gt;NokogiriでHTML（XML）内の範囲を操作するgem作った&lt;/a&gt;）。DOMツリー上の範囲を扱うgemだ。ウェブブラウザーではJavaScript向けのAPIである&lt;a href=&quot;https://developer.mozilla.org/ja/docs/Web/API/range&quot;&gt;Rangeオブジェクト&lt;/a&gt;として見ることができる。&lt;/p&gt;

&lt;p&gt;EPUB CFIで正誤表適用箇所を指定できたとしても、そこに対して操作ができなければまるで意味がない。CFIから&lt;a href=&quot;http://www.nokogiri.org/&quot;&gt;Nokogiri&lt;/a&gt; gemで表現されたDOMツリー上の範囲へ変換し、それに対して追加・削除・差し替えを実施するのにNokogiri::XML::Rangeを使っている（長さ0の範囲に対する操作として、追加にも範囲を使っている）。&lt;/p&gt;

&lt;p&gt;こう使っている。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Nokogiri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;XML&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;CPUB CFIから変換した「始点」と「終点」の情報&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;## 追加操作 ##&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# rangeは追加するべき場所を示している&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;text_to_insert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Nokogiri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;XML&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;追加する文字列&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ドキュメントオブジェクト&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;insert_node&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text_to_insert&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;## 削除操作 ##&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# rangeは削除するべき範囲（「をを」の「を」一つとか）を示している&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;delete_contents&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;## 差し替え操作 ##&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# rangeは差し替えるべき範囲（誤字「wirte」の「ir」とか）を示している&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;delete_contents&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;text_to_replace&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Nokogiri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;XML&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;差し替え後の文字列&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ドキュメントオブジェクト&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;insert_node&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text_to_replace&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;delete_contents&lt;/code&gt;や&lt;code class=&quot;highlighter-rouge&quot;&gt;insert_contents&lt;/code&gt;がやっていることは実装すると結構めんどうなのだけど、きちんと仕様の存在する挙動なので、gemに切り出しておけば安心して使える。&lt;/p&gt;

&lt;p&gt;これも正に「差分アップデートやるなら必要になるはずだな」と思って作ったgemなので、狙い通りに役立って嬉しい。&lt;/p&gt;

&lt;h3 id=&quot;epub-maker&quot;&gt;EPUB Maker&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://www.rubydoc.info/gems/epub-maker&quot;&gt;EPUB Maker&lt;/a&gt;は&lt;a href=&quot;http://www.rubydoc.info/gems/epub-parser/0.2.4/file/docs/Home.markdown&quot;&gt;EPUB Parser&lt;/a&gt;の拡張で、その名の通りEPUBを作成するためのgem……というのは表の顔で、これを作った一番の動機はEPUBのインプレース編集にあった（EPUBを作るなら&lt;a href=&quot;https://github.com/kmuto/review&quot;&gt;Re:VIEW&lt;/a&gt;や&lt;a href=&quot;https://github.com/skoji/gepub&quot;&gt;gepub&lt;/a&gt;など他のgemのほうがいいと思う）。&lt;/p&gt;

&lt;p&gt;冒頭でちょっと触れたDocker本のシンタックスハイライトでも使っているが、EPUBファイルの中身を、Nokogiriを使ったDOM操作などで直接書き換えることができる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.rubydoc.info/gems/nokogiri-xml-range&quot;&gt;Nokogiri::XML::Range&lt;/a&gt;で正誤表を適用したあとは、単に&lt;a href=&quot;http://www.rubydoc.info/gems/epub-maker&quot;&gt;EPUB Maker&lt;/a&gt;の保存用メソッドを呼べば、それでEPUBファイルに適用される。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_xml&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;べんり。&lt;/p&gt;

&lt;p&gt;こうして、兼ねてから用意しておいたgemの組み合わせで、今回のパッチプログラムは比較的すんなり書くことができた。気持ちがいい（とは言え、今回の本に特化した方法ならもっとずっと簡単に書ける。&lt;code class=&quot;highlighter-rouge&quot;&gt;unzip&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;zip&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;sed&lt;/code&gt;くらいで充分だ。明らかにオーバーエンジニアリング）。&lt;/p&gt;

&lt;p&gt;今回足りなくて自分で書かないといけなかった汎用パーツは「EPUB CFIからNokgiri::XML::Rangeに変換する」という処理だったので、これは一般化して&lt;a href=&quot;http://www.rubydoc.info/gems/epub-parser/0.2.4/file/docs/Home.markdown&quot;&gt;EPUB Parser&lt;/a&gt;に入れておきたい。&lt;/p&gt;

&lt;h2 id=&quot;epub&quot;&gt;EPUBパッチの試み&lt;/h2&gt;

&lt;p&gt;こうして、ある程度アドホックに、ある程度一般的にEPUBのパッチプログラムを書いてみた。書いてみて一番大変だったのは、正誤表のEPUB CFIを作るところだった。&lt;/p&gt;

&lt;p&gt;本の中から、適用対象のXHTMLファイルを探して、その中の適用箇所を探すまでは簡単だ（&lt;code class=&quot;highlighter-rouge&quot;&gt;grep&lt;/code&gt;などでできる）。でもその場所を表現するための要素の順番などを数えるのが面倒くさい。そして間違える。&lt;/p&gt;

&lt;p&gt;あと、複数の操作を一つのプログラムで行うときの順番の扱いは、色んなケースを集めて検討する必要があると感じた。今回は正誤表を逆順に並べて適用していったけど、前の方から順番でも、そうと決まっていれば別にいい。ある処理でDOM構造が変わるとしても、「ずれた」後のDOMツリーに対してその後の操作のCFIが書かれていればいいからだ。&lt;/p&gt;

&lt;p&gt;もう少し引いた視点で、パッチの適用対象のバージョンや順番も、取り決めを作ってみんなに周知する必要があると感じた。今回のパッチプログラムの後に正誤表が追加されたとする。すると、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;gihyo.jpからダウンロードしたファイルには、今回分と追加分がまとまったパッチを適用したい&lt;/li&gt;
  &lt;li&gt;今回のパッチを適用して楽しんでいたファイルには、追加分だけ適用したい&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ということになる。この辺、「二つをまとめたパッチ」を作るかどうか、作るにはどういう手順で作るか、それとも必ず一つずつ順番に適用することにするか（「久し振りに開いた本」は、「パッチの適用待ち」の時間が非常に長くなるかも知れない）、決めないといけない。&lt;/p&gt;

&lt;p&gt;また、サードパーティ製のパッチについても検討できると素晴らしい。識者による注釈や、出版社を通さない作者によるコメンタリーなど（小説へのコメンタリーは、吉野茉莉さんがやっていた）用意して配布できるといい。そうした物は「どのバージョンのパッチ適用後なら適用していいか」「それより後のパッチも適用した後だった場合、どうしたらいいのか」といった難しい検討が必要になる。&lt;/p&gt;

&lt;p&gt;差分アップデートも同様だけど、「（本文を参照しない）CFIだけでの演算」でいろいろ解決できると便利なのだけど、そういったことはできるのだろうか……（というか、これができるかどうか見てみたいので差分アップデートをやりたいのだ）。&lt;/p&gt;

&lt;h2 id=&quot;epub-cfi&quot;&gt;EPUB CFIについて思うこと&lt;/h2&gt;

&lt;p&gt;EPUB CFI、あまり好きではないのだけど、今回のようなことをやるには、順番が付くという性質が役に立った。&lt;/p&gt;

&lt;p&gt;今回分かった難点というか、改善点になるのかな、は、『APIデザインケーススタディ』では（XHTMLの）&lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt;属性を全然使っていないこともあって、ぱっと見、どのトピックに対する操作なのか全然分からない（&lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt;がある場合はその値がCFIに現れる仕様になっている）。&lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt;に限らず、&lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt;など色んな属性についてもCFI表現に出せるようになってるといいのかなあ。乱用される危険も出るが。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;差分アップデートの仕組みに足りていない物&lt;/h2&gt;

&lt;p&gt;今回一番大変だったこととしてCFIの作成を挙げたが、そこが、差分アップデートの仕組みに足りていない。&lt;/p&gt;

&lt;p&gt;（iBooks Authorなど）オーサリングツールで何か操作をして保存したりアイコンをタップすると、自動でパッチを書き出すようになっているとすごく便利だが、僕にはGUIは理解が追い付かない……。&lt;/p&gt;

&lt;p&gt;別の方法としてEPUB用の&lt;code class=&quot;highlighter-rouge&quot;&gt;diff&lt;/code&gt;コマンドを作るというのがある、と言うか、目指している。旧EPUB、新EPUBを並べて差分を計算し、パッチの形で書き出してくれるツールだ。これでネックになるのはDOMツリーの差分計算だ。調べたところ「NP困難」と呼ばれる類の問題らしく、一般的に解決するのは非常に難しいらしい。でも、DOMの差分が作れると、ウェブ開発者一般にもとても役立つと思うので、何か、妥当でうまく利く制約があるといい。アルゴリズムとしてはBULDアルゴリズムというのが速いらしい。C++の実装はあるけれど、僕には敷居が高いので、これのポーティングを目的として今Goを勉強している（速い言語がいい）。仮想DOM方面から何か出てきたりしないかな。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;終わりに&lt;/h2&gt;

&lt;p&gt;なんだか、実現できているのは小さなことだし、書いているコードは少ないのに、長く話してしまった。お恥ずかしい。&lt;/p&gt;

&lt;p&gt;最後に大事なことを一つ、たださんと同じく声を大にしてこう言いたい。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ともあれ、&lt;strong&gt;こんなことができるのも、ちゃんと正誤表を公表してくれる著者と、DRMをかけない素のEPUBファイルを配信してくれる出版社があればこそ&lt;/strong&gt;。感謝したい。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-2&quot;&gt;追記&lt;/h2&gt;

&lt;p&gt;なんか間違えてた。上で何度か「差分アップデートをやりたい」と言っているが、差分アップデートは、正に今回やったこれだ（パッチ作成の部分は今は人間がやってるのでそこは将来の話ではある）。やりたいけど遠いのは、「EPUBの差分アップデート時に、ブックマークやハイライト、メモ書きなども同時にアップデートする（EPUBアップデートによって場所が動いても追従する）」ということだった。&lt;/p&gt;

</content>
    <id>https://kitaitimakoto.github.io/apehuci/2016/01/02.html</id>
    <link href="https://kitaitimakoto.github.io/apehuci/2016/01/02.html"
      type="text/html"/>
    <title>EPUB書籍に正誤表を反映する（Rubyスクリプトで）、またはEPUBのパッチプログラムの試み</title>
    <updated>2016-01-02T00:00:00Z</updated>
    <dc:date>2016-01-02T00:00:00Z</dc:date>
  </entry>
  <entry>
    <content type="html">&lt;p&gt;今日はちょっと思い出話でも。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://sapporoonga.doorkeeper.jp/events/36441&quot;&gt;Groongaもくもく会＠札幌 2015-12-30&lt;/a&gt;に参加して来た。帰札した翌日から熱を出して寝込んでいたのだが、直前で治って本当によかった。&lt;/p&gt;

&lt;p&gt;もくもく会では&lt;a href=&quot;https://github.com/droonga/droonga-http-server/blob/master/install.sh&quot;&gt;Droonga HTTP Serverのインストールスクリプト&lt;/a&gt;の修正を試みていた。進捗はこんな感じ：&lt;a href=&quot;https://github.com/droonga/droonga-http-server/compare/master...KitaitiMakoto:centos-systemd&quot;&gt;https://github.com/droonga/droonga-http-server/compare/master…KitaitiMakoto:centos-systemd&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;その後は&lt;a href=&quot;https://atnd.org/events/73363&quot;&gt;忘年会＠Sinatra札幌＆Sapporoonga 2015-12-30&lt;/a&gt;。そこで話題になった一つに、Railsの躓きポイントの話があった。既にうろ覚えだがこんな感じだったと思う。&lt;/p&gt;

&lt;p&gt;ウェブアプリケーションを作ったことがない状態でRailsに入門すると、どこで何が起こっているか分からない。scaffoldしてアプリケーションが動くようにはできる。でも何がどうなっているか分からない。その後Sinatraをちょっと勉強して、&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/entries'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/entries/1'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;みたいなのに触れてみて初めて、「Railsはroutesをまず見るべきなんだ」と分かった、という話。そこから、Rails（のようなフルスタックのフレームワーク）に触れる前に、ウェブの基本的な仕組みを学ぶべきだ、という話になった。その場には&lt;a href=&quot;https://www.djangoproject.com/&quot;&gt;Django&lt;/a&gt;をやっている人もいて、やり始めはやはり同じような分からなさを感じていたらしい。&lt;/p&gt;

&lt;p&gt;僕は、自分のRailsの覚え方は普通ではないし人に勧めるような物ではないと感じていたのだけど、この話を聞いていると意外とよかったのかも知れないと思えてきた。僕がRailsを覚えたのは、Railsの本でも勉強会でもなくて（当時はプログラミングの話をする相手すらいなかった）、『&lt;a href=&quot;http://www.oreilly.co.jp/books/9784873113531/&quot;&gt;RESTful Webサービス&lt;/a&gt;』だった（今はPDF版もあるようだ）。&lt;/p&gt;
&lt;div class=&quot;booklog_html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;booklog_html_image&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/RESTful-Web%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9-Leonard-Richardson/dp/4873113539%3FSubscriptionId%3D0AVSM5SVKRWTFMG7ZR82%26tag%3Dbooklog.jp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4873113539&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/51Su2Ger2sL._SL160_.jpg&quot; width=&quot;116&quot; height=&quot;150&quot; style=&quot;border:0;border-radius:0;&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class=&quot;booklog_html_info&quot; style=&quot;padding-left:20px;&quot;&gt;&lt;div class=&quot;booklog_html_title&quot; style=&quot;margin-bottom:10px;font-size:14px;font-weight:bold;&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/RESTful-Web%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9-Leonard-Richardson/dp/4873113539%3FSubscriptionId%3D0AVSM5SVKRWTFMG7ZR82%26tag%3Dbooklog.jp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4873113539&quot; target=&quot;_blank&quot;&gt;RESTful Webサービス&lt;/a&gt;&lt;/div&gt;&lt;div style=&quot;margin-bottom:10px;&quot;&gt;&lt;div class=&quot;booklog_html_author&quot; style=&quot;margin-bottom:15px;font-size:12px;;line-height:1.2em&quot;&gt;著者 : &lt;a href=&quot;http://booklog.jp/author/Leonard+Richardson&quot; target=&quot;_blank&quot;&gt;Leonard Richardson&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;booklog_html_manufacturer&quot; style=&quot;margin-bottom:5px;font-size:12px;;line-height:1.2em&quot;&gt;オライリー・ジャパン&lt;/div&gt;&lt;div class=&quot;booklog_html_release&quot; style=&quot;font-size:12px;;line-height:1.2em&quot;&gt;発売日 : 2007-12-21&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;booklog_html_link_amazon&quot;&gt;&lt;a href=&quot;http://booklog.jp/item/1/4873113539&quot; style=&quot;font-size:12px;&quot; target=&quot;_blank&quot;&gt;ブクログでレビューを見る»&lt;/a&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;この本は、勿論Railsの入門書ではない。書名の通り、RESTful Webサービスの解説書だ。前半で、ウェブとは何か、HTTPとは、URIとは、アドレス可能性とは、&lt;abbr title=&quot;Representational State Transfer&quot;&gt;REST&lt;/abbr&gt;とは、といった基礎的な考え方と、実例として、Google Mapsのような地図サービスのサーバーサイドのリソース設計が紹介される。今実家にいて手元に実物が無いので記憶頼りだが（こういう時電子本だったら……）、どういうXMLにするべきか（当時はWeb APIはXMLを返すのが普通だった。そしてWeb APIでなくWebサービスと呼ばれていた）、どういうURIにするべきか、地図の拡大・縮小はURIとしてどのように表現するといいか、といったことが紹介される。&lt;/p&gt;

&lt;p&gt;そうしてみっちりと理論的なことを叩きこまれた後で後半、ようやくサンプルウェブアプリケーションとして、&lt;a href=&quot;https://delicious.com/&quot;&gt;del.icio.us&lt;/a&gt;クローンのブックマークサービスを作ることになる。この時に採用されたフレームワークが、&lt;a href=&quot;http://rubyonrails.org/&quot;&gt;Ruby on Rails&lt;/a&gt;だったのだ。Railsのバージョンは2で、ようやくRESTfulルーティングが入ったような頃だったと思う。Rackはまだ入っていなかった。&lt;/p&gt;

&lt;p&gt;僕はこれを読みながら、HTTPメソッドとRailsのアクション名との対応表を何度も見返しながら、サンプルアプリケーションを写経することでRailsを覚えていった（Railsアプリケーションの作り方の簡単な解説もあった）。上で言っていた「ウェブアプリケーションの基本的な仕組み」を散々解説された後でRailsに触れることになったし、しかもこの本の順番だとURI設計をし、&lt;code class=&quot;highlighter-rouge&quot;&gt;config/routes.rb&lt;/code&gt;に反映させて確認してからようやくコントローラーやモデルの実装に入った。期しないで、上で挙げた落とし穴に嵌らなかったわけだ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://guides.rubyonrails.org/&quot;&gt;Rails Guides&lt;/a&gt;（&lt;a href=&quot;http://railsguides.jp/&quot;&gt;日本語&lt;/a&gt;）や&lt;a href=&quot;https://www.railstutorial.org/&quot;&gt;Rails Tutorial&lt;/a&gt;（&lt;a href=&quot;http://railstutorial.jp/&quot;&gt;日本語&lt;/a&gt;）、またはRails用の本を使ったわけではないので、正当な覚え方ではないのだろうと思っていた（その後Railsの本も何冊か読んではいる）し、何より人に勧めるような覚え方ではないと感じていたのだが、意外とそうでもないのかも知れない。しかし、この本は多少古い（XML、del.icio.us、Rails 2……）ので、やっぱり人には勧めにくい。そこで、『&lt;a href=&quot;https://gihyo.jp/dp/ebook/2014/978-4-7741-7074-9&quot;&gt;Webを支える技術&lt;/a&gt;』の実践編という位置付けで、Railsを使ったハンズオンチュートリアルを書いてみるのはどうだろう。&lt;/p&gt;
&lt;div class=&quot;booklog_html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;booklog_html_image&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/Web%E3%82%92%E6%94%AF%E3%81%88%E3%82%8B%E6%8A%80%E8%A1%93-HTTP%E3%80%81URI%E3%80%81HTML%E3%80%81%E3%81%9D%E3%81%97%E3%81%A6REST-WEB-PRESS-plus/dp/4774142042%3FSubscriptionId%3D0AVSM5SVKRWTFMG7ZR82%26tag%3Dbooklog.jp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4774142042&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/51qo6pgjaSL._SL160_.jpg&quot; width=&quot;107&quot; height=&quot;150&quot; style=&quot;border:0;border-radius:0;&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class=&quot;booklog_html_info&quot; style=&quot;padding-left:20px;&quot;&gt;&lt;div class=&quot;booklog_html_title&quot; style=&quot;margin-bottom:10px;font-size:14px;font-weight:bold;&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/Web%E3%82%92%E6%94%AF%E3%81%88%E3%82%8B%E6%8A%80%E8%A1%93-HTTP%E3%80%81URI%E3%80%81HTML%E3%80%81%E3%81%9D%E3%81%97%E3%81%A6REST-WEB-PRESS-plus/dp/4774142042%3FSubscriptionId%3D0AVSM5SVKRWTFMG7ZR82%26tag%3Dbooklog.jp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4774142042&quot; target=&quot;_blank&quot;&gt;Webを支える技術 -HTTP、URI、HTML、そしてREST (WEB+DB PRESS plus)&lt;/a&gt;&lt;/div&gt;&lt;div style=&quot;margin-bottom:10px;&quot;&gt;&lt;div class=&quot;booklog_html_author&quot; style=&quot;margin-bottom:15px;font-size:12px;;line-height:1.2em&quot;&gt;著者 : &lt;a href=&quot;http://booklog.jp/author/%E5%B1%B1%E6%9C%AC%E9%99%BD%E5%B9%B3&quot; target=&quot;_blank&quot;&gt;山本陽平&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;booklog_html_manufacturer&quot; style=&quot;margin-bottom:5px;font-size:12px;;line-height:1.2em&quot;&gt;技術評論社&lt;/div&gt;&lt;div class=&quot;booklog_html_release&quot; style=&quot;font-size:12px;;line-height:1.2em&quot;&gt;発売日 : 2010-04-08&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;booklog_html_link_amazon&quot;&gt;&lt;a href=&quot;http://booklog.jp/item/1/4774142042&quot; style=&quot;font-size:12px;&quot; target=&quot;_blank&quot;&gt;ブクログでレビューを見る»&lt;/a&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;そこまでいかなくても、いきなりRailsで手を動かすのではなくて、先にこの本を読んでおくことにするのはどうだろう。&lt;/p&gt;

&lt;p&gt;なお、当たり前の断りとして、適した覚え方は人それぞれだ。特に、人は自分の習得方法がいい物だと思いがちなので、そういったバイアスもある。何より僕は今のRails 4、5は殆ど触っていないので、今でも通用する考え方かは分からない。&lt;/p&gt;

</content>
    <id>https://kitaitimakoto.github.io/apehuci/2015/12/30.html</id>
    <link href="https://kitaitimakoto.github.io/apehuci/2015/12/30.html"
      type="text/html"/>
    <title>『RESTful Webサービス』でRailsを覚える</title>
    <updated>2015-12-30T00:00:00Z</updated>
    <dc:date>2015-12-30T00:00:00Z</dc:date>
  </entry>
  <entry>
    <content type="html">&lt;p&gt;何度か書いたように、この日記はPolymerで作っている、つまりウェブコンポーネントを使っている。そこで、一般的に使いそうな機能をMiddleman拡張として書いていたのだが、今日RubyGemとしてリリースした。&lt;a href=&quot;http://www.rubydoc.info/gems/middleman-web_components&quot;&gt;Middleman Web Components&lt;/a&gt;だ。&lt;/p&gt;

&lt;p&gt;もちろんまだまだ足りないことは多いんだろうと思うが、自分の日記を触りながら拡張していきたいと思う。&lt;/p&gt;

</content>
    <id>https://kitaitimakoto.github.io/apehuci/2015/12/26.html</id>
    <link href="https://kitaitimakoto.github.io/apehuci/2015/12/26.html"
      type="text/html"/>
    <title>Middleman Web Components</title>
    <updated>2015-12-26T00:00:00Z</updated>
    <dc:date>2015-12-26T00:00:00Z</dc:date>
  </entry>
  <entry>
    <content type="html">&lt;p&gt;この日記は&lt;a href=&quot;http://qiita.com/advent-calendar/2015/groonga&quot;&gt;Groonga Advent Calendar 2015&lt;/a&gt;の21日目の記事です。今日は25日です。大幅に遅れてしまって、本当に申し訳ありません。&lt;/p&gt;

&lt;p&gt;Middlemanでブログの類似記事一覧を作る拡張に&lt;a href=&quot;https://github.com/ngs/middleman-blog-similar&quot;&gt;Middleman-Blog-Similar&lt;/a&gt;がある。類似判定のアルゴリズムを選べたりといい所もあるのだがこれは今のMiddleman v4に対応していない。それにGroonga Advent CalendarのネタとしてもGroongaが使いたかったので、Groongaの類似文書検索機能を使って同様のことをやってみた。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/KitaitiMakoto/middleman-blog-similar-groonga&quot;&gt;https://github.com/KitaitiMakoto/middleman-blog-similar-groonga&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;使うには&lt;code class=&quot;highlighter-rouge&quot;&gt;middleman-blog-similar-groonga&lt;/code&gt;をインストールし、&lt;code class=&quot;highlighter-rouge&quot;&gt;config.rb&lt;/code&gt;で&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;activate&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:blog_similar_groonga&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;と追記する。&lt;/p&gt;

&lt;p&gt;拡張を有効化するとブログ記事向けのレイアウトで&lt;code class=&quot;highlighter-rouge&quot;&gt;similar_articles&lt;/code&gt;というヘルパーが使えるようになる。ここでイテレートされるオブジェクトには&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;key.key&lt;/code&gt;（パス）&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;title&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;path&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;body&lt;/code&gt;（タグを取り除いたもの）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の属性があって、わざわざ他記事の&lt;code class=&quot;highlighter-rouge&quot;&gt;BlogArticles&lt;/code&gt;オブジェクトまで辿らなくても済むようになっている。類似記事のタイトルを表示しつつリンクにしたいだけなら充分だろう。&lt;/p&gt;

&lt;div class=&quot;language-erb highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;section&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;類似記事&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;cp&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;similar_articles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;article&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link_to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;article&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;article&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;cp&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;として使うことができる。&lt;/p&gt;

&lt;p&gt;今は本文での類似しか見ていないが、タイトルやタグを使ったほうが人間の感覚に合うだろうから、改善を続けていきたい。&lt;/p&gt;

&lt;p&gt;名前は似ているがMiddleman-Blog-Similarとは全く互換性が無いので注意すること。&lt;/p&gt;

</content>
    <id>https://kitaitimakoto.github.io/apehuci/2015/12/25.html</id>
    <link href="https://kitaitimakoto.github.io/apehuci/2015/12/25.html"
      type="text/html"/>
    <title>Middleman Blogの類似記事をGroongaを使ってリストアップするRubyGemを作った</title>
    <updated>2015-12-25T00:00:00Z</updated>
    <dc:date>2015-12-25T00:00:00Z</dc:date>
  </entry>
  <entry>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://groonga.doorkeeper.jp/events/35021&quot;&gt;Groongaで学ぶ全文検索 2015-12-18&lt;/a&gt;に行って来た。今日のお題はドリルダウン（ファセット検索）。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;ドリルダウン&lt;/h2&gt;

&lt;p&gt;ある検索語で検索した時に、検索結果をさらに絞り込む&lt;ins&gt;と何件になるかなどの集計をする（発表した時に間違いを指摘してもらった。ドリルダウンは絞り込みではなく集計）&lt;/ins&gt;ことを、予め（検索時に同時に）Groongaがやっておいてくれる、という機能だ。例えば&lt;a href=&quot;http://docs.ruby-lang.org/ja/search/&quot;&gt;るりまサーチ&lt;/a&gt;で、「call」を検索した場合、callを含むページのほか、画面左にインスタンスメソッドが何件あるか、特異メソッドは何件あるか……といった結果も表示されている。これは、「callを含み、かつインスタンスメソッドのページ」は何件あるか、という数になっている。&lt;/p&gt;

&lt;p&gt;このように、検索結果に対して、既に（与えられた）キーで集計した結果を返すのがドリルダウン。まず、既に分類が終わっているので、検索結果を絞り込む作業が簡単に（クリックするだけで）できる。また、0件の時はそのことが分かるので、不要な絞りこみ作業をユーザーがわざわざする必要がない。というように、ドリルダウンは全文検索を補助する機能だ。全文検索とは関係ない文脈では集計機能ということになる。&lt;/p&gt;

&lt;p&gt;ドリルダウンを高速にするために、Groongaのデータ構造が活きている。RDBMSは行指向のテーブル型データベースだから、ストレージ上、一行のデータが複数カラム分、まとまった場所に置かれるようになっている。あるカラムに関する集計（インスタンスメソッドは何件で、特異メソッドは何件で……）をする場合には各行をループさせて、その中で注目しているカラムの場所まで移動して、内容に応じて集計結果を更新する必要がある。&lt;/p&gt;

&lt;p&gt;Groongaは列指向データベースだから、ストレージ上、あるカラムのデータがまとまった場所に置かれている。だから集計する場合には一箇所からデータをまとめて取って来て数えたりしていけばよい。&lt;/p&gt;

&lt;p&gt;集計に関してはこうなっていて、全文検索では更に「検索結果の中で」のそういった集計を行うことになるが、特別なことはない。一旦全文検索を行ってレコードを取得する。その中で更に集計する。ヒットしなかったレコード分はスキップして集計するのでややもったいないが、列指向でのやり方よりは効率がいい。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;多段ドリルダウン&lt;/h2&gt;

&lt;p&gt;多段ドリルダウンはどうやっているのかも聞いた。本のデータベースがあった時に、雑誌 -&amp;gt; プログラミングというように下位分類を持つようなやつだ（こうじゃないタイプの「多段ドリルダウン」も考えられるそうだが思い出せないとのこと）。&lt;/p&gt;

&lt;p&gt;Groongaにはキーを二個使ってドリルダウンができる機能があるそうだ。列指向データベースなので大分類カラム（「雑誌」）、小分類カラム（「プログラミング」）のデータはそれぞれの場所にまとまって置かれているが、ドリルダウンする時に、それぞれから同じレコードの物を取り出してペアにしてまとめることができるのだ。&lt;/p&gt;

&lt;p&gt;例えば、何かで検索して結果セットが得られた後に、ドリルダウン結果を大分類と小分類のペアである[雑誌,プログラミング]、[ハードカバー,小説]……の集まりというデータとみなして作ることができる。つまり「大分類が雑誌で小分類がプログラミング」というレコード（本）が何件あるか、という結果を作ることができる。&lt;/p&gt;

&lt;p&gt;この結果を使えば、大分類＋小分類での絞り込みをサポートすることができる。が、これだけだと大分類のみでの絞り込み結果を出さない。その結果も勿論欲しいので、更に大分類カラムのみの集計もする……ということはしないで、Groongaは頑張って、あるカラムの一回のスキャンで色んな結果用の処理を行うようになっているらしい（ということは、インデックスを調べる前の計画を頑張っているということかな？&lt;ins&gt;-&amp;gt; 別に頑張ると言うほど大変なことではなかった&lt;/ins&gt;）。&lt;/p&gt;

&lt;p&gt;また、この話は（Groongaでは）二個に限らず、n個に一般化できるらしい。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;ユーザー定義の集約関数&lt;/h2&gt;

&lt;p&gt;参加者から「平均、最大値……」といった予め用意された関数以外の、ユーザーが定義した関数は使えるのか、という質問がでた。結論は「できない」。&lt;/p&gt;

&lt;p&gt;一つはいいインターフェイスがないから。もう一つは、そういう機能を入れると遅くなってしまうから。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;ドリルダウン結果のデータ構造&lt;/h2&gt;

&lt;p&gt;ドリルダウンの結果はハッシュテーブルになっている。&lt;/p&gt;

&lt;p&gt;分類カラムの集計処理中、「雑誌」という物を見付けた場合、 「雑誌」が、ドリルダウン結果に既にあるかどうかを素早く知る必要があるからだ。なければ結果データに「雑誌」を加えて「1件」というデータにすることになるし、あれば既存の値をインクリメントする必要がある。&lt;/p&gt;

&lt;p&gt;ハッシュのキーはカラムの値その物だとして、バリューの方は、Groongaでは「バリュー」という物になっているらしい。配列とかではない。どんなデータでもよい長さの決まったバイト列で、それを使用する機能の方で適宜解釈して使う、とのこと。&lt;/p&gt;

&lt;p&gt;このバリューの方は、ここまでの話だと合計や最大値などになるので、単独の数値でよさそう。だがもっと別の物を入れてもよくて、実際、全文検索結果レコードの内容を入れると便利になる。ドリルダウン結果に加えて、より詳細な結果を同時に見せられるからだ。例えばGoogle検索でたまに、サイトの下位ページが出ることがあるが、そういった情報を出すために検索結果データの内容を使うことができる。&lt;/p&gt;

</content>
    <id>https://kitaitimakoto.github.io/apehuci/2015/12/18.html</id>
    <link href="https://kitaitimakoto.github.io/apehuci/2015/12/18.html"
      type="text/html"/>
    <title>ドリルダウン（ファセット検索）の仕組み</title>
    <updated>2015-12-18T00:00:00Z</updated>
    <dc:date>2015-12-18T00:00:00Z</dc:date>
  </entry>
  <entry>
    <content type="html">&lt;p&gt;今日の日記は&lt;a href=&quot;http://qiita.com/advent-calendar/2015/groonga&quot;&gt;Groonga Advent Calendar 2015&lt;/a&gt;の五日目です。昨日は&lt;a href=&quot;http://qiita.com/cosmo0920&quot;&gt;cosmo0920&lt;/a&gt;さんの&lt;a href=&quot;http://qiita.com/cosmo0920/items/ed7e071d111c533e217c&quot;&gt;Groonga族のHomebrewの変遷を振り返る&lt;/a&gt;でした。やっぱりコマンド一つで簡単にインストールできるのはよい。しかし、そのためには陰で誰かが苦労しているということも伺える記事だった。&lt;/p&gt;

&lt;p&gt;今日は、Homebrewなどで一発インストールのできないGroonga族の一員、&lt;a href=&quot;http://droonga.org/ja/&quot;&gt;Droonga&lt;/a&gt;のインストールについて書く。&lt;/p&gt;

&lt;p&gt;Groongaにはレプリケーション機能がない。DroongaはGroongaを複数のマシンにレプリケーションさせるプロダクトだ。公式サイトのほか、&lt;a href=&quot;http://qiita.com/advent-calendar/2014/groonga&quot;&gt;去年のGroonga Advent Calendar&lt;/a&gt;にも記事があって、とても面白く読んだ。Droongaが何かということはこれらを見てほしい。&lt;/p&gt;

&lt;p&gt;公式サイトには勿論&lt;a href=&quot;http://droonga.org/ja/install/&quot;&gt;インストール手順&lt;/a&gt;も書かれているのだが、今日時点でこれはうまくいかない。そこで僕は、サーバーの構成管理ツールである&lt;a href=&quot;http://itamae.kitchen/&quot;&gt;Itamae&lt;/a&gt;のレシピを作ってインストールしている。今日はそれを使ったインストール方法を書こうと思う。以下、&lt;a href=&quot;https://www.vagrantup.com/&quot;&gt;Vagrant&lt;/a&gt;を使ってUbuntu 15.04の環境で実行している。マシンイメージは&lt;a href=&quot;https://atlas.hashicorp.com/boxes/search?utm_source=vagrantcloud.com&amp;amp;vagrantcloud=1&quot;&gt;Vagrant Cloud&lt;/a&gt;から&lt;a href=&quot;https://atlas.hashicorp.com/ubuntu/boxes/vivid64&quot;&gt;公式のイメージ&lt;/a&gt;を持って来た。&lt;/p&gt;

&lt;p&gt;Droongaのインストール時にはメモリーが必要なので、&lt;code class=&quot;highlighter-rouge&quot;&gt;Vagrantfile&lt;/code&gt;に設定を書いて2GiBくらい確保しておく。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Vagrant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:ubuntu1504&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;box&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ubuntu/vivid64&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;provider&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;virtualbox&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;provider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;provider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;memory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2048&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# :&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# :&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;バーチャルマシンを起動したら、まずログインして環境を更新する。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[host]$ vagrant up ubuntu1504
[host]$ vagrant ssh ubuntu1504
[vm]$ sudo apt-get update
[vm]$ sudo apt-get upgrade -y
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ここでようやくレシピの登場。GitHubに上げている（&lt;a href=&quot;https://github.com/KitaitiMakoto/itamae-plugin-recipe-droonga&quot;&gt;https://github.com/KitaitiMakoto/itamae-plugin-recipe-droonga&lt;/a&gt;）。gemまたはItamaeプラグインの形をしているがrubygems.orgには上げていないので、&lt;code class=&quot;highlighter-rouge&quot;&gt;git clone&lt;/code&gt;で持って来る必要がある。もっと一般的にしてからリリースしたいなと思って、そのまま時間が過ぎてしまっているのだ……。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[host]$ git clone https://github.com/KitaitiMakoto/itamae-plugin-recipe-droonga.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;リポジトリーをクローンしたら、Itamaeのレシピファイル（ここでは&lt;code class=&quot;highlighter-rouge&quot;&gt;recipe.rb&lt;/code&gt;）を用意して、以下のように一行書く。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;include_recipe&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./itamae-plugin-recipe-droonga
/lib/itamae/plugin/recipe/droonga/default.rb&quot;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;そうしたらItamaeを実行すればよい。簡単だ。但し時間は掛かる。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[host]$ itamae ssh --vagrant --host ubuntu1504 recipe.rb
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;（上のイメージだとこれでいいが、DigitalOceanだと依存パッケージが足りなくてうまくいかなかったかも知れない。エラーメッセージを見ながら必要な物をインストールしてほしい。）&lt;/p&gt;

&lt;p&gt;Droongaは二つのコンポーネントからなっている。Groongaデータベースを操作したり、他ノードと連携してレプリケーションを実現する&lt;a href=&quot;https://github.com/droonga/droonga-engine&quot;&gt;Droonga Engine&lt;/a&gt;と、そこへのHTTPインターフェイスを提供する&lt;a href=&quot;https://github.com/droonga/droonga-http-server&quot;&gt;Droonga HTTP Server&lt;/a&gt;だ。それぞれそれ用のプロセスを起動する必要がある。&lt;/p&gt;

&lt;p&gt;公式サイトの記事では&lt;code class=&quot;highlighter-rouge&quot;&gt;service&lt;/code&gt;コマンドを使ってこれをコントロールすることになっているが、Ubuntuでは15.04からUpstartに代わってsystemdが導入されたので、レシピでは&lt;code class=&quot;highlighter-rouge&quot;&gt;systemctl&lt;/code&gt;コマンドを使うようにしている。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[vm]$ sudo systemctl status droong-engine
● droonga-engine.service - Droonga Engine
Loaded: loaded (/lib/systemd/system/droonga-engine.service; enabled; vendor preset: enabled)
Active: active (running) since Fri 2015-12-04 20:09:56 UTC; 37s ago
Main PID: 30190 (droonga-engine)
CGroup: /system.slice/droonga-engine.service
(snip)
[vm]$ sudo systemctl status droonga-http-server
● droonga-http-server.service - Droonga HTTP Server
Loaded: loaded (/lib/systemd/system/droonga-http-server.service; enabled; vendor preset: enabled)
Active: active (running) since Fri 2015-12-04 20:09:57 UTC; 2min 11s ago
Main PID: 30228 (node)
CGroup: /system.slice/droonga-http-server.service
(snip)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;これでDroongaが動くはずだし、実際&lt;a href=&quot;http://epub-searcher-demo.kitaitimakoto.net/&quot;&gt;EPUB Searcherデモサイト&lt;/a&gt;ではこの方法でインストールして、現在でも動作している。&lt;/p&gt;

&lt;p&gt;尚、Droongaを動かすには、内部・外部から、&lt;code class=&quot;highlighter-rouge&quot;&gt;hostname&lt;/code&gt;で返って来るホスト名で名前解決できる必要がある。&lt;code class=&quot;highlighter-rouge&quot;&gt;hostname&lt;/code&gt;と違うホスト名を使いたい場合は、レシピのインストールの箇所（&lt;a href=&quot;https://github.com/KitaitiMakoto/itamae-plugin-recipe-droonga/blob/87c7c9015b626a84b14bfa226d399eb02839bd84/lib/itamae/plugin/recipe/droonga/default.rb#L28&quot;&gt;Droonga Engine該当箇所&lt;/a&gt;、&lt;a href=&quot;https://github.com/KitaitiMakoto/itamae-plugin-recipe-droonga/blob/87c7c9015b626a84b14bfa226d399eb02839bd84/lib/itamae/plugin/recipe/droonga/default.rb#L36&quot;&gt;Droonga HTTP Server該当箇所&lt;/a&gt;）の最後の&lt;code class=&quot;highlighter-rouge&quot;&gt;bash&lt;/code&gt;実行時に&lt;code class=&quot;highlighter-rouge&quot;&gt;HOST&lt;/code&gt;環境を設定し、また&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/hosts&lt;/code&gt;でも設定する必要があるので書き換えること。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# :&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# :&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;curl -sL https://deb.nodesource.com/setup_0.12 | bash HOST=...&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;not_if&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;test -e /etc/apt/sources.list.d/nodesource.list&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# :&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# :&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;curl https://raw.githubusercontent.com/droonga/droonga-engine/master/install.sh | bash HOST=...&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;not_if&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;type droonga-engine&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# :&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# :&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</content>
    <id>https://kitaitimakoto.github.io/apehuci/2015/12/05.html</id>
    <link href="https://kitaitimakoto.github.io/apehuci/2015/12/05.html"
      type="text/html"/>
    <title>DroongaをインストールするItamaeレシピ</title>
    <updated>2015-12-05T00:00:00Z</updated>
    <dc:date>2015-12-05T00:00:00Z</dc:date>
  </entry>
  <entry>
    <content type="html">&lt;p&gt;この日記は&lt;a href=&quot;https://www.polymer-project.org/&quot;&gt;Polymer&lt;/a&gt; 1.2.1で作っているのだが、この前まで僕のメインブラウザーであるFirefox for Androidでは読めなかった。今でも&lt;a href=&quot;https://elements.polymer-project.org/&quot;&gt;Polymer Element Catalog&lt;/a&gt;のサイトを見るとそれが体験できる。Firefox for PCでは問題ない。Firefox for iOSは知らない。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://webcomponents.org/polyfills/&quot;&gt;webcomponentsjs&lt;/a&gt;やPolymerに&lt;code class=&quot;highlighter-rouge&quot;&gt;console.log()&lt;/code&gt;を仕込みながらプリントデバッグを頑張って原因を突き止めたところ、webcomponentsjsでの&lt;a href=&quot;http://www.w3.org/TR/html-imports/&quot;&gt;HTMLインポート&lt;/a&gt;の検出に問題があることが分かった。現時点でのwebcomponentsjsでは、ブラウザーにHTMLインポートの機能があるかどうかを、&lt;code class=&quot;highlighter-rouge&quot;&gt;link&lt;/code&gt;要素の（JavaScriptの）オブジェクトに&lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt;プロパティ（あれば関数）が存在するかどうか、&lt;code class=&quot;highlighter-rouge&quot;&gt;in&lt;/code&gt;演算子で確認してチェックして判断している（&lt;a href=&quot;https://github.com/webcomponents/webcomponentsjs/blob/fedfe0210aa853a9531bd976f6d161d585cc22fb/src/HTMLImports/base.js#L28&quot;&gt;該当箇所&lt;/a&gt;）。HTMLインポートをサポートしていないブラウザー（Firefox for PCなど）では&lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt;プロパティが存在せず、その場合はshimを使う。ところがFirefox for Androidでは、「&lt;code class=&quot;highlighter-rouge&quot;&gt;link&lt;/code&gt;要素に&lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt;プロパティが存在する」「しかしHTMLインポート機能はサポートしていない」ということになっている。&lt;code class=&quot;highlighter-rouge&quot;&gt;link.import&lt;/code&gt;が、&lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;になっているのだ。たとえ&lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;であっても、値が存在すれば&lt;code class=&quot;highlighter-rouge&quot;&gt;in&lt;/code&gt;演算子は&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;を返す。従ってFirefox for AndroidにはHTMLインポート機能が存在する、とwebcomponentsjsは判断しているわけだ。&lt;/p&gt;

&lt;p&gt;一応、&lt;a href=&quot;https://github.com/webcomponents/webcomponentsjs/issues/452&quot;&gt;バグレポート&lt;/a&gt;はした。プルリクエストはリクエストしなかった。&lt;a href=&quot;https://github.com/webcomponents/webcomponentsjs/blob/master/CONTRIBUTING.md&quot;&gt;コントリビューションページ&lt;/a&gt;によると、コントリビュートするにはライセンスに同意する必要がある。それは構わなかったのだが、同意手続きの過程で住所を入力欄が現れた。それも必須項目として。漠然と不安を覚えてプルリクエストは躊躇ってしまった。&lt;/p&gt;

&lt;p&gt;webcomponentsjsでこの問題が対応されるかは分からない。だから今この日記ではこんなワークアラウンドを入れている。&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ua&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;navigator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;userAgent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ua&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Android&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;ua&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Firefox&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;link&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HTMLLinkElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;これを、webcomponentsjsをロードする&lt;code class=&quot;highlighter-rouge&quot;&gt;script&lt;/code&gt;タグの&lt;strong&gt;前&lt;/strong&gt;に置いている。&lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt;節の条件は&lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;のチェックだけでよさそうだが、そうするとなぜかChromiumやChromeでページが読めなくなってしまったので、プラットフォームも判断している。なぜ読めなくなったかは調べていない。&lt;/p&gt;

</content>
    <id>https://kitaitimakoto.github.io/apehuci/2015/12/03.html</id>
    <link href="https://kitaitimakoto.github.io/apehuci/2015/12/03.html"
      type="text/html"/>
    <title>Firefox for AndroidでもPolymerが動作するようにする</title>
    <updated>2015-12-03T00:00:00Z</updated>
    <dc:date>2015-12-03T00:00:00Z</dc:date>
  </entry>
  <entry>
    <content type="html">&lt;p&gt;とても久し振りに&lt;a href=&quot;https://sendagayarb.doorkeeper.jp/&quot;&gt;Sendagaya.rb&lt;/a&gt;に参加して来た。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://sendagayarb.doorkeeper.jp/events/35276&quot;&gt;第128回&lt;/a&gt;の今日は、三十分くらい雑談した後、QiitaのAction Cableの記事&lt;a href=&quot;http://qiita.com/bisque33/items/1360477c2260b361ec03&quot;&gt;[Rails5]Action Cableのサンプルを読み解いてみる&lt;/a&gt;を読みながらああだこうだ言っていた。一通り見ての感想は「便利そう」「使いたい」。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/rails/actioncable&quot;&gt;Action Cable&lt;/a&gt;はRails 5から入るらしい新機能で、WebSocketをRailsに統合した形で扱える物らしい。まともに記事など読んだのは今日が初めてで、これがRais界隈でどれくらい認知されているかは分からない。僕が「RailsでWebSocket」と聞いて漠然と思い浮かべたのが&lt;code class=&quot;highlighter-rouge&quot;&gt;ActionController::Live&lt;/code&gt;だったのだけど全然違う（&lt;code class=&quot;highlighter-rouge&quot;&gt;ActionController::Live&lt;/code&gt;については&lt;a href=&quot;http://tenderlovemaking.com/2012/07/30/is-it-live.html&quot;&gt;Is It Live?&lt;/a&gt;がよい紹介記事だ）。&lt;/p&gt;

&lt;p&gt;Action Cableでは、Railsのプロセスの他にAction Cable用のプロセスを立ち上げる。こいつがブラウザーとWebSocketで通信する。普通だ。Action Cableのいい所はここからで、Railsとセッション用のクッキー情報を共有できる（電子署名が付いているあれだ）。だから、WebSocketを使ってAction Cableに接続してきたクライアントが、Rails（のデータベース）で管理しているどのユーザーに相当するのか、見付けることができるのだ。&lt;/p&gt;

&lt;p&gt;更に、Railsのプロセスからブラウザーに、WebSocket経由でメッセージを送ることができる。例えば、フォームなどから普通にコメントを投稿した時に、そのことをWebSocketで繋がっている全ユーザーに通知できる。だがRailsがWebSocketを使ってAction Cableに接続しているわけではない。Active Jobを使ってRedisにメッセージを送信するのだ。Action CableはRedisのpubsub機能を使っていて、Rails（Active Job実装のワーカープロセス）がパブリッシャー、Action Cableプロセスがサブスクライバーになっている。Action Cableはサブスクライブしたメッセージを、予めAction Cable用に書かれたコードに従って、必要なクライアントに流す。もちろん、クライアント同士WebSocket経由での通信もできる。（そう言えば、はて、クライアントからDBのレコードを弄るような場合、Action Cableプロセスがやるのだろうか、Railsプロセスがやるのだろうか。後者はフォームなりAjaxなりでやることが自然に思い浮かべられるが、前者は逆方向のpubsubになる？　と考えると、そういうことはなさそうだなと思う。）&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Rails --(Active Job)--&amp;gt; Worker --(Redis pubsub)--&amp;gt; Cable --(WebSocket)--&amp;gt; Clients
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;副産物として、始めからRedisのpubsubでWebSocketサーバーをつなぐのが前提なので、プロセスを増やすだけで簡単にスケールアウトさせられそうだ。これは悪いことではない、というかむしろいいことだが、Railsはモノリシックなのが特徴の一つという印象を持っていたので、結構変わり種のコンポーネントだな、と感じた。繰り返すが悪いことではない。&lt;/p&gt;

&lt;p&gt;と、便利なところだったが、実は半分くらいは推測で書いている。件の記事の内容からは内部の動きは分からないからだ。だから今度はAction Cableのソースコードを読みたいと思っているし、もしかしたら次回のSendagaya.rbでソースコードリーディングができるかも知れない。&lt;/p&gt;

&lt;p&gt;余談。「RailsからRedisにパブリッシュするためにはSidekiqなどが必要で、更に別のプロセスを立てないといけない」といった話をしている時に、&lt;a href=&quot;https://twitter.com/tkawa&quot;&gt;@tkawa&lt;/a&gt;さんに&lt;a href=&quot;https://github.com/brandonhilkert/sucker_punch&quot;&gt;Sucker Punch&lt;/a&gt;を教えてもらった。Railsプロセス内にCelluloidを使ってアクタースレッドを立て、それを使ってActive Jobのジョブを実行する物のようだ。ぱっと見本番で使っていいかは不安に思ったが、開発環境で使う分には便利だろう。&lt;/p&gt;

</content>
    <id>https://kitaitimakoto.github.io/apehuci/2015/11/30.html</id>
    <link href="https://kitaitimakoto.github.io/apehuci/2015/11/30.html"
      type="text/html"/>
    <title>Action Cableが便利そう</title>
    <updated>2015-11-30T00:00:00Z</updated>
    <dc:date>2015-11-30T00:00:00Z</dc:date>
  </entry>
  <entry>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://groonga.doorkeeper.jp/events/31482&quot;&gt;Groonga Meatup 2015&lt;/a&gt;で発表してきた。タイトルは「Rubyでプラグインを作れる分散全文検索エンジンDroonga」。発表を録画してもらえていて、以下で見られる。&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/9TfYtKolbcg?list=PLLwHraQ4jf7MRIR36oO_Zys4V5oJ8DGDb&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;（&lt;del&gt;あとで個別に切り分けたものが出てきそう&lt;/del&gt;&lt;ins&gt;出てきたので差し替えた。ありがとうございます！&lt;/ins&gt;）&lt;/p&gt;

&lt;p&gt;資料は以下の通り。
（iframeで埋め込んでいるけど、HTTPS非対応なので埋め込み表示できていないかも知れない。リンク先に飛ぶか、このページのURIをHTTPにすると見られる。）&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.storyboards.jp/viewer/yct228&quot;&gt;http://www.storyboards.jp/viewer/yct228&lt;/a&gt;&lt;/p&gt;
&lt;iframe src=&quot;http://www.storyboards.jp/widget/yct228&quot; width=&quot;640&quot; height=&quot;480&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;今年のテーマ（去年までは「全文検索エンジンGroongaを囲む夕べ」という名前でやっていたイベント）は「よいところ」なので、Droongaのよいところを発表してきた。発表の機会を貰えたことはとても価値のあることだった。本当にありがとうございました。&lt;/p&gt;

&lt;p&gt;反省点色々あった。ただ、これに関する色々なことを実際のDroonga開発者の方に聞けて、三つくらい疑問が解消したのがあって、僕にとってはとても有意義だった。ありがとうございました。&lt;/p&gt;

&lt;p&gt;あと、プレゼンに使った&lt;a href=&quot;http://www.storyboards.jp/&quot;&gt;Stobo&lt;/a&gt;はそれなりに面白がってくれて、自分で作った物ではないけどこれも嬉しかった。本当は&lt;a href=&quot;http://rabbit-shocker.org/ja/&quot;&gt;Rabbit&lt;/a&gt;でスライド作って&lt;a href=&quot;http://slide.rabbit-shocker.org/&quot;&gt;Rabbit Slide Show&lt;/a&gt;に上げたいなと思っていたのだけど時間無さ過ぎて慣れてるツールになったというのは秘密。&lt;/p&gt;

</content>
    <id>https://kitaitimakoto.github.io/apehuci/2015/11/29.html</id>
    <link href="https://kitaitimakoto.github.io/apehuci/2015/11/29.html"
      type="text/html"/>
    <title>Rubyでプラグインを作れる分散全文検索エンジンDroonga</title>
    <updated>2015-11-29T00:00:00Z</updated>
    <dc:date>2015-11-29T00:00:00Z</dc:date>
  </entry>
  <entry>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://groonga.doorkeeper.jp/events/34337&quot;&gt;Groongaで学ぶ全文検索 2015-11-20&lt;/a&gt;に参加して来た。遅れそうで「遅れます」って連絡してたら、15分くらい早く着いてしまって時間のお見積りが不正確で大変申し訳ございませんでした。&lt;/p&gt;

&lt;p&gt;今日のテーマは日本語での全文検索。&lt;/p&gt;

&lt;p&gt;以前、英語での全文検索の仕組みについてはやった（&lt;a href=&quot;http://apehuci-kitaitimakoto.sqale.jp/apehuci/?date=20150918&quot;&gt;http://apehuci-kitaitimakoto.sqale.jp/apehuci/?date=20150918&lt;/a&gt;）。今回は軽くそれを復習した後、日本語では英語の場合と違ってどういうところを頑張る必要があるかという話だった。最初に、知ってるだろと説明役を振られそうになったけど「日本語の方は分からないんですよ」と言って断った。が、日本語で分かってない部分（分かち書きの仕方）まで辿り着かなかったので、引き受けておけばよかったなあ。&lt;/p&gt;

&lt;p&gt;さておき、まず、英語での全文検索のおさらい。以下、話を単純化するため、一語のみでの検索という前提にする。&lt;/p&gt;

&lt;p&gt;全文検索は検索語を入力として、それが含まれた文書を返すもの。単純に、検索語に対して、登録されている文書の一つ一つを調べていくと、文書が増えるにつれどんどん検索が遅くなってしまう。これを防ぐために、インデックスを作り、それに対して検索するようにする。&lt;/p&gt;

&lt;p&gt;例えば、「Groonga」で検索した時、登録されている文書から「Groonga」という言葉が含まれている文書（のIDなど）の一覧を返す。この時インデックスにはどういったデータが入っていると嬉しいか？　どういう構造になっていると嬉しいか？　キーが分かると値がすぐに分かる類のデータ構造がよい。配列やハッシュテーブルなどである。&lt;/p&gt;

&lt;p&gt;このデータ構造を使って、キーには検索でキーワードとしてヒットさせたい物（「Groonga」「Mroonga」……）が入っているようにする（逆に言うと&lt;strong&gt;、ここに入っている物だけが、キーワードとして検索可能&lt;/strong&gt;になる）。値には、そのキーワードを含む文書（のIDなど）の一覧を入れておく。すると、「Groonga」で検索した時に、このハッシュテーブルなりを使えば、すぐに「『Groonga』を含む文書一覧」が手に入る。&lt;/p&gt;

&lt;p&gt;英語だろうが日本語だろうが、ここまでの考え方は同じ。英語ではここまでで大枠の話は尽きる。データ構造のキーに入れる物が、英単語と一致すること殆どだからだ。多くの場合、検索は、単語で行う。「Groonga」を含む文書が欲しい時に「Groo」みたいな中途半端な文字列で検索したりはしない。こうして検索語の種類（英単語）とインデックスのキーの種類（英単語）が一致するので、英語の場合は概ねこれで要求を満たせる。&lt;/p&gt;

&lt;p&gt;ところが日本語ではそうはいかない。&lt;/p&gt;

&lt;p&gt;例えば東京都について書かれた文書を探したい時に、検索キーワードとして「東京都」を使うこともあれば「東京」を使うこともある。インデックスのキーに「東京都」だけ入れておけばよいということにはならない。そうしてしまうと、「東京」で検索した時に、その語に&lt;strong&gt;一致&lt;/strong&gt;するキーが無いわけなので、「東京を含む文書がない」という結果になってしまう。これは、日本語では、単語の区切りが明確ではないという性質に由来する。「単純に単語を入れておけばいいというわけではない。なぜなら単語で検索しない（複合語などで検索する）かも知れないからだ」といこと。（最初に「一単語で検索する」という前提を置いたけど、そもそも日本語では「一単語がどこまでか」が自明ではない、ということだと思う。ちょっとここ自信無い。）&lt;/p&gt;

&lt;p&gt;さて、この問題の解決には大きく分けて二種類のアプローチがある。一つは、英語同様単語をキーワードにすること（アプローチA）。「花が咲いた」という短い文書があった時、「花」「が」「咲いた」をキーとしてインデックスに入れる（「咲いた」は微妙かも知れないけどここではそうする）。こうしておくと、「花」で検索した時、「が」で検索した時……に、正しくこの文書を見付けられる。&lt;/p&gt;

&lt;p&gt;もう一つは、単語を気にせず何でもキーにしてしまうこと（アプローチB）。「花が」みたいな複合語も「咲い」みたいな単語になってない文字列（ということにしてください）も何でも、意味を気にせずキーにする。&lt;/p&gt;

&lt;p&gt;この二種類のアプローチがあって、両方よく使われている。なぜ一つでなく二つあるかというと、アプローチAにある種の難しさがあるからだ。どういう難しさかというと、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;「すもももももももものうち」みたいに、単語の切り方が難しい（「スモモも桃も桃のうち」）&lt;/li&gt;
  &lt;li&gt;「ここではきもの」みたいに、切り方に複数の候補があって選ぶのが難しい（「ここでは、着物」「ここで、履物」）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;など（他にもある？）。&lt;/p&gt;

&lt;p&gt;アプローチAは、検索時にやることが少なくなりやすいという特徴がある。多くの場合、検索語は単語になる。今、インデックスのキーとしては単語を入れているので、単純にハッシュテーブルなどを引けばよくなり、速い。&lt;/p&gt;

&lt;p&gt;アプローチBは、例えば上で説明したように、文書を二文字ずつ区切ってキーにしている場合。この場合は、検索語が「咲いた」だと三文字なので、そんなキーは存在せず、（本来ヒットするべき）文書がヒットしない。これを防ぐために検索語の方も、インデックスのキーの長さ（二文字）に合わせてばらばらにする必要がある。（&lt;del&gt;まず、この処理の分、検索時にはすることが増え、遅くなる。でも多分、これはあまり気にしなくていい遅さで、次の話のほうが支配的だろう。&lt;/del&gt;&lt;ins&gt;ということをまとめ発表で言ったら、&lt;a href=&quot;https://twitter.com/ktou&quot;&gt;@ktou&lt;/a&gt;さんが訂正してくれた。アプローチAでも分割しているらしい。検索クエリーが単語になってくれていれば、そういう制約を設けることができれば分割しなくていいが、そうでない場合がほとんどなので。……振り返ると、アプローチA＝形態素解析を使った全文検索で、クエリーも解析しているのは知っていたはずだった……。&lt;/ins&gt;）&lt;/p&gt;

&lt;p&gt;「咲いた」を二文字でバラバラにすると「咲い」と「いた」。このそれぞれのキーについて文書を検索する。すると、「『咲い』を含む文書一覧」と「『いた』を含む文書一覧」が手に入る。これらの文書には「『咲い』は含まれるが『いた』は含まれない、従って『咲いた』は含まれない」という文書と、この「咲い」と「いた」の関係をひっくり返した文書が含まれていて、これらはユーザー（プログラム）に渡す検索結果からは除きたい。しかも、除くだけでは不十分で、「花が咲いていた」という文書も、現時点での「正解」の文書リストには含まれてしまっている。でもここに「咲いた」の語はない。「咲い」と「いた」がこの順番で隣り合っていないといけないわけだ。今手に入っている文書のうち、この点も満たす文書を更に絞り込む必要がある。&lt;/p&gt;

&lt;p&gt;この絞り込みの方法は二つある。一つは、インデックスの、それぞれのキーに対応する情報に、（文書IDなどの識別子のほか）文書中の出現位置（何文字目に出現するキーか）という情報も入れておく方法。こうしておけば、検索時に「『咲い』と『いた』を含み、その出現位置が一文字違い」という文書を探せばよいことになる。（説明されなかったが、「『咲い』を含み、その出現位置の次の位置が『いた』である」という検索方法だと、集合としては同じ結果が得られるけど、だいぶ遅くなってしまうはず。「咲い」を含む文書一覧を取得した後、それぞれの中身を先頭から一文字ずつ調べていく必要があるので、文書自体を読み込んだり、文字検索用のカーソルを動かしたりする必要が出てきてしまう。）&lt;/p&gt;

&lt;p&gt;もう一つは、無駄を承知で、まず、&lt;del&gt;「咲い」を含む文書一覧と「いた」を含む文書一覧を両方取得してしまう。&lt;/del&gt;&lt;ins&gt;「『咲い』と『いた』を両方含む文書一覧」を取得して、（これも訂正してもらった。）&lt;/ins&gt;その後に文書それぞれを調べて、キーが隣り合っているか（「咲いた」と連続しているか）を調べる。&lt;/p&gt;

&lt;p&gt;アプローチBはこうして、アプローチAよりも処理が増えているので、難しさは減るが、検索時に遅くなってしまう。&lt;/p&gt;

&lt;p&gt;というのが理屈。ここまで説明したところで、専門用語が導入された。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;アプローチA … 形態素解析&lt;/li&gt;
  &lt;li&gt;アプローチB … N-gram（Nのところは文字数。N=2でバイグラム、3でトリグラム）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;こうしてキーワードが連続しているかをチェックして、連続している物だけを返す検索方法をフレーズ検索と言う。一応形態素解析を使った検索で使われることもあるが、多くはN-gram検索で使われる。形態素解析を使う場合は、そもそもの形態素解析を使う目的から（インデックスのキーが単語になっているので）、単語で検索して問題ないことが殆ど。そして多くの人は単語で検索する。逆にN-gramの場合は、「いた」を含む文書とか基本的にノイズばっかりになるから、きちんと（二文字を越える）欲しい単語を含んでいるのかチェックしないと使い物にならない。&lt;/p&gt;

&lt;p&gt;以上、英語での検索の場合の他に、日本語で頑張らないといけない処理。&lt;/p&gt;

&lt;p&gt;余談。参加者の中に、Mroongaを使っていてMeCabの「too long sentence」といった内容のエラーに遭遇したという人がいた。これについても&lt;a href=&quot;https://twitter.com/ktou&quot;&gt;@ktou&lt;/a&gt;さんが解説してくれた。これはMeCabの制限に引っかかったために発生したエラーとのこと。MeCabでは入力された文書に対して、句読点などを見て文に分割しようとする。ところが、文を分割する目印を見付けられなくて一文が長くなりすぎるような文書があると、リソース不足でこのようなエラーになってしまう。&lt;/p&gt;

&lt;p&gt;最近のGroongaではこれの対策も実装されているらしい。オプションを指定することで、「一文が長くなり過ぎたら強制的に途中で切ってMeCabに渡す」ということができるようになる。これまで全体がエラーになっていた所が、この部分だけちょっとおかしな検索結果になるというだけなので、全体としてはまあまあうまくいっているらしい。&lt;/p&gt;

</content>
    <id>https://kitaitimakoto.github.io/apehuci/2015/11/20.html</id>
    <link href="https://kitaitimakoto.github.io/apehuci/2015/11/20.html"
      type="text/html"/>
    <title>日本語文書の全文検索</title>
    <updated>2015-11-20T00:00:00Z</updated>
    <dc:date>2015-11-20T00:00:00Z</dc:date>
  </entry>
  <entry>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://middlemanapp.com/jp/&quot;&gt;Middleman&lt;/a&gt;でシンタックスハイライトするには&lt;a href=&quot;https://github.com/middleman/middleman-syntax&quot;&gt;middleman-syntax&lt;/a&gt;がある。でもこの日記はMiddleman v4で作っていて、middleman-syntaxは今日時点ではv4に対応していない。のでフォークして対応させようかなと思ったけど、ふと思い出した。&lt;a href=&quot;http://kramdown.gettalong.org/&quot;&gt;kramdown&lt;/a&gt;がそもそもシンタックスハイライトに対応しているはずだ。&lt;/p&gt;

&lt;p&gt;kramdownはRuby製のMarkdownパーサー＋αのライブラリーで、MiddlemanでMarkdownを使う時のデフォルトエンジンにもなっている。MiddlemanでのMarkdownエンジンの設定方法、調整方法は公式ドキュメントにある（&lt;a href=&quot;https://middlemanapp.com/jp/basics/template_engine_options/&quot;&gt;テンプレートエンジンオプション&lt;/a&gt;）。&lt;code class=&quot;highlighter-rouge&quot;&gt;markdown_engine&lt;/code&gt;設定はデフォルトのままで構わないので、&lt;code class=&quot;highlighter-rouge&quot;&gt;markdown&lt;/code&gt;設定だけ、config.rbにこう追加した。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:markdown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'syntax_highlighter'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'rouge'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;これで、Markdownの記事でのコード部分にシンタックスハイライト用の&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;span&amp;gt;&lt;/code&gt;が追加される。ここでは&lt;code class=&quot;highlighter-rouge&quot;&gt;rouge&lt;/code&gt;を指定しているけど&lt;code class=&quot;highlighter-rouge&quot;&gt;coderay&lt;/code&gt;も使える（gemは自分でGemfileに書いてインストールする必要がある）。この設定ではブロックレベルのコードだけでなく、文中の&lt;code class=&quot;highlighter-rouge&quot;&gt;span&lt;/code&gt;要素もハイライトされる。この日記ではそのままにしているけど、嫌な場合には&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:markdown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'syntax_highlighter'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'rouge'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'syntax_highlighter_opts'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s1&quot;&gt;'span'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'disable'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;と、&lt;code class=&quot;highlighter-rouge&quot;&gt;span&lt;/code&gt;の時だけ無効化してやればいい。その他、使えるオプションはkramdownサイトの&lt;a href=&quot;http://kramdown.gettalong.org/syntax_highlighter/rouge.html&quot;&gt;Syntax Highlighting With Rouge&lt;/a&gt;というドキュメントにあるので参照されたい（Coderayの場合は&lt;a href=&quot;http://kramdown.gettalong.org/syntax_highlighter/coderay.html&quot;&gt;Syntax Highlighting With Coderay&lt;/a&gt;）。&lt;/p&gt;

&lt;p&gt;これだけでは単に&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;span&amp;gt;&lt;/code&gt;が追加されるだけでスタリングはされない。CSSを追加する必要がある。Rougeで使えるテーマは&lt;a href=&quot;https://github.com/jneen/rouge/tree/master/lib/rouge/themes&quot;&gt;Rougeのthemesディレクトリー&lt;/a&gt;を見ればよくて、この日記ではGitHubテーマを使っている。stylesheets/highlight.css.erbというファイルを作って、こう書いた：&lt;/p&gt;

&lt;div class=&quot;language-erb highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rouge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Themes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Github&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;scope: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'.highlighter-rouge'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;この設定には&lt;a href=&quot;http://3100.github.io/&quot;&gt;Room 3100&lt;/a&gt;というブログの&lt;a href=&quot;http://3100.github.io/blog/2013/10/31/monokai-theme-to-middleman-blog.html&quot;&gt;middleman-blogのハイライトにMonokaiテーマを使う&lt;/a&gt;という記事を大いに参考にさせてもらった。ありがとうございます。&lt;/p&gt;

&lt;p&gt;あとは「`…`」（インライン）やフェンストコードブロックでマークアップしてやればよい。注意が必要なのは、kramdownのコードブロックはGitHubのフェンストコードブロックとちょっと違って、「&lt;code class=&quot;highlighter-rouge&quot;&gt;~&lt;/code&gt;」（チルダ）を三つ並べる（&lt;a href=&quot;http://kramdown.gettalong.org/syntax.html#language-of-code-blocks&quot;&gt;Language of Code Blocks&lt;/a&gt;）。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~~~ ruby
set :markdown, 'syntax_highlighter' =&amp;gt; 'rouge'
~~~
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</content>
    <id>https://kitaitimakoto.github.io/apehuci/2015/11/07.html</id>
    <link href="https://kitaitimakoto.github.io/apehuci/2015/11/07.html"
      type="text/html"/>
    <title>Middleman v4でシンタックスハイライト</title>
    <updated>2015-11-07T00:00:00Z</updated>
    <dc:date>2015-11-07T00:00:00Z</dc:date>
  </entry>
  <entry>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://groonga.doorkeeper.jp/events/33701&quot;&gt;Groongaで学ぶ全文検索 2015-11-06&lt;/a&gt;に参加してきた。&lt;/p&gt;

&lt;p&gt;今日のお題は「精度」。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;精度とは&lt;/h2&gt;

&lt;p&gt;精度とは何か、参加者からはこんな意見が出た。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ユーザーの満足度&lt;/li&gt;
  &lt;li&gt;思った物が探せてる&lt;/li&gt;
  &lt;li&gt;もれなく検索できてる&lt;/li&gt;
  &lt;li&gt;ごみがない&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ここから&lt;a href=&quot;https://twitter.com/ktou&quot;&gt;@ktou&lt;/a&gt;さんの説明。精度に入る前に、再現率と適合率の説明があった。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;再現率&lt;/h3&gt;

&lt;p&gt;検索した時に返すべき物があるはず。&lt;br /&gt;
例えば「京都」で検索した時、「京都」を含む文書は全部返って来てほしい（ここではそういうことにする）。ところがトークナイザーに形態素解析器を使っていて、「京都」で検索した時に「東京都」はヒットしないような設定にしていたりすることもある。こういう時、その「東京都」の文書は検索結果から漏れてしまうので、再現率を下げてしまうことになる。&lt;br /&gt;
再現率は、「検索結果で返ってくる&lt;strong&gt;べき&lt;/strong&gt;物のうち、実際に検索エンジンが返した物の割合」。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;適合率&lt;/h3&gt;

&lt;p&gt;上で「返す&lt;strong&gt;べき&lt;/strong&gt;物」という話をしたので引き続きそれを使うと、「実際に返って来た検索結果のうち、返すべきだった物の割合」が適合率。&lt;br /&gt;
再現率を上げるためには、例えば登録している文書すべてを検索結果として返すことができる。そうすると「返すべき物」は全て含まれているので、再現率は100%になる。しかし、この結果はいらない物を多量に含んでいるだろうから、期待する結果からは遠い。この時適合率は低いということになる。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;精度&lt;/h3&gt;

&lt;p&gt;さて、検索エンジンの精度の話をする時、この再現率と適合率が、よく指標として使われる。最初に上げた参加者みんなの精度のイメージのうち「ユーザーの満足度」「思った物が探せてる」はふわっとしてるけど、再現率と適合率は数値化できるので議論しやすい。&lt;/p&gt;

&lt;p&gt;ところが、一般に、どちらかを上げるとどちらかは下がってしまう（らしい）。&lt;br /&gt;
特許検索はふつう、適合率を下げても再現率が重要になる。特許出願を考える際には既存の特許とかぶらないことを確認する必要があるが、その時には、漏れがあっては困るからだ。&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;現実の話&lt;/h3&gt;

&lt;p&gt;再現率と適合率はよく指標として使われるが、現実的には、この二つだけで&lt;del&gt;精度&lt;/del&gt;&lt;ins&gt;検索結果のよし悪し&lt;/ins&gt;を議論できるわけではない。&lt;/p&gt;

&lt;p&gt;例えば検索して、結果が1000件あったとする。この時、ふつう、1000件全部は確認しない。全部を確認しないのであれば、「全体に対しての割合」である再現率や適合率は、その厳密な数値には意味がないことになる。&lt;br /&gt;
Googleでヒットした時に大事なのは、多くの場合1ページ目、せいぜい3ページ目くらいまでで、みんなそれを目指してSEOを頑張っていた。なので、4ページ目以降は、不要な検索結果ばかりで適合率が低かったとしても問題ない。&lt;/p&gt;

&lt;p&gt;もちろんこれはGoogle検索はそういう選択をした、またウェブの一般的な検索はそれでいいことが多いだろうということで、ケースバイケースである。&lt;/p&gt;

&lt;h2 id=&quot;deldelinsins&quot;&gt;&lt;del&gt;精度を高める&lt;/del&gt;&lt;ins&gt;よい検索結果を提示する&lt;/ins&gt;には&lt;/h2&gt;

&lt;p&gt;&lt;ins&gt;追記。始め「精度を高める」という書き方で書いていた。しかし、他の人のまとめ（前半、講師の&lt;a href=&quot;https://twitter.com/ktou&quot;&gt;@ktou&lt;/a&gt;さんが説明をして、後半で各々自分の言葉でまとめるという勉強会。この日記もそのまとめとして書いている）を聞いているうち、これがよくない表現だと気付いた。精度はやっぱり再現率と適合率のことで、この節で話したいのは「再現率と適合率を考えるだけではユーザによい検索結果を提示することはできない」ということだからだ。&lt;/ins&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;精度を上げる&lt;/del&gt;&lt;ins&gt;ユーザーによい検索結果を提示する&lt;/ins&gt;にはどうすればいいか、方法は一概には言えない。ユースケースごとに求められる精度のタイプが変わるからだ。&lt;/p&gt;

&lt;p&gt;上で見たような「上位n検の結果だけが特に重要」みたいなケースではスコア付けが大事になる。スコア付けには（昔の）GoogleのPageRankや、ほかにTF、TS・IDF、BM25などがある。それぞれが何なのかは省略する。&lt;/p&gt;

&lt;p&gt;確かPageRankは、各ドキュメントの被リンクの数などをスコア付けに使っていたと思う。それが「いい結果」ということでGoogleが受け入れられていった一因になっていた。  &lt;br /&gt;
これはTF・IDFなどの、文書中のキーワードから導出した指標の限界を示唆している。&lt;a href=&quot;https://twitter.com/ktou&quot;&gt;@ktou&lt;/a&gt;さんはこのように、キーワードだけを使うのでは、精度はそれほどよくならないと思っているらしい。それよりも文書のメタデータを使ってスコアを考えるほうが現実的にいい結果が得られることが多い。&lt;/p&gt;

&lt;p&gt;メタデータには例えばタグがある。&lt;br /&gt;
TF・IDFでは、「文書中のTFが高いつまりある単語が多いという時、その単語はその文書を特徴づけている」と考えている。IDFについては、「ある語がたくさんの文書に含まれているほど、その語は文書の特徴を表現していない」と考える。つまり「その文書の特徴は何なのか」ということが知りたい、その知りたいことの導出に文書中のキーワードを利用していることになる。本質的には文書の特徴が知りたいだけなので、書き手の用意したタグというのは、多くの場合キーワード由来の指標よりも、その特徴を顕著に表していることになるだろう。そうしたわけでタグは、検索結果の重み付けに使う指標として有効と考えられる。&lt;/p&gt;

&lt;p&gt;他に位置情報も考えられる。渋谷を歩いててラーメンを食べたくなった時に、「ラーメン」と検索すると、渋谷のお店を扱った文書が出てきてほしい。仮に文書中に店舗名しかなくて、「渋谷」みたいな場所を示すキーワードがないとする。でも文書のメタデータに渋谷の経緯度があるとすると、それを利用して渋谷の店を検索結果の上位に出すことができる。&lt;/p&gt;

&lt;p&gt;こういった文書のメタデータの他に、検索する人の情報を使うこともできる。今、Googleの検索結果は、（ログインしていれば）訪問した回数の多いページが上位になるようになっている。フェイスブックでの検索も、自分に関連のあるユーザーなんかが結果の上位に来るようになっている。上のラーメンの例でも、スマホからGPSによる位置情報を検索クエリーに乗せて使うことができる。&lt;/p&gt;

&lt;p&gt;こういう風に、&lt;del&gt;精度を高める&lt;/del&gt;&lt;ins&gt;ユーザーによい検索結果を提示する&lt;/ins&gt;には、文書中のキーワードを使うだけでは、限界がありそうだ。&lt;/p&gt;

&lt;h2 id=&quot;groonga&quot;&gt;Groongaでのスコア付け&lt;/h2&gt;

&lt;p&gt;Groongaでは以下のスコア付けの方法が用意されている&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;TF&lt;/li&gt;
  &lt;li&gt;TF・IDF&lt;/li&gt;
  &lt;li&gt;TFで、リミットありの物。TFは参考情報に使って、メインの重み付けの指標は別にあるといった場合。TFは文書の内容に応じて無限に増えていく（例えばヒットしやすい語を埋め込みまくった記事とか）ので、ある単語を書きまくるというスパムの餌食になりやすい。「その語を含んでいる」という事実は考慮しつつも、その影響を一定範囲に抑えるために、重みのリミットを、例えば2（数値はユーザーが決める）とかにしてしまうやり方。Groongaに特徴的で、&lt;a href=&quot;https://twitter.com/ktou&quot;&gt;@ktou&lt;/a&gt;さんはこの重み付け方法を持っている全文検索エンジンを他に知らないとのこと（ちょっと自身なさそうだったw）。&lt;/li&gt;
  &lt;li&gt;メタデータに重みを付けてスコアに反映させるやり方（以下で説明）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最後のは例えば、居酒屋のテーブルがあったとして、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;居酒屋A … 重みは海鮮：10&lt;/li&gt;
  &lt;li&gt;居酒屋B … 海鮮：5&lt;/li&gt;
  &lt;li&gt;居酒屋C … 中華：100&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;たいなメタデータを入れておく。&lt;br /&gt;
グルメサイトで「海鮮が美味しいお店の中から探す」みたいなフィルタリングをしている時は、どんなにその値が高くても、居酒屋Cは上位には出てこないだろう。その重みは海鮮ではなくて中華なのだから。&lt;/p&gt;

&lt;p&gt;と、今日はここまで。&lt;/p&gt;

&lt;p&gt;参加者の一人から「では、他製品と競争するにはメタデータの扱いが重要になるのか」という質問が出ていて、鋭いなあと感心した。&lt;/p&gt;

&lt;p&gt;あと、自分の理解のまとめとしてこの日記を書いている間に、すごい面白そうな話が後ろで繰り広げられていたけど、書くのに忙しくて聞けなかった……。&lt;/p&gt;

&lt;h2 id=&quot;tfidfandor&quot;&gt;TF・IDFはAND検索、OR検索で使われる&lt;/h2&gt;

&lt;p&gt;追記。&lt;a href=&quot;http://flow2flow.hatenablog.jp/entry/2015/11/06/220623&quot;&gt;参加者の一人のまとめ&lt;/a&gt;発表で、「TF・IDFはAND検索、OR検索で使われる」といった物があった。まとめを書いている時に出た疑問を&lt;a href=&quot;https://twitter.com/ktou&quot;&gt;@ktou&lt;/a&gt;さんに質問して、そのフィードバックを入れたらしい。&lt;/p&gt;

&lt;p&gt;これはぱっと見た時にすぐ意味が頭に入ってこなかったが、分かったらもやもやがすごいすっきりした。&lt;/p&gt;

&lt;p&gt;TFは分かるけどTF・IDFの話が全文検索で出てくるのがぴんとこなくてもやもやしていた。僕がTF・IDFを知ったのは全文検索ではなくて類似文書検索、なので定義やその意味を聞かれれば一応答えられるけど、それが全文検索でどういう意味を持つのか、と聞かれると詰まってしまう（はずだとこの時に気付いた）。&lt;/p&gt;

&lt;p&gt;IDFを考える気持ちは、ある文書とある文書を比べる時に「その二つに共通の特徴でも、そもそも全文書、多数の文書に共通の物は、さほど大事な特徴ではない」ということだ。二つ（以上）の文書を比べる時に出てくる概念なのである。でも全文検索では、ヒットした文書同士を比べるようなことはしないなのにDF・IDFを使っているのでもやもやしていた。&lt;/p&gt;

&lt;p&gt;これがAND検索、OR検索のことを考えると、つまりクエリーが複数あって、それぞれについてヒットする文書群があって、その文書群の文書について何らかのスコア付けをする、ということになる。そう考えるとTF・IDFを使うのは自然に思えた。&lt;/p&gt;

&lt;p&gt;またこういう風にも捉えられる。AND検索にせよOR検索にせよ、クエリーを「複数の単語からなるごく短い文書」だと考えられる。この「ごく短い文書」に似ている文書というのが、すなわち検索結果の文書なのだ。やはり、類似文書検索で使われる手法を使うことは、自然に思える。&lt;/p&gt;

&lt;p&gt;他の人の（ちゃんと疑問を疑問と認識できる）視点で出てきたフィードバックがその場でシェアされるの、ありがたいことである。&lt;/p&gt;

&lt;h2 id=&quot;bm25&quot;&gt;BM25&lt;/h2&gt;

&lt;p&gt;追記二。（この日記を含む）みんなのまとめの発表が終わった後、解説が省かれていたBM25というスコア付けの方法も説明してもらった。&lt;/p&gt;

&lt;p&gt;BM25はTFとIDFのほかに、文書の長さも考慮する指標。ある単語について「長い文書の中にたくさんあるとして、それはそういうものだろう。短い文書の中にたくさんあるようだと、それはその文書を特徴付けているているキーワードだろう」という考え方で計算する物らしい。&lt;br /&gt;
これはある種のスパムブログなんかを弾くことができる。スパムブログで「これ入れとけば検索上位になるっぽい」という単語をひたすら書き連ねているようなやつ、それは文書自体も長くなるので、その分スコアが下がる。&lt;/p&gt;

&lt;p&gt;ただ計算量は増えて、計算量としては「TF &amp;lt; TF・IDF &amp;lt; BM25」という順番になっている。&lt;/p&gt;

</content>
    <id>https://kitaitimakoto.github.io/apehuci/2015/11/06.html</id>
    <link href="https://kitaitimakoto.github.io/apehuci/2015/11/06.html"
      type="text/html"/>
    <title>全文検索の精度とスコアについて</title>
    <updated>2015-11-06T00:00:00Z</updated>
    <dc:date>2015-11-06T00:00:00Z</dc:date>
  </entry>
  <entry>
    <content type="html">&lt;p&gt;Polymer 0.5、0.8の頃は、Polymerでマテリアルデザインするのが（少なくともその取っ掛かりは）簡単だったように思うけど、1.0になって難しくなったと感じていた。0.8でも1.0でも同様に、&lt;a href=&quot;https://elements.polymer-project.org/browse?package=paper-elements&quot;&gt;Paper Elements&lt;/a&gt;というコンポーネントセット（&lt;code class=&quot;highlighter-rouge&quot;&gt;paper-*&lt;/code&gt;というタグ集）が予め用意されていて、それを使うとマテリアルデザインが始められるようになっているのに、どこが違うんだろう。&lt;/p&gt;

&lt;p&gt;というところでググったりしていて思い付いたのは、チュートリアルがないからだ。Polymer 1.0自体のチュートリアルはある（&lt;a href=&quot;https://www.polymer-project.org/1.0/docs/start/quick-tour.html&quot;&gt;Quick tour of Polymer&lt;/a&gt;）。でもこれは、Polymerを使って自分で要素を作り、それを使うというチュートリアルだ。名前もチュートリアルではなくクイックツアーになっている。他に公式サイトで探して見付かるのはPaper Elementsカタログの各要素のサンプルと、あとは&lt;a href=&quot;https://developers.google.com/web/tools/polymer-starter-kit/&quot;&gt;Polymer Starter Kit&lt;/a&gt;くらい。前者はリファレンスなので全体の考え方が掴みにくいし、後者はあっさりしすぎている。&lt;/p&gt;

&lt;p&gt;でもPolymer 0.5は、自分でPaper Elementsを使いながら一つのウェブアプリケーションを作るチュートリアルがあった（&lt;a href=&quot;https://www.polymer-project.org/0.5/docs/start/tutorial/intro.html&quot;&gt;Getting the starter project&lt;/a&gt;）。これをやっていたので0.5でPaper Elementsを使ってページを作るのに、細々したところはともかく、「全体としてはこういう流れてやるんだな」というところに躓いた憶えがなかったのだ（と、いうほど、使っていないけれど）。&lt;/p&gt;

&lt;p&gt;日記をこのGitHub Pages＋Middlemanにするにあたって、フレームワークにPolymerを選んだところで改めて探して、ようやく、Paper Elementsの使い方にふさわしい公式ドキュメントを見付けた。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://elements.polymer-project.org/guides/responsive-material-design-layouts&quot;&gt;Responsive Material Design layouts&lt;/a&gt;だ。&lt;/p&gt;

&lt;p&gt;細かいステップを通じて、レイアウトする時の「枠」を教えてくれる。各ステップでデモンストレーションも用意されているので分かりやすい。おすすめ。&lt;/p&gt;

&lt;p&gt;Polymerの公式サイトを探しているのではだめで、&lt;a href=&quot;https://elements.polymer-project.org&quot;&gt;Element Catalog&lt;/a&gt;の下の方にあるガイドを探すべきだった。上のドキュメントから参照している&lt;a href=&quot;https://elements.polymer-project.org/guides/flex-layout&quot;&gt;Flexbox layout with iron-flex-layout&lt;/a&gt;もほぼ必読のドキュメントだと言っていいと思う。まだ読んでいないけど&lt;a href=&quot;https://elements.polymer-project.org/guides/using-neon-animations&quot;&gt;neon-animation&lt;/a&gt;も気になっている。確か今策定中のWeb Animationsを使う要素のコレクションだったと思う。&lt;/p&gt;

</content>
    <id>https://kitaitimakoto.github.io/apehuci/2015/11/04.html</id>
    <link href="https://kitaitimakoto.github.io/apehuci/2015/11/04.html"
      type="text/html"/>
    <title>Polymerでマテリアルデザインする時に読むといい物</title>
    <updated>2015-11-04T00:00:00Z</updated>
    <dc:date>2015-11-04T00:00:00Z</dc:date>
  </entry>
  <entry>
    <content type="html">&lt;p&gt;Rubyでは、文字列（&lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;）クラスに&lt;a href=&quot;http://ref.xaio.jp/ruby/classes/string/length&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;length&lt;/code&gt;&lt;/a&gt;というメソッドがあって、これは文字列の長さを返してくれる。「文字列の長さ」というのは一体何なのだ、というのは実は自明ではない（「実は」とか言ってみたけど、みんな、知っている気がするな）。文字の数かも知れないし、バイト（オクテット）の長さかも知れない。Rubyの&lt;code class=&quot;highlighter-rouge&quot;&gt;String#length&lt;/code&gt;の場合は、文字の数を返す。バイト数が欲しければ&lt;a href=&quot;http://ref.xaio.jp/ruby/classes/string/bytesize&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bytesize&lt;/code&gt;&lt;/a&gt;メソッドを使う。&lt;/p&gt;

&lt;p&gt;余談だけど、Rubyで文字を扱おうと思ったら、るびまの&lt;a href=&quot;http://magazine.rubyist.net/?0025-Ruby19_m17n&quot;&gt;Ruby M17N の設計と実装&lt;/a&gt;をぜひ読んだほうがいい。&lt;/p&gt;

&lt;p&gt;さて長さに戻って、文字の長さというのは、例えばこういうことだ。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# coding: utf-8&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ソースコードファイルのエンコーディングをUTF-8とする&lt;/span&gt;

&lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; 1&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bytesize&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; 1&lt;/span&gt;

&lt;span class=&quot;s2&quot;&gt;&quot;あいう&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; 3 三文字の文字列&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;あいう&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bytesize&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; 9 ソースコードファイルがUTF-8なので、文字列リテラルもUTF-8になり、バイト数は9になる&lt;/span&gt;

&lt;span class=&quot;s2&quot;&gt;&quot;あいう&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;UTF-16LE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; 3&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;あいう&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;UTF-16LE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bytesize&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; 6&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# UTF-16でエンディアンを明示しない場合は、（ファイルではなく文字列オブジェクト自体に）2バイトのBOMが付く&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;あいう&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;UTF-16&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; 4&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;あいう&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;UTF-16&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bytesize&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; 8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;（今どき断らなくていいとは思うけど、ここでは1バイトは1オクテット＝8ビット）&lt;/p&gt;

&lt;p&gt;UTF-16にはサロゲートペアという物があって、多くの文字は一文字あたり16ビット（2バイト）なんだけど、サロゲートペアを使って表す文字は一文字表すのに32ビット（4バイト）使う。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;𩸽&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bytesize&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; 4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;それでも、Rubyはこれを「一文字」として数えてくれる。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;𩸽&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'UTF-16LE'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;人間にとってとても分かり易い。&lt;/p&gt;

&lt;p&gt;JavaScriptではこれは「長さ」が2となるらしい（&lt;a href=&quot;http://qiita.com/YusukeHirao/items/2f0fb8d5bbb981101be0#iii-ii-%E6%96%87%E5%AD%97%E5%88%97%E9%95%B7%E3%82%92%E6%AD%A3%E3%81%97%E3%81%8F%E5%8F%96%E5%BE%97%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84&quot;&gt;JavaScriptでのサロゲートペア文字列のメモ&lt;/a&gt;）。16ビットが何個分か、という数え方のようだ。JavaScritpでは内部エンコーディングがUTF-16らしいから、処理系の設計者にとってこれが自然だったんだろう。&lt;/p&gt;

&lt;p&gt;ここまでなら、Rubyは人間に優しい言語ですね、よかったよかった、となる。しかしたまに困ることがある。&lt;/p&gt;

&lt;p&gt;この前気まぐれで、&lt;a href=&quot;https://github.com/KitaitiMakoto/nokogiri-xml-range&quot;&gt;Nokogiri::XML::Range&lt;/a&gt;というRubyGemを作った。これは、ブラウザーのマウスで選択した部分を表したりする時に使う&lt;a href=&quot;https://dom.spec.whatwg.org/#ranges&quot;&gt;DOM Range&lt;/a&gt;という仕様を、&lt;a href=&quot;http://www.nokogiri.org/&quot;&gt;Nokogiri&lt;/a&gt;を使って実装してみた物だ。&lt;/p&gt;

&lt;p&gt;これを書く時に、文字列の「長さ」を扱う必要があった。長さとは一体何なのか、仕様書の中を探していくと&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The length attribute must return the number of code units in data.&lt;br /&gt;
（length属性はデータのcode unitの数を返す）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;という表現に行き着く（&lt;a href=&quot;https://dom.spec.whatwg.org/#dom-characterdata-length&quot;&gt;https://dom.spec.whatwg.org/#dom-characterdata-length&lt;/a&gt;）。&lt;/p&gt;

&lt;p&gt;更に、この「code unit」のリンクを踏むと、&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The value of the string token is the sequence of 16 bit unsigned integer code units (hereafter referred to just as code units) corresponding to the UTF-16 encoding of S.&lt;br /&gt;
（文字列トークンの値は、文字列SのUTF-16エンコーディングに対応する16ビット符号なし整数のcode unitの列（以後、単にcode unitとする）である）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;という表現が現れる（&lt;a href=&quot;https://heycam.github.io/webidl/#dfn-code-unit&quot;&gt;https://heycam.github.io/webidl/#dfn-code-unit&lt;/a&gt;）。ここだけ切り取って翻訳するのは僕には難しかったので、できれば前後まとめて読んでほしいけど、要は「16ビットが何個あるか」を文字列の「長さ」とする、ということだ。UTF-16では多くの場合一文字が16ビットで表現されるので、この長さは直感と一致する。でもさっきの「𩸽（ほっけ、らしい）」の場合は32ビットなので、一文字でも「長さ」は2になる。&lt;/p&gt;

&lt;p&gt;どうもUnicodeか何かの規格でも、「UTF-16 length」という物が定義されていて、ここで言う「長さ」と同様の物らしい。正直あんま調べる気の起きないところなので教えてもらったツイートをそのまま貼る：&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://twitter.com/KitaitiMakoto&quot;&gt;@KitaitiMakoto&lt;/a&gt; ですね。サロゲ以外にも合成文字とかもあります。utf-16にエンコードしたときの2バイト単位の長さと考えるば良いかと。&lt;/p&gt;&amp;mdash; OE Waku (@wakufactory) &lt;a href=&quot;https://twitter.com/wakufactory/status/661340825687752704&quot;&gt;2015, 11月 3&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;Nokogiri::XML::Rangeで扱う対象はNokogiriで扱う対象なので、文字エンコーディングが何になるかは分からない、決め打ちできない。その前提で、途中で「長さ」を扱うために、一旦UTF-16に変換して長さを数える、という処理を入れざるを得なかった。多分、この「長さ」は実際には人間の感じる一文字、つまりRubyの&lt;code class=&quot;highlighter-rouge&quot;&gt;String#length&lt;/code&gt;の値にしても殆どの場合問題ないだろうなと思いつつ、ライブラリーなのでそうではない場合も一応扱えないといけない、ということでパフォーマンスが落ちるの覚悟でこんなことをしないといけないのはもやもやした。&lt;/p&gt;

&lt;p&gt;もう一つ困ったことがある。&lt;a href=&quot;http://www.idpf.org/epub/linking/cfi/epub-cfi.html&quot;&gt;EPUB CFI&lt;/a&gt;の仕様でも、文字を数えるのに「UTF-16 length」を扱うことだ（上のツイートの「UTF-16 length」というのはこの仕様の表現を使った）。&lt;/p&gt;

&lt;p&gt;EPUB CFIを非常に大雑把に説明すると、「EPUBファイルの中のある一点、もしくはある範囲を表現する物」だ。EPUBの読む部分は多くの場合XHTMLになっているので、テキスト中のある一点（一文字）を指す場合には、「DOMツリー中の親要素までのパス＋文字オフセット」という物を使うことになる。例えばこういう風な見た目をしている。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;book.epub#epubcfi(/6/4[chap01ref]!/4[body01]/10[para05]/3:10)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;全体の意味を知りたい場合は仕様なり解説記事なりを読んでほしいけど、最後の「&lt;code class=&quot;highlighter-rouge&quot;&gt;:10&lt;/code&gt;」というのが文字オフセットの部分だ。対象テキストノードの10文字目、ということになる。「文字目」と言ったが実際にはUTF-16 lengthなので、人間的な感覚の文字数とは限らない。&lt;/p&gt;

&lt;p&gt;EPUB CFIは表現の仕様であって、用途について決まった物があるわけではないけど、例えば、ウェブページのURIのフラグメントのように、文書の途中にリンクを貼る場合に使うことができる。このEPUB CFIを渡してやると、EPUBリーダーがその部分を頭出しして開いてくれる、というのは普通に期待される使い方だ（実際、&lt;a href=&quot;http://bibi.epub.link/&quot;&gt;BiB/i&lt;/a&gt;というEPUBリーダーはこれに対応している）。&lt;/p&gt;

&lt;p&gt;JavaScriptでこれを扱うなら（或いはJavaも？）簡単なんだろうけど、Rubyだとやはり不必要に思われる処理を入れないといけない。せっかく人間に優しく出来ているのに、仕様のほうがそうなってなかった（いや、UTF-16で暮らしてる人にはフレンドリーなんだろうけどね）。まあ技術文書なので、そういうもんなんだろうけど、愚痴りたくもなりますね。&lt;/p&gt;

</content>
    <id>https://kitaitimakoto.github.io/apehuci/2015/11/03.html</id>
    <link href="https://kitaitimakoto.github.io/apehuci/2015/11/03.html"
      type="text/html"/>
    <title>Rubyでの文字列の「長さ」</title>
    <updated>2015-11-03T00:00:00Z</updated>
    <dc:date>2015-11-03T00:00:00Z</dc:date>
  </entry>
  <entry>
    <content type="html">&lt;p&gt;&lt;a href=&quot;http://sqale.jp/&quot;&gt;Sqale&lt;/a&gt;＋&lt;a href=&quot;http://www.tdiary.org/&quot;&gt;tDiary&lt;/a&gt;で書いていた&lt;a href=&quot;http://apehuci-kitaitimakoto.sqale.jp/apehuci/&quot;&gt;前の日記&lt;/a&gt;から、&lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;＋&lt;a href=&quot;https://middlemanapp.com/jp/basics/blogging/&quot;&gt;Middleman-Blog&lt;/a&gt;に移行を始めた。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://hatenablog.com/&quot;&gt;はてなブログ&lt;/a&gt;なんかのサービスにしようか、迷ったけれど結局静的サイトジェネレーターを選んだ。
サービスだと、更に移行する時にコンテンツを引き継ぐのが面倒そうだったからだ。あと、やるかやらないか分からないけど、というか、今までのtDiaryの運用を見ているとやらなさそうではあるけど、JavaScriptとか自由に使って遊べるほうがいいかな、というくらい。&lt;/p&gt;

&lt;p&gt;GitHub Pages使うとGitを使うわけで、携帯とかから更新できなくて時代に逆行している感じがあるけど、まあ、まあ。Werckerとか使って、特定のブランチで書いたら（そこまではGitHub上のエディターでできる）自動で更新、とかやってもいいしね、必要になったら。&lt;/p&gt;

</content>
    <id>https://kitaitimakoto.github.io/apehuci/2015/11/01.html</id>
    <link href="https://kitaitimakoto.github.io/apehuci/2015/11/01.html"
      type="text/html"/>
    <title>日記を移行し始めた</title>
    <updated>2015-11-01T00:00:00Z</updated>
    <dc:date>2015-11-01T00:00:00Z</dc:date>
  </entry>
  <dc:date>2017-03-13T00:00:00Z</dc:date>
</feed>